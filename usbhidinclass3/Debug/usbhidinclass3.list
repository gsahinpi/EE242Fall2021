
usbhidinclass3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e98  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08006020  08006020  00016020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006070  08006070  00020158  2**0
                  CONTENTS
  4 .ARM          00000008  08006070  08006070  00016070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006078  08006078  00020158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006078  08006078  00016078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800607c  0800607c  0001607c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000158  20000000  08006080  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020158  2**0
                  CONTENTS
 10 .bss          00000918  20000158  20000158  00020158  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a70  20000a70  00020158  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011135  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029fe  00000000  00000000  000312bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000aa0  00000000  00000000  00033cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000978  00000000  00000000  00034760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000227bb  00000000  00000000  000350d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000db85  00000000  00000000  00057893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3c08  00000000  00000000  00065418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00129020  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002a04  00000000  00000000  00129074  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000158 	.word	0x20000158
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006008 	.word	0x08006008

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000015c 	.word	0x2000015c
 80001c4:	08006008 	.word	0x08006008

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 f98c 	bl	80007e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f826 	bl	8000518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f88e 	bl	80005ec <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004d0:	f005 f936 	bl	8005740 <MX_USB_DEVICE_Init>
    /* USER CODE BEGIN 3 */

	  {

		  //keyboardhid.MODIFIER = 0x02;  // left Shift
		  keyboardhid.KEYCODE1 = 0x1e;  // press 'a'
 80004d4:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <main+0x50>)
 80004d6:	221e      	movs	r2, #30
 80004d8:	709a      	strb	r2, [r3, #2]
		  keyboardhid.KEYCODE2 = 0x1f;  // press 'b'
 80004da:	4b0d      	ldr	r3, [pc, #52]	; (8000510 <main+0x50>)
 80004dc:	221f      	movs	r2, #31
 80004de:	70da      	strb	r2, [r3, #3]
		  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof (keyboardhid));
 80004e0:	2208      	movs	r2, #8
 80004e2:	490b      	ldr	r1, [pc, #44]	; (8000510 <main+0x50>)
 80004e4:	480b      	ldr	r0, [pc, #44]	; (8000514 <main+0x54>)
 80004e6:	f003 ff65 	bl	80043b4 <USBD_HID_SendReport>
		  HAL_Delay (50);
 80004ea:	2032      	movs	r0, #50	; 0x32
 80004ec:	f000 f9ea 	bl	80008c4 <HAL_Delay>
		 // keyboardhid.MODIFIER = 0x00;  // shift release
		  keyboardhid.KEYCODE1 = 0x00;  // release key
 80004f0:	4b07      	ldr	r3, [pc, #28]	; (8000510 <main+0x50>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	709a      	strb	r2, [r3, #2]
		  keyboardhid.KEYCODE2 = 0x00;  // release key
 80004f6:	4b06      	ldr	r3, [pc, #24]	; (8000510 <main+0x50>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	70da      	strb	r2, [r3, #3]
		  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof (keyboardhid));
 80004fc:	2208      	movs	r2, #8
 80004fe:	4904      	ldr	r1, [pc, #16]	; (8000510 <main+0x50>)
 8000500:	4804      	ldr	r0, [pc, #16]	; (8000514 <main+0x54>)
 8000502:	f003 ff57 	bl	80043b4 <USBD_HID_SendReport>
		  HAL_Delay (1000);
 8000506:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800050a:	f000 f9db 	bl	80008c4 <HAL_Delay>
		  keyboardhid.KEYCODE1 = 0x1e;  // press 'a'
 800050e:	e7e1      	b.n	80004d4 <main+0x14>
 8000510:	20000174 	.word	0x20000174
 8000514:	20000198 	.word	0x20000198

08000518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b094      	sub	sp, #80	; 0x50
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	f107 0320 	add.w	r3, r7, #32
 8000522:	2230      	movs	r2, #48	; 0x30
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f005 fd66 	bl	8005ff8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052c:	f107 030c 	add.w	r3, r7, #12
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800053c:	2300      	movs	r3, #0
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	4b28      	ldr	r3, [pc, #160]	; (80005e4 <SystemClock_Config+0xcc>)
 8000542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000544:	4a27      	ldr	r2, [pc, #156]	; (80005e4 <SystemClock_Config+0xcc>)
 8000546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054a:	6413      	str	r3, [r2, #64]	; 0x40
 800054c:	4b25      	ldr	r3, [pc, #148]	; (80005e4 <SystemClock_Config+0xcc>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000558:	2300      	movs	r3, #0
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	4b22      	ldr	r3, [pc, #136]	; (80005e8 <SystemClock_Config+0xd0>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a21      	ldr	r2, [pc, #132]	; (80005e8 <SystemClock_Config+0xd0>)
 8000562:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000566:	6013      	str	r3, [r2, #0]
 8000568:	4b1f      	ldr	r3, [pc, #124]	; (80005e8 <SystemClock_Config+0xd0>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000574:	2301      	movs	r3, #1
 8000576:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000578:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800057c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057e:	2302      	movs	r3, #2
 8000580:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000582:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000586:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000588:	2304      	movs	r3, #4
 800058a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800058c:	23a8      	movs	r3, #168	; 0xa8
 800058e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000590:	2302      	movs	r3, #2
 8000592:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000594:	2307      	movs	r3, #7
 8000596:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000598:	f107 0320 	add.w	r3, r7, #32
 800059c:	4618      	mov	r0, r3
 800059e:	f001 fde7 	bl	8002170 <HAL_RCC_OscConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005a8:	f000 f874 	bl	8000694 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ac:	230f      	movs	r3, #15
 80005ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b0:	2302      	movs	r3, #2
 80005b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	2105      	movs	r1, #5
 80005ca:	4618      	mov	r0, r3
 80005cc:	f002 f848 	bl	8002660 <HAL_RCC_ClockConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005d6:	f000 f85d 	bl	8000694 <Error_Handler>
  }
}
 80005da:	bf00      	nop
 80005dc:	3750      	adds	r7, #80	; 0x50
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40023800 	.word	0x40023800
 80005e8:	40007000 	.word	0x40007000

080005ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	f107 030c 	add.w	r3, r7, #12
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	4b19      	ldr	r3, [pc, #100]	; (800066c <MX_GPIO_Init+0x80>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a18      	ldr	r2, [pc, #96]	; (800066c <MX_GPIO_Init+0x80>)
 800060c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b16      	ldr	r3, [pc, #88]	; (800066c <MX_GPIO_Init+0x80>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	4b12      	ldr	r3, [pc, #72]	; (800066c <MX_GPIO_Init+0x80>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a11      	ldr	r2, [pc, #68]	; (800066c <MX_GPIO_Init+0x80>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b0f      	ldr	r3, [pc, #60]	; (800066c <MX_GPIO_Init+0x80>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 800063a:	2301      	movs	r3, #1
 800063c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800063e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000642:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	4619      	mov	r1, r3
 800064e:	4808      	ldr	r0, [pc, #32]	; (8000670 <MX_GPIO_Init+0x84>)
 8000650:	f000 fa6e 	bl	8000b30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000654:	2200      	movs	r2, #0
 8000656:	2100      	movs	r1, #0
 8000658:	2006      	movs	r0, #6
 800065a:	f000 fa32 	bl	8000ac2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800065e:	2006      	movs	r0, #6
 8000660:	f000 fa4b 	bl	8000afa <HAL_NVIC_EnableIRQ>

}
 8000664:	bf00      	nop
 8000666:	3720      	adds	r7, #32
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40023800 	.word	0x40023800
 8000670:	40020000 	.word	0x40020000

08000674 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	80fb      	strh	r3, [r7, #6]
flag=1;
 800067e:	4b04      	ldr	r3, [pc, #16]	; (8000690 <HAL_GPIO_EXTI_Callback+0x1c>)
 8000680:	2201      	movs	r2, #1
 8000682:	701a      	strb	r2, [r3, #0]
}
 8000684:	bf00      	nop
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	2000017c 	.word	0x2000017c

08000694 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000698:	b672      	cpsid	i
}
 800069a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800069c:	e7fe      	b.n	800069c <Error_Handler+0x8>
	...

080006a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	4b10      	ldr	r3, [pc, #64]	; (80006ec <HAL_MspInit+0x4c>)
 80006ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ae:	4a0f      	ldr	r2, [pc, #60]	; (80006ec <HAL_MspInit+0x4c>)
 80006b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b4:	6453      	str	r3, [r2, #68]	; 0x44
 80006b6:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <HAL_MspInit+0x4c>)
 80006b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	603b      	str	r3, [r7, #0]
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <HAL_MspInit+0x4c>)
 80006c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ca:	4a08      	ldr	r2, [pc, #32]	; (80006ec <HAL_MspInit+0x4c>)
 80006cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d0:	6413      	str	r3, [r2, #64]	; 0x40
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <HAL_MspInit+0x4c>)
 80006d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006de:	bf00      	nop
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800

080006f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <NMI_Handler+0x4>

080006f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006fa:	e7fe      	b.n	80006fa <HardFault_Handler+0x4>

080006fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000700:	e7fe      	b.n	8000700 <MemManage_Handler+0x4>

08000702 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000706:	e7fe      	b.n	8000706 <BusFault_Handler+0x4>

08000708 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800070c:	e7fe      	b.n	800070c <UsageFault_Handler+0x4>

0800070e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000712:	bf00      	nop
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr

0800071c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr

0800072a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800072e:	bf00      	nop
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800073c:	f000 f8a2 	bl	8000884 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}

08000744 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_Pin);
 8000748:	2001      	movs	r0, #1
 800074a:	f000 fb8d 	bl	8000e68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000758:	4802      	ldr	r0, [pc, #8]	; (8000764 <OTG_FS_IRQHandler+0x10>)
 800075a:	f000 fced 	bl	8001138 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000668 	.word	0x20000668

08000768 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <SystemInit+0x20>)
 800076e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000772:	4a05      	ldr	r2, [pc, #20]	; (8000788 <SystemInit+0x20>)
 8000774:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000778:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	e000ed00 	.word	0xe000ed00

0800078c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800078c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000790:	480d      	ldr	r0, [pc, #52]	; (80007c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000792:	490e      	ldr	r1, [pc, #56]	; (80007cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000794:	4a0e      	ldr	r2, [pc, #56]	; (80007d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000796:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000798:	e002      	b.n	80007a0 <LoopCopyDataInit>

0800079a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800079a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800079c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800079e:	3304      	adds	r3, #4

080007a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007a4:	d3f9      	bcc.n	800079a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007a6:	4a0b      	ldr	r2, [pc, #44]	; (80007d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80007a8:	4c0b      	ldr	r4, [pc, #44]	; (80007d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80007aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007ac:	e001      	b.n	80007b2 <LoopFillZerobss>

080007ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007b0:	3204      	adds	r2, #4

080007b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007b4:	d3fb      	bcc.n	80007ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80007b6:	f7ff ffd7 	bl	8000768 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007ba:	f005 fbf9 	bl	8005fb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007be:	f7ff fe7f 	bl	80004c0 <main>
  bx  lr    
 80007c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80007c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007cc:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 80007d0:	08006080 	.word	0x08006080
  ldr r2, =_sbss
 80007d4:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 80007d8:	20000a70 	.word	0x20000a70

080007dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007dc:	e7fe      	b.n	80007dc <ADC_IRQHandler>
	...

080007e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007e4:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <HAL_Init+0x40>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a0d      	ldr	r2, [pc, #52]	; (8000820 <HAL_Init+0x40>)
 80007ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007f0:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <HAL_Init+0x40>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a0a      	ldr	r2, [pc, #40]	; (8000820 <HAL_Init+0x40>)
 80007f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007fc:	4b08      	ldr	r3, [pc, #32]	; (8000820 <HAL_Init+0x40>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a07      	ldr	r2, [pc, #28]	; (8000820 <HAL_Init+0x40>)
 8000802:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000806:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000808:	2003      	movs	r0, #3
 800080a:	f000 f94f 	bl	8000aac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800080e:	200f      	movs	r0, #15
 8000810:	f000 f808 	bl	8000824 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000814:	f7ff ff44 	bl	80006a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000818:	2300      	movs	r3, #0
}
 800081a:	4618      	mov	r0, r3
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40023c00 	.word	0x40023c00

08000824 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800082c:	4b12      	ldr	r3, [pc, #72]	; (8000878 <HAL_InitTick+0x54>)
 800082e:	681a      	ldr	r2, [r3, #0]
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <HAL_InitTick+0x58>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	4619      	mov	r1, r3
 8000836:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800083a:	fbb3 f3f1 	udiv	r3, r3, r1
 800083e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000842:	4618      	mov	r0, r3
 8000844:	f000 f967 	bl	8000b16 <HAL_SYSTICK_Config>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800084e:	2301      	movs	r3, #1
 8000850:	e00e      	b.n	8000870 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2b0f      	cmp	r3, #15
 8000856:	d80a      	bhi.n	800086e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000858:	2200      	movs	r2, #0
 800085a:	6879      	ldr	r1, [r7, #4]
 800085c:	f04f 30ff 	mov.w	r0, #4294967295
 8000860:	f000 f92f 	bl	8000ac2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000864:	4a06      	ldr	r2, [pc, #24]	; (8000880 <HAL_InitTick+0x5c>)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800086a:	2300      	movs	r3, #0
 800086c:	e000      	b.n	8000870 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800086e:	2301      	movs	r3, #1
}
 8000870:	4618      	mov	r0, r3
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20000000 	.word	0x20000000
 800087c:	20000008 	.word	0x20000008
 8000880:	20000004 	.word	0x20000004

08000884 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <HAL_IncTick+0x20>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	461a      	mov	r2, r3
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <HAL_IncTick+0x24>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4413      	add	r3, r2
 8000894:	4a04      	ldr	r2, [pc, #16]	; (80008a8 <HAL_IncTick+0x24>)
 8000896:	6013      	str	r3, [r2, #0]
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	20000008 	.word	0x20000008
 80008a8:	20000194 	.word	0x20000194

080008ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  return uwTick;
 80008b0:	4b03      	ldr	r3, [pc, #12]	; (80008c0 <HAL_GetTick+0x14>)
 80008b2:	681b      	ldr	r3, [r3, #0]
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	20000194 	.word	0x20000194

080008c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008cc:	f7ff ffee 	bl	80008ac <HAL_GetTick>
 80008d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008dc:	d005      	beq.n	80008ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008de:	4b0a      	ldr	r3, [pc, #40]	; (8000908 <HAL_Delay+0x44>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	461a      	mov	r2, r3
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	4413      	add	r3, r2
 80008e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80008ea:	bf00      	nop
 80008ec:	f7ff ffde 	bl	80008ac <HAL_GetTick>
 80008f0:	4602      	mov	r2, r0
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	1ad3      	subs	r3, r2, r3
 80008f6:	68fa      	ldr	r2, [r7, #12]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d8f7      	bhi.n	80008ec <HAL_Delay+0x28>
  {
  }
}
 80008fc:	bf00      	nop
 80008fe:	bf00      	nop
 8000900:	3710      	adds	r7, #16
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000008 	.word	0x20000008

0800090c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800090c:	b480      	push	{r7}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	f003 0307 	and.w	r3, r3, #7
 800091a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <__NVIC_SetPriorityGrouping+0x44>)
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000922:	68ba      	ldr	r2, [r7, #8]
 8000924:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000928:	4013      	ands	r3, r2
 800092a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000934:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800093c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800093e:	4a04      	ldr	r2, [pc, #16]	; (8000950 <__NVIC_SetPriorityGrouping+0x44>)
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	60d3      	str	r3, [r2, #12]
}
 8000944:	bf00      	nop
 8000946:	3714      	adds	r7, #20
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000958:	4b04      	ldr	r3, [pc, #16]	; (800096c <__NVIC_GetPriorityGrouping+0x18>)
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	0a1b      	lsrs	r3, r3, #8
 800095e:	f003 0307 	and.w	r3, r3, #7
}
 8000962:	4618      	mov	r0, r3
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	e000ed00 	.word	0xe000ed00

08000970 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800097a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097e:	2b00      	cmp	r3, #0
 8000980:	db0b      	blt.n	800099a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	f003 021f 	and.w	r2, r3, #31
 8000988:	4907      	ldr	r1, [pc, #28]	; (80009a8 <__NVIC_EnableIRQ+0x38>)
 800098a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098e:	095b      	lsrs	r3, r3, #5
 8000990:	2001      	movs	r0, #1
 8000992:	fa00 f202 	lsl.w	r2, r0, r2
 8000996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800099a:	bf00      	nop
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	e000e100 	.word	0xe000e100

080009ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	6039      	str	r1, [r7, #0]
 80009b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	db0a      	blt.n	80009d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	b2da      	uxtb	r2, r3
 80009c4:	490c      	ldr	r1, [pc, #48]	; (80009f8 <__NVIC_SetPriority+0x4c>)
 80009c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ca:	0112      	lsls	r2, r2, #4
 80009cc:	b2d2      	uxtb	r2, r2
 80009ce:	440b      	add	r3, r1
 80009d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009d4:	e00a      	b.n	80009ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	b2da      	uxtb	r2, r3
 80009da:	4908      	ldr	r1, [pc, #32]	; (80009fc <__NVIC_SetPriority+0x50>)
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	f003 030f 	and.w	r3, r3, #15
 80009e2:	3b04      	subs	r3, #4
 80009e4:	0112      	lsls	r2, r2, #4
 80009e6:	b2d2      	uxtb	r2, r2
 80009e8:	440b      	add	r3, r1
 80009ea:	761a      	strb	r2, [r3, #24]
}
 80009ec:	bf00      	nop
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	e000e100 	.word	0xe000e100
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b089      	sub	sp, #36	; 0x24
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	f003 0307 	and.w	r3, r3, #7
 8000a12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a14:	69fb      	ldr	r3, [r7, #28]
 8000a16:	f1c3 0307 	rsb	r3, r3, #7
 8000a1a:	2b04      	cmp	r3, #4
 8000a1c:	bf28      	it	cs
 8000a1e:	2304      	movcs	r3, #4
 8000a20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a22:	69fb      	ldr	r3, [r7, #28]
 8000a24:	3304      	adds	r3, #4
 8000a26:	2b06      	cmp	r3, #6
 8000a28:	d902      	bls.n	8000a30 <NVIC_EncodePriority+0x30>
 8000a2a:	69fb      	ldr	r3, [r7, #28]
 8000a2c:	3b03      	subs	r3, #3
 8000a2e:	e000      	b.n	8000a32 <NVIC_EncodePriority+0x32>
 8000a30:	2300      	movs	r3, #0
 8000a32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a34:	f04f 32ff 	mov.w	r2, #4294967295
 8000a38:	69bb      	ldr	r3, [r7, #24]
 8000a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3e:	43da      	mvns	r2, r3
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	401a      	ands	r2, r3
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a48:	f04f 31ff 	mov.w	r1, #4294967295
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a52:	43d9      	mvns	r1, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a58:	4313      	orrs	r3, r2
         );
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3724      	adds	r7, #36	; 0x24
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
	...

08000a68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	3b01      	subs	r3, #1
 8000a74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a78:	d301      	bcc.n	8000a7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e00f      	b.n	8000a9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a7e:	4a0a      	ldr	r2, [pc, #40]	; (8000aa8 <SysTick_Config+0x40>)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	3b01      	subs	r3, #1
 8000a84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a86:	210f      	movs	r1, #15
 8000a88:	f04f 30ff 	mov.w	r0, #4294967295
 8000a8c:	f7ff ff8e 	bl	80009ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a90:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <SysTick_Config+0x40>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a96:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <SysTick_Config+0x40>)
 8000a98:	2207      	movs	r2, #7
 8000a9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a9c:	2300      	movs	r3, #0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	e000e010 	.word	0xe000e010

08000aac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f7ff ff29 	bl	800090c <__NVIC_SetPriorityGrouping>
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b086      	sub	sp, #24
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	4603      	mov	r3, r0
 8000aca:	60b9      	str	r1, [r7, #8]
 8000acc:	607a      	str	r2, [r7, #4]
 8000ace:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ad4:	f7ff ff3e 	bl	8000954 <__NVIC_GetPriorityGrouping>
 8000ad8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ada:	687a      	ldr	r2, [r7, #4]
 8000adc:	68b9      	ldr	r1, [r7, #8]
 8000ade:	6978      	ldr	r0, [r7, #20]
 8000ae0:	f7ff ff8e 	bl	8000a00 <NVIC_EncodePriority>
 8000ae4:	4602      	mov	r2, r0
 8000ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aea:	4611      	mov	r1, r2
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff ff5d 	bl	80009ac <__NVIC_SetPriority>
}
 8000af2:	bf00      	nop
 8000af4:	3718      	adds	r7, #24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b082      	sub	sp, #8
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	4603      	mov	r3, r0
 8000b02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff ff31 	bl	8000970 <__NVIC_EnableIRQ>
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b082      	sub	sp, #8
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f7ff ffa2 	bl	8000a68 <SysTick_Config>
 8000b24:	4603      	mov	r3, r0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b089      	sub	sp, #36	; 0x24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b46:	2300      	movs	r3, #0
 8000b48:	61fb      	str	r3, [r7, #28]
 8000b4a:	e16b      	b.n	8000e24 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	fa02 f303 	lsl.w	r3, r2, r3
 8000b54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	697a      	ldr	r2, [r7, #20]
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b60:	693a      	ldr	r2, [r7, #16]
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	f040 815a 	bne.w	8000e1e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f003 0303 	and.w	r3, r3, #3
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d005      	beq.n	8000b82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b7e:	2b02      	cmp	r3, #2
 8000b80:	d130      	bne.n	8000be4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b88:	69fb      	ldr	r3, [r7, #28]
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	2203      	movs	r2, #3
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	43db      	mvns	r3, r3
 8000b94:	69ba      	ldr	r2, [r7, #24]
 8000b96:	4013      	ands	r3, r2
 8000b98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	68da      	ldr	r2, [r3, #12]
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	69ba      	ldr	r2, [r7, #24]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	69ba      	ldr	r2, [r7, #24]
 8000bb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bb8:	2201      	movs	r2, #1
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	43db      	mvns	r3, r3
 8000bc2:	69ba      	ldr	r2, [r7, #24]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	091b      	lsrs	r3, r3, #4
 8000bce:	f003 0201 	and.w	r2, r3, #1
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd8:	69ba      	ldr	r2, [r7, #24]
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	69ba      	ldr	r2, [r7, #24]
 8000be2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f003 0303 	and.w	r3, r3, #3
 8000bec:	2b03      	cmp	r3, #3
 8000bee:	d017      	beq.n	8000c20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	2203      	movs	r2, #3
 8000bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000c00:	43db      	mvns	r3, r3
 8000c02:	69ba      	ldr	r2, [r7, #24]
 8000c04:	4013      	ands	r3, r2
 8000c06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	689a      	ldr	r2, [r3, #8]
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	fa02 f303 	lsl.w	r3, r2, r3
 8000c14:	69ba      	ldr	r2, [r7, #24]
 8000c16:	4313      	orrs	r3, r2
 8000c18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	69ba      	ldr	r2, [r7, #24]
 8000c1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f003 0303 	and.w	r3, r3, #3
 8000c28:	2b02      	cmp	r3, #2
 8000c2a:	d123      	bne.n	8000c74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	08da      	lsrs	r2, r3, #3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3208      	adds	r2, #8
 8000c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	f003 0307 	and.w	r3, r3, #7
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	220f      	movs	r2, #15
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	69ba      	ldr	r2, [r7, #24]
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	691a      	ldr	r2, [r3, #16]
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	69ba      	ldr	r2, [r7, #24]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	08da      	lsrs	r2, r3, #3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	3208      	adds	r2, #8
 8000c6e:	69b9      	ldr	r1, [r7, #24]
 8000c70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	2203      	movs	r2, #3
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	43db      	mvns	r3, r3
 8000c86:	69ba      	ldr	r2, [r7, #24]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f003 0203 	and.w	r2, r3, #3
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	69ba      	ldr	r2, [r7, #24]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	69ba      	ldr	r2, [r7, #24]
 8000ca6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	f000 80b4 	beq.w	8000e1e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	4b60      	ldr	r3, [pc, #384]	; (8000e3c <HAL_GPIO_Init+0x30c>)
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbe:	4a5f      	ldr	r2, [pc, #380]	; (8000e3c <HAL_GPIO_Init+0x30c>)
 8000cc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cc6:	4b5d      	ldr	r3, [pc, #372]	; (8000e3c <HAL_GPIO_Init+0x30c>)
 8000cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cd2:	4a5b      	ldr	r2, [pc, #364]	; (8000e40 <HAL_GPIO_Init+0x310>)
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	089b      	lsrs	r3, r3, #2
 8000cd8:	3302      	adds	r3, #2
 8000cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	f003 0303 	and.w	r3, r3, #3
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	220f      	movs	r2, #15
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	43db      	mvns	r3, r3
 8000cf0:	69ba      	ldr	r2, [r7, #24]
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4a52      	ldr	r2, [pc, #328]	; (8000e44 <HAL_GPIO_Init+0x314>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d02b      	beq.n	8000d56 <HAL_GPIO_Init+0x226>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a51      	ldr	r2, [pc, #324]	; (8000e48 <HAL_GPIO_Init+0x318>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d025      	beq.n	8000d52 <HAL_GPIO_Init+0x222>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a50      	ldr	r2, [pc, #320]	; (8000e4c <HAL_GPIO_Init+0x31c>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d01f      	beq.n	8000d4e <HAL_GPIO_Init+0x21e>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a4f      	ldr	r2, [pc, #316]	; (8000e50 <HAL_GPIO_Init+0x320>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d019      	beq.n	8000d4a <HAL_GPIO_Init+0x21a>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4a4e      	ldr	r2, [pc, #312]	; (8000e54 <HAL_GPIO_Init+0x324>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d013      	beq.n	8000d46 <HAL_GPIO_Init+0x216>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4a4d      	ldr	r2, [pc, #308]	; (8000e58 <HAL_GPIO_Init+0x328>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d00d      	beq.n	8000d42 <HAL_GPIO_Init+0x212>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a4c      	ldr	r2, [pc, #304]	; (8000e5c <HAL_GPIO_Init+0x32c>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d007      	beq.n	8000d3e <HAL_GPIO_Init+0x20e>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a4b      	ldr	r2, [pc, #300]	; (8000e60 <HAL_GPIO_Init+0x330>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d101      	bne.n	8000d3a <HAL_GPIO_Init+0x20a>
 8000d36:	2307      	movs	r3, #7
 8000d38:	e00e      	b.n	8000d58 <HAL_GPIO_Init+0x228>
 8000d3a:	2308      	movs	r3, #8
 8000d3c:	e00c      	b.n	8000d58 <HAL_GPIO_Init+0x228>
 8000d3e:	2306      	movs	r3, #6
 8000d40:	e00a      	b.n	8000d58 <HAL_GPIO_Init+0x228>
 8000d42:	2305      	movs	r3, #5
 8000d44:	e008      	b.n	8000d58 <HAL_GPIO_Init+0x228>
 8000d46:	2304      	movs	r3, #4
 8000d48:	e006      	b.n	8000d58 <HAL_GPIO_Init+0x228>
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	e004      	b.n	8000d58 <HAL_GPIO_Init+0x228>
 8000d4e:	2302      	movs	r3, #2
 8000d50:	e002      	b.n	8000d58 <HAL_GPIO_Init+0x228>
 8000d52:	2301      	movs	r3, #1
 8000d54:	e000      	b.n	8000d58 <HAL_GPIO_Init+0x228>
 8000d56:	2300      	movs	r3, #0
 8000d58:	69fa      	ldr	r2, [r7, #28]
 8000d5a:	f002 0203 	and.w	r2, r2, #3
 8000d5e:	0092      	lsls	r2, r2, #2
 8000d60:	4093      	lsls	r3, r2
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d68:	4935      	ldr	r1, [pc, #212]	; (8000e40 <HAL_GPIO_Init+0x310>)
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	089b      	lsrs	r3, r3, #2
 8000d6e:	3302      	adds	r3, #2
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d76:	4b3b      	ldr	r3, [pc, #236]	; (8000e64 <HAL_GPIO_Init+0x334>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	4013      	ands	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d003      	beq.n	8000d9a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d9a:	4a32      	ldr	r2, [pc, #200]	; (8000e64 <HAL_GPIO_Init+0x334>)
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000da0:	4b30      	ldr	r3, [pc, #192]	; (8000e64 <HAL_GPIO_Init+0x334>)
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	43db      	mvns	r3, r3
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	4013      	ands	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d003      	beq.n	8000dc4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000dc4:	4a27      	ldr	r2, [pc, #156]	; (8000e64 <HAL_GPIO_Init+0x334>)
 8000dc6:	69bb      	ldr	r3, [r7, #24]
 8000dc8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dca:	4b26      	ldr	r3, [pc, #152]	; (8000e64 <HAL_GPIO_Init+0x334>)
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d003      	beq.n	8000dee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000de6:	69ba      	ldr	r2, [r7, #24]
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000dee:	4a1d      	ldr	r2, [pc, #116]	; (8000e64 <HAL_GPIO_Init+0x334>)
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000df4:	4b1b      	ldr	r3, [pc, #108]	; (8000e64 <HAL_GPIO_Init+0x334>)
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	4013      	ands	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d003      	beq.n	8000e18 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e18:	4a12      	ldr	r2, [pc, #72]	; (8000e64 <HAL_GPIO_Init+0x334>)
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	3301      	adds	r3, #1
 8000e22:	61fb      	str	r3, [r7, #28]
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	2b0f      	cmp	r3, #15
 8000e28:	f67f ae90 	bls.w	8000b4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e2c:	bf00      	nop
 8000e2e:	bf00      	nop
 8000e30:	3724      	adds	r7, #36	; 0x24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40013800 	.word	0x40013800
 8000e44:	40020000 	.word	0x40020000
 8000e48:	40020400 	.word	0x40020400
 8000e4c:	40020800 	.word	0x40020800
 8000e50:	40020c00 	.word	0x40020c00
 8000e54:	40021000 	.word	0x40021000
 8000e58:	40021400 	.word	0x40021400
 8000e5c:	40021800 	.word	0x40021800
 8000e60:	40021c00 	.word	0x40021c00
 8000e64:	40013c00 	.word	0x40013c00

08000e68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000e72:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e74:	695a      	ldr	r2, [r3, #20]
 8000e76:	88fb      	ldrh	r3, [r7, #6]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d006      	beq.n	8000e8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e7e:	4a05      	ldr	r2, [pc, #20]	; (8000e94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e80:	88fb      	ldrh	r3, [r7, #6]
 8000e82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e84:	88fb      	ldrh	r3, [r7, #6]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff fbf4 	bl	8000674 <HAL_GPIO_EXTI_Callback>
  }
}
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40013c00 	.word	0x40013c00

08000e98 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e9a:	b08f      	sub	sp, #60	; 0x3c
 8000e9c:	af0a      	add	r7, sp, #40	; 0x28
 8000e9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d101      	bne.n	8000eaa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e10f      	b.n	80010ca <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d106      	bne.n	8000eca <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f004 fd71 	bl	80059ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2203      	movs	r2, #3
 8000ece:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d102      	bne.n	8000ee4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f001 fea2 	bl	8002c32 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	603b      	str	r3, [r7, #0]
 8000ef4:	687e      	ldr	r6, [r7, #4]
 8000ef6:	466d      	mov	r5, sp
 8000ef8:	f106 0410 	add.w	r4, r6, #16
 8000efc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000efe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f04:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f08:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f0c:	1d33      	adds	r3, r6, #4
 8000f0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f10:	6838      	ldr	r0, [r7, #0]
 8000f12:	f001 fd79 	bl	8002a08 <USB_CoreInit>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d005      	beq.n	8000f28 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2202      	movs	r2, #2
 8000f20:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	e0d0      	b.n	80010ca <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f001 fe90 	bl	8002c54 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f34:	2300      	movs	r3, #0
 8000f36:	73fb      	strb	r3, [r7, #15]
 8000f38:	e04a      	b.n	8000fd0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f3a:	7bfa      	ldrb	r2, [r7, #15]
 8000f3c:	6879      	ldr	r1, [r7, #4]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	00db      	lsls	r3, r3, #3
 8000f42:	1a9b      	subs	r3, r3, r2
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	440b      	add	r3, r1
 8000f48:	333d      	adds	r3, #61	; 0x3d
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f4e:	7bfa      	ldrb	r2, [r7, #15]
 8000f50:	6879      	ldr	r1, [r7, #4]
 8000f52:	4613      	mov	r3, r2
 8000f54:	00db      	lsls	r3, r3, #3
 8000f56:	1a9b      	subs	r3, r3, r2
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	440b      	add	r3, r1
 8000f5c:	333c      	adds	r3, #60	; 0x3c
 8000f5e:	7bfa      	ldrb	r2, [r7, #15]
 8000f60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000f62:	7bfa      	ldrb	r2, [r7, #15]
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
 8000f66:	b298      	uxth	r0, r3
 8000f68:	6879      	ldr	r1, [r7, #4]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	00db      	lsls	r3, r3, #3
 8000f6e:	1a9b      	subs	r3, r3, r2
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	440b      	add	r3, r1
 8000f74:	3342      	adds	r3, #66	; 0x42
 8000f76:	4602      	mov	r2, r0
 8000f78:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f7a:	7bfa      	ldrb	r2, [r7, #15]
 8000f7c:	6879      	ldr	r1, [r7, #4]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	00db      	lsls	r3, r3, #3
 8000f82:	1a9b      	subs	r3, r3, r2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	440b      	add	r3, r1
 8000f88:	333f      	adds	r3, #63	; 0x3f
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f8e:	7bfa      	ldrb	r2, [r7, #15]
 8000f90:	6879      	ldr	r1, [r7, #4]
 8000f92:	4613      	mov	r3, r2
 8000f94:	00db      	lsls	r3, r3, #3
 8000f96:	1a9b      	subs	r3, r3, r2
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	440b      	add	r3, r1
 8000f9c:	3344      	adds	r3, #68	; 0x44
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000fa2:	7bfa      	ldrb	r2, [r7, #15]
 8000fa4:	6879      	ldr	r1, [r7, #4]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	00db      	lsls	r3, r3, #3
 8000faa:	1a9b      	subs	r3, r3, r2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	440b      	add	r3, r1
 8000fb0:	3348      	adds	r3, #72	; 0x48
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000fb6:	7bfa      	ldrb	r2, [r7, #15]
 8000fb8:	6879      	ldr	r1, [r7, #4]
 8000fba:	4613      	mov	r3, r2
 8000fbc:	00db      	lsls	r3, r3, #3
 8000fbe:	1a9b      	subs	r3, r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	440b      	add	r3, r1
 8000fc4:	3350      	adds	r3, #80	; 0x50
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fca:	7bfb      	ldrb	r3, [r7, #15]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	73fb      	strb	r3, [r7, #15]
 8000fd0:	7bfa      	ldrb	r2, [r7, #15]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d3af      	bcc.n	8000f3a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fda:	2300      	movs	r3, #0
 8000fdc:	73fb      	strb	r3, [r7, #15]
 8000fde:	e044      	b.n	800106a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000fe0:	7bfa      	ldrb	r2, [r7, #15]
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	1a9b      	subs	r3, r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	440b      	add	r3, r1
 8000fee:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000ff6:	7bfa      	ldrb	r2, [r7, #15]
 8000ff8:	6879      	ldr	r1, [r7, #4]
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	00db      	lsls	r3, r3, #3
 8000ffe:	1a9b      	subs	r3, r3, r2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	440b      	add	r3, r1
 8001004:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001008:	7bfa      	ldrb	r2, [r7, #15]
 800100a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800100c:	7bfa      	ldrb	r2, [r7, #15]
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	4613      	mov	r3, r2
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	1a9b      	subs	r3, r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	440b      	add	r3, r1
 800101a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800101e:	2200      	movs	r2, #0
 8001020:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001022:	7bfa      	ldrb	r2, [r7, #15]
 8001024:	6879      	ldr	r1, [r7, #4]
 8001026:	4613      	mov	r3, r2
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	1a9b      	subs	r3, r3, r2
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	440b      	add	r3, r1
 8001030:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001038:	7bfa      	ldrb	r2, [r7, #15]
 800103a:	6879      	ldr	r1, [r7, #4]
 800103c:	4613      	mov	r3, r2
 800103e:	00db      	lsls	r3, r3, #3
 8001040:	1a9b      	subs	r3, r3, r2
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	440b      	add	r3, r1
 8001046:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800104e:	7bfa      	ldrb	r2, [r7, #15]
 8001050:	6879      	ldr	r1, [r7, #4]
 8001052:	4613      	mov	r3, r2
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	1a9b      	subs	r3, r3, r2
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	440b      	add	r3, r1
 800105c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001064:	7bfb      	ldrb	r3, [r7, #15]
 8001066:	3301      	adds	r3, #1
 8001068:	73fb      	strb	r3, [r7, #15]
 800106a:	7bfa      	ldrb	r2, [r7, #15]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	429a      	cmp	r2, r3
 8001072:	d3b5      	bcc.n	8000fe0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	603b      	str	r3, [r7, #0]
 800107a:	687e      	ldr	r6, [r7, #4]
 800107c:	466d      	mov	r5, sp
 800107e:	f106 0410 	add.w	r4, r6, #16
 8001082:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001084:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001086:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001088:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800108a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800108e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001092:	1d33      	adds	r3, r6, #4
 8001094:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001096:	6838      	ldr	r0, [r7, #0]
 8001098:	f001 fe28 	bl	8002cec <USB_DevInit>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d005      	beq.n	80010ae <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2202      	movs	r2, #2
 80010a6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e00d      	b.n	80010ca <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2201      	movs	r2, #1
 80010ba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f002 fea4 	bl	8003e10 <USB_DevDisconnect>

  return HAL_OK;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3714      	adds	r7, #20
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010d2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b084      	sub	sp, #16
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d101      	bne.n	80010ee <HAL_PCD_Start+0x1c>
 80010ea:	2302      	movs	r3, #2
 80010ec:	e020      	b.n	8001130 <HAL_PCD_Start+0x5e>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2201      	movs	r2, #1
 80010f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d109      	bne.n	8001112 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001102:	2b01      	cmp	r3, #1
 8001104:	d005      	beq.n	8001112 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800110a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4618      	mov	r0, r3
 8001118:	f001 fd7a 	bl	8002c10 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4618      	mov	r0, r3
 8001122:	f002 fe54 	bl	8003dce <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2200      	movs	r2, #0
 800112a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800112e:	2300      	movs	r3, #0
}
 8001130:	4618      	mov	r0, r3
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001138:	b590      	push	{r4, r7, lr}
 800113a:	b08d      	sub	sp, #52	; 0x34
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001146:	6a3b      	ldr	r3, [r7, #32]
 8001148:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4618      	mov	r0, r3
 8001150:	f002 ff12 	bl	8003f78 <USB_GetMode>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	f040 839d 	bne.w	8001896 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4618      	mov	r0, r3
 8001162:	f002 fe76 	bl	8003e52 <USB_ReadInterrupts>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	f000 8393 	beq.w	8001894 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4618      	mov	r0, r3
 8001174:	f002 fe6d 	bl	8003e52 <USB_ReadInterrupts>
 8001178:	4603      	mov	r3, r0
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	2b02      	cmp	r3, #2
 8001180:	d107      	bne.n	8001192 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	695a      	ldr	r2, [r3, #20]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f002 0202 	and.w	r2, r2, #2
 8001190:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4618      	mov	r0, r3
 8001198:	f002 fe5b 	bl	8003e52 <USB_ReadInterrupts>
 800119c:	4603      	mov	r3, r0
 800119e:	f003 0310 	and.w	r3, r3, #16
 80011a2:	2b10      	cmp	r3, #16
 80011a4:	d161      	bne.n	800126a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	699a      	ldr	r2, [r3, #24]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f022 0210 	bic.w	r2, r2, #16
 80011b4:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80011b6:	6a3b      	ldr	r3, [r7, #32]
 80011b8:	6a1b      	ldr	r3, [r3, #32]
 80011ba:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	f003 020f 	and.w	r2, r3, #15
 80011c2:	4613      	mov	r3, r2
 80011c4:	00db      	lsls	r3, r3, #3
 80011c6:	1a9b      	subs	r3, r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	4413      	add	r3, r2
 80011d2:	3304      	adds	r3, #4
 80011d4:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	0c5b      	lsrs	r3, r3, #17
 80011da:	f003 030f 	and.w	r3, r3, #15
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d124      	bne.n	800122c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80011e8:	4013      	ands	r3, r2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d035      	beq.n	800125a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	091b      	lsrs	r3, r3, #4
 80011f6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	461a      	mov	r2, r3
 8001200:	6a38      	ldr	r0, [r7, #32]
 8001202:	f002 fc92 	bl	8003b2a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	68da      	ldr	r2, [r3, #12]
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	091b      	lsrs	r3, r3, #4
 800120e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001212:	441a      	add	r2, r3
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	699a      	ldr	r2, [r3, #24]
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	091b      	lsrs	r3, r3, #4
 8001220:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001224:	441a      	add	r2, r3
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	619a      	str	r2, [r3, #24]
 800122a:	e016      	b.n	800125a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	0c5b      	lsrs	r3, r3, #17
 8001230:	f003 030f 	and.w	r3, r3, #15
 8001234:	2b06      	cmp	r3, #6
 8001236:	d110      	bne.n	800125a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800123e:	2208      	movs	r2, #8
 8001240:	4619      	mov	r1, r3
 8001242:	6a38      	ldr	r0, [r7, #32]
 8001244:	f002 fc71 	bl	8003b2a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	699a      	ldr	r2, [r3, #24]
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	091b      	lsrs	r3, r3, #4
 8001250:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001254:	441a      	add	r2, r3
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	699a      	ldr	r2, [r3, #24]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f042 0210 	orr.w	r2, r2, #16
 8001268:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f002 fdef 	bl	8003e52 <USB_ReadInterrupts>
 8001274:	4603      	mov	r3, r0
 8001276:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800127a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800127e:	d16e      	bne.n	800135e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001280:	2300      	movs	r3, #0
 8001282:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4618      	mov	r0, r3
 800128a:	f002 fdf5 	bl	8003e78 <USB_ReadDevAllOutEpInterrupt>
 800128e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001290:	e062      	b.n	8001358 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	2b00      	cmp	r3, #0
 800129a:	d057      	beq.n	800134c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012a2:	b2d2      	uxtb	r2, r2
 80012a4:	4611      	mov	r1, r2
 80012a6:	4618      	mov	r0, r3
 80012a8:	f002 fe1a 	bl	8003ee0 <USB_ReadDevOutEPInterrupt>
 80012ac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d00c      	beq.n	80012d2 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80012b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ba:	015a      	lsls	r2, r3, #5
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	4413      	add	r3, r2
 80012c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012c4:	461a      	mov	r2, r3
 80012c6:	2301      	movs	r3, #1
 80012c8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80012ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f000 fd99 	bl	8001e04 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	f003 0308 	and.w	r3, r3, #8
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d00c      	beq.n	80012f6 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80012dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012de:	015a      	lsls	r2, r3, #5
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	4413      	add	r3, r2
 80012e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012e8:	461a      	mov	r2, r3
 80012ea:	2308      	movs	r3, #8
 80012ec:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80012ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f000 fe93 	bl	800201c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	f003 0310 	and.w	r3, r3, #16
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d008      	beq.n	8001312 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001302:	015a      	lsls	r2, r3, #5
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	4413      	add	r3, r2
 8001308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800130c:	461a      	mov	r2, r3
 800130e:	2310      	movs	r3, #16
 8001310:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	f003 0320 	and.w	r3, r3, #32
 8001318:	2b00      	cmp	r3, #0
 800131a:	d008      	beq.n	800132e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800131c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131e:	015a      	lsls	r2, r3, #5
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	4413      	add	r3, r2
 8001324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001328:	461a      	mov	r2, r3
 800132a:	2320      	movs	r3, #32
 800132c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d009      	beq.n	800134c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133a:	015a      	lsls	r2, r3, #5
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	4413      	add	r3, r2
 8001340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001344:	461a      	mov	r2, r3
 8001346:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800134a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800134c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134e:	3301      	adds	r3, #1
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001354:	085b      	lsrs	r3, r3, #1
 8001356:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800135a:	2b00      	cmp	r3, #0
 800135c:	d199      	bne.n	8001292 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f002 fd75 	bl	8003e52 <USB_ReadInterrupts>
 8001368:	4603      	mov	r3, r0
 800136a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800136e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001372:	f040 80c0 	bne.w	80014f6 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4618      	mov	r0, r3
 800137c:	f002 fd96 	bl	8003eac <USB_ReadDevAllInEpInterrupt>
 8001380:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001382:	2300      	movs	r3, #0
 8001384:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001386:	e0b2      	b.n	80014ee <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	2b00      	cmp	r3, #0
 8001390:	f000 80a7 	beq.w	80014e2 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800139a:	b2d2      	uxtb	r2, r2
 800139c:	4611      	mov	r1, r2
 800139e:	4618      	mov	r0, r3
 80013a0:	f002 fdbc 	bl	8003f1c <USB_ReadDevInEPInterrupt>
 80013a4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d057      	beq.n	8001460 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80013b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b2:	f003 030f 	and.w	r3, r3, #15
 80013b6:	2201      	movs	r2, #1
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	43db      	mvns	r3, r3
 80013ca:	69f9      	ldr	r1, [r7, #28]
 80013cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80013d0:	4013      	ands	r3, r2
 80013d2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80013d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d6:	015a      	lsls	r2, r3, #5
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	4413      	add	r3, r2
 80013dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013e0:	461a      	mov	r2, r3
 80013e2:	2301      	movs	r3, #1
 80013e4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	691b      	ldr	r3, [r3, #16]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d132      	bne.n	8001454 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80013ee:	6879      	ldr	r1, [r7, #4]
 80013f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013f2:	4613      	mov	r3, r2
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	1a9b      	subs	r3, r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	440b      	add	r3, r1
 80013fc:	3348      	adds	r3, #72	; 0x48
 80013fe:	6819      	ldr	r1, [r3, #0]
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001404:	4613      	mov	r3, r2
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	1a9b      	subs	r3, r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4403      	add	r3, r0
 800140e:	3344      	adds	r3, #68	; 0x44
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4419      	add	r1, r3
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001418:	4613      	mov	r3, r2
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	1a9b      	subs	r3, r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	4403      	add	r3, r0
 8001422:	3348      	adds	r3, #72	; 0x48
 8001424:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001428:	2b00      	cmp	r3, #0
 800142a:	d113      	bne.n	8001454 <HAL_PCD_IRQHandler+0x31c>
 800142c:	6879      	ldr	r1, [r7, #4]
 800142e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001430:	4613      	mov	r3, r2
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	1a9b      	subs	r3, r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	440b      	add	r3, r1
 800143a:	3350      	adds	r3, #80	; 0x50
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d108      	bne.n	8001454 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6818      	ldr	r0, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800144c:	461a      	mov	r2, r3
 800144e:	2101      	movs	r1, #1
 8001450:	f002 fdc4 	bl	8003fdc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001456:	b2db      	uxtb	r3, r3
 8001458:	4619      	mov	r1, r3
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f004 fb27 	bl	8005aae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	f003 0308 	and.w	r3, r3, #8
 8001466:	2b00      	cmp	r3, #0
 8001468:	d008      	beq.n	800147c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146c:	015a      	lsls	r2, r3, #5
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	4413      	add	r3, r2
 8001472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001476:	461a      	mov	r2, r3
 8001478:	2308      	movs	r3, #8
 800147a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	f003 0310 	and.w	r3, r3, #16
 8001482:	2b00      	cmp	r3, #0
 8001484:	d008      	beq.n	8001498 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001488:	015a      	lsls	r2, r3, #5
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	4413      	add	r3, r2
 800148e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001492:	461a      	mov	r2, r3
 8001494:	2310      	movs	r3, #16
 8001496:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d008      	beq.n	80014b4 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80014a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a4:	015a      	lsls	r2, r3, #5
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	4413      	add	r3, r2
 80014aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014ae:	461a      	mov	r2, r3
 80014b0:	2340      	movs	r3, #64	; 0x40
 80014b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d008      	beq.n	80014d0 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	015a      	lsls	r2, r3, #5
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	4413      	add	r3, r2
 80014c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014ca:	461a      	mov	r2, r3
 80014cc:	2302      	movs	r3, #2
 80014ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d003      	beq.n	80014e2 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80014da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f000 fc03 	bl	8001ce8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e4:	3301      	adds	r3, #1
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80014e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ea:	085b      	lsrs	r3, r3, #1
 80014ec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80014ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	f47f af49 	bne.w	8001388 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f002 fca9 	bl	8003e52 <USB_ReadInterrupts>
 8001500:	4603      	mov	r3, r0
 8001502:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001506:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800150a:	d122      	bne.n	8001552 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	69fa      	ldr	r2, [r7, #28]
 8001516:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800151a:	f023 0301 	bic.w	r3, r3, #1
 800151e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001526:	2b01      	cmp	r3, #1
 8001528:	d108      	bne.n	800153c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001532:	2100      	movs	r1, #0
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f000 fe0f 	bl	8002158 <HAL_PCDEx_LPM_Callback>
 800153a:	e002      	b.n	8001542 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f004 fb2d 	bl	8005b9c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	695a      	ldr	r2, [r3, #20]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001550:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f002 fc7b 	bl	8003e52 <USB_ReadInterrupts>
 800155c:	4603      	mov	r3, r0
 800155e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001562:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001566:	d112      	bne.n	800158e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	2b01      	cmp	r3, #1
 8001576:	d102      	bne.n	800157e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f004 fae9 	bl	8005b50 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	695a      	ldr	r2, [r3, #20]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800158c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f002 fc5d 	bl	8003e52 <USB_ReadInterrupts>
 8001598:	4603      	mov	r3, r0
 800159a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800159e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015a2:	f040 80c7 	bne.w	8001734 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	69fa      	ldr	r2, [r7, #28]
 80015b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015b4:	f023 0301 	bic.w	r3, r3, #1
 80015b8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2110      	movs	r1, #16
 80015c0:	4618      	mov	r0, r3
 80015c2:	f001 fcf7 	bl	8002fb4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015c6:	2300      	movs	r3, #0
 80015c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015ca:	e056      	b.n	800167a <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80015cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ce:	015a      	lsls	r2, r3, #5
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	4413      	add	r3, r2
 80015d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015d8:	461a      	mov	r2, r3
 80015da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80015de:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80015e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e2:	015a      	lsls	r2, r3, #5
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	4413      	add	r3, r2
 80015e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015f0:	0151      	lsls	r1, r2, #5
 80015f2:	69fa      	ldr	r2, [r7, #28]
 80015f4:	440a      	add	r2, r1
 80015f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80015fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80015fe:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001602:	015a      	lsls	r2, r3, #5
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	4413      	add	r3, r2
 8001608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001610:	0151      	lsls	r1, r2, #5
 8001612:	69fa      	ldr	r2, [r7, #28]
 8001614:	440a      	add	r2, r1
 8001616:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800161a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800161e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001622:	015a      	lsls	r2, r3, #5
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	4413      	add	r3, r2
 8001628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800162c:	461a      	mov	r2, r3
 800162e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001632:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001636:	015a      	lsls	r2, r3, #5
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	4413      	add	r3, r2
 800163c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001644:	0151      	lsls	r1, r2, #5
 8001646:	69fa      	ldr	r2, [r7, #28]
 8001648:	440a      	add	r2, r1
 800164a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800164e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001652:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001656:	015a      	lsls	r2, r3, #5
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	4413      	add	r3, r2
 800165c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001664:	0151      	lsls	r1, r2, #5
 8001666:	69fa      	ldr	r2, [r7, #28]
 8001668:	440a      	add	r2, r1
 800166a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800166e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001672:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001676:	3301      	adds	r3, #1
 8001678:	62fb      	str	r3, [r7, #44]	; 0x2c
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001680:	429a      	cmp	r2, r3
 8001682:	d3a3      	bcc.n	80015cc <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800168a:	69db      	ldr	r3, [r3, #28]
 800168c:	69fa      	ldr	r2, [r7, #28]
 800168e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001692:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001696:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169c:	2b00      	cmp	r3, #0
 800169e:	d016      	beq.n	80016ce <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016aa:	69fa      	ldr	r2, [r7, #28]
 80016ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016b0:	f043 030b 	orr.w	r3, r3, #11
 80016b4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c0:	69fa      	ldr	r2, [r7, #28]
 80016c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016c6:	f043 030b 	orr.w	r3, r3, #11
 80016ca:	6453      	str	r3, [r2, #68]	; 0x44
 80016cc:	e015      	b.n	80016fa <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	69fa      	ldr	r2, [r7, #28]
 80016d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016e0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80016e4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	69fa      	ldr	r2, [r7, #28]
 80016f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016f4:	f043 030b 	orr.w	r3, r3, #11
 80016f8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	69fa      	ldr	r2, [r7, #28]
 8001704:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001708:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800170c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6818      	ldr	r0, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800171e:	461a      	mov	r2, r3
 8001720:	f002 fc5c 	bl	8003fdc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	695a      	ldr	r2, [r3, #20]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001732:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f002 fb8a 	bl	8003e52 <USB_ReadInterrupts>
 800173e:	4603      	mov	r3, r0
 8001740:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001744:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001748:	d124      	bne.n	8001794 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f002 fc20 	bl	8003f94 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f001 fc88 	bl	800306e <USB_GetDevSpeed>
 800175e:	4603      	mov	r3, r0
 8001760:	461a      	mov	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681c      	ldr	r4, [r3, #0]
 800176a:	f001 f941 	bl	80029f0 <HAL_RCC_GetHCLKFreq>
 800176e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001774:	b2db      	uxtb	r3, r3
 8001776:	461a      	mov	r2, r3
 8001778:	4620      	mov	r0, r4
 800177a:	f001 f9a7 	bl	8002acc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f004 f9bd 	bl	8005afe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	695a      	ldr	r2, [r3, #20]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001792:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f002 fb5a 	bl	8003e52 <USB_ReadInterrupts>
 800179e:	4603      	mov	r3, r0
 80017a0:	f003 0308 	and.w	r3, r3, #8
 80017a4:	2b08      	cmp	r3, #8
 80017a6:	d10a      	bne.n	80017be <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f004 f99a 	bl	8005ae2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	695a      	ldr	r2, [r3, #20]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f002 0208 	and.w	r2, r2, #8
 80017bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f002 fb45 	bl	8003e52 <USB_ReadInterrupts>
 80017c8:	4603      	mov	r3, r0
 80017ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80017d2:	d10f      	bne.n	80017f4 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80017d4:	2300      	movs	r3, #0
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80017d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	4619      	mov	r1, r3
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f004 f9fc 	bl	8005bdc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	695a      	ldr	r2, [r3, #20]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80017f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f002 fb2a 	bl	8003e52 <USB_ReadInterrupts>
 80017fe:	4603      	mov	r3, r0
 8001800:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001804:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001808:	d10f      	bne.n	800182a <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800180a:	2300      	movs	r3, #0
 800180c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800180e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001810:	b2db      	uxtb	r3, r3
 8001812:	4619      	mov	r1, r3
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f004 f9cf 	bl	8005bb8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	695a      	ldr	r2, [r3, #20]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001828:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f002 fb0f 	bl	8003e52 <USB_ReadInterrupts>
 8001834:	4603      	mov	r3, r0
 8001836:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800183a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800183e:	d10a      	bne.n	8001856 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f004 f9dd 	bl	8005c00 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	695a      	ldr	r2, [r3, #20]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001854:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f002 faf9 	bl	8003e52 <USB_ReadInterrupts>
 8001860:	4603      	mov	r3, r0
 8001862:	f003 0304 	and.w	r3, r3, #4
 8001866:	2b04      	cmp	r3, #4
 8001868:	d115      	bne.n	8001896 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	2b00      	cmp	r3, #0
 800187a:	d002      	beq.n	8001882 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f004 f9cd 	bl	8005c1c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6859      	ldr	r1, [r3, #4]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	430a      	orrs	r2, r1
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	e000      	b.n	8001896 <HAL_PCD_IRQHandler+0x75e>
      return;
 8001894:	bf00      	nop
    }
  }
}
 8001896:	3734      	adds	r7, #52	; 0x34
 8001898:	46bd      	mov	sp, r7
 800189a:	bd90      	pop	{r4, r7, pc}

0800189c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	460b      	mov	r3, r1
 80018a6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d101      	bne.n	80018b6 <HAL_PCD_SetAddress+0x1a>
 80018b2:	2302      	movs	r3, #2
 80018b4:	e013      	b.n	80018de <HAL_PCD_SetAddress+0x42>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2201      	movs	r2, #1
 80018ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	78fa      	ldrb	r2, [r7, #3]
 80018c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	78fa      	ldrb	r2, [r7, #3]
 80018cc:	4611      	mov	r1, r2
 80018ce:	4618      	mov	r0, r3
 80018d0:	f002 fa57 	bl	8003d82 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b084      	sub	sp, #16
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
 80018ee:	4608      	mov	r0, r1
 80018f0:	4611      	mov	r1, r2
 80018f2:	461a      	mov	r2, r3
 80018f4:	4603      	mov	r3, r0
 80018f6:	70fb      	strb	r3, [r7, #3]
 80018f8:	460b      	mov	r3, r1
 80018fa:	803b      	strh	r3, [r7, #0]
 80018fc:	4613      	mov	r3, r2
 80018fe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001900:	2300      	movs	r3, #0
 8001902:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001904:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001908:	2b00      	cmp	r3, #0
 800190a:	da0f      	bge.n	800192c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800190c:	78fb      	ldrb	r3, [r7, #3]
 800190e:	f003 020f 	and.w	r2, r3, #15
 8001912:	4613      	mov	r3, r2
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	1a9b      	subs	r3, r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	3338      	adds	r3, #56	; 0x38
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	4413      	add	r3, r2
 8001920:	3304      	adds	r3, #4
 8001922:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2201      	movs	r2, #1
 8001928:	705a      	strb	r2, [r3, #1]
 800192a:	e00f      	b.n	800194c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800192c:	78fb      	ldrb	r3, [r7, #3]
 800192e:	f003 020f 	and.w	r2, r3, #15
 8001932:	4613      	mov	r3, r2
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	1a9b      	subs	r3, r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	4413      	add	r3, r2
 8001942:	3304      	adds	r3, #4
 8001944:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2200      	movs	r2, #0
 800194a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800194c:	78fb      	ldrb	r3, [r7, #3]
 800194e:	f003 030f 	and.w	r3, r3, #15
 8001952:	b2da      	uxtb	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001958:	883a      	ldrh	r2, [r7, #0]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	78ba      	ldrb	r2, [r7, #2]
 8001962:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	785b      	ldrb	r3, [r3, #1]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d004      	beq.n	8001976 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	b29a      	uxth	r2, r3
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001976:	78bb      	ldrb	r3, [r7, #2]
 8001978:	2b02      	cmp	r3, #2
 800197a:	d102      	bne.n	8001982 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2200      	movs	r2, #0
 8001980:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001988:	2b01      	cmp	r3, #1
 800198a:	d101      	bne.n	8001990 <HAL_PCD_EP_Open+0xaa>
 800198c:	2302      	movs	r3, #2
 800198e:	e00e      	b.n	80019ae <HAL_PCD_EP_Open+0xc8>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	68f9      	ldr	r1, [r7, #12]
 800199e:	4618      	mov	r0, r3
 80019a0:	f001 fb8a 	bl	80030b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80019ac:	7afb      	ldrb	r3, [r7, #11]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b084      	sub	sp, #16
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
 80019be:	460b      	mov	r3, r1
 80019c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80019c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	da0f      	bge.n	80019ea <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019ca:	78fb      	ldrb	r3, [r7, #3]
 80019cc:	f003 020f 	and.w	r2, r3, #15
 80019d0:	4613      	mov	r3, r2
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	1a9b      	subs	r3, r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	3338      	adds	r3, #56	; 0x38
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	4413      	add	r3, r2
 80019de:	3304      	adds	r3, #4
 80019e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2201      	movs	r2, #1
 80019e6:	705a      	strb	r2, [r3, #1]
 80019e8:	e00f      	b.n	8001a0a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019ea:	78fb      	ldrb	r3, [r7, #3]
 80019ec:	f003 020f 	and.w	r2, r3, #15
 80019f0:	4613      	mov	r3, r2
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	1a9b      	subs	r3, r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	4413      	add	r3, r2
 8001a00:	3304      	adds	r3, #4
 8001a02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2200      	movs	r2, #0
 8001a08:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001a0a:	78fb      	ldrb	r3, [r7, #3]
 8001a0c:	f003 030f 	and.w	r3, r3, #15
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d101      	bne.n	8001a24 <HAL_PCD_EP_Close+0x6e>
 8001a20:	2302      	movs	r3, #2
 8001a22:	e00e      	b.n	8001a42 <HAL_PCD_EP_Close+0x8c>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	68f9      	ldr	r1, [r7, #12]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f001 fbc8 	bl	80031c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b086      	sub	sp, #24
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	60f8      	str	r0, [r7, #12]
 8001a52:	607a      	str	r2, [r7, #4]
 8001a54:	603b      	str	r3, [r7, #0]
 8001a56:	460b      	mov	r3, r1
 8001a58:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a5a:	7afb      	ldrb	r3, [r7, #11]
 8001a5c:	f003 020f 	and.w	r2, r3, #15
 8001a60:	4613      	mov	r3, r2
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	1a9b      	subs	r3, r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a6c:	68fa      	ldr	r2, [r7, #12]
 8001a6e:	4413      	add	r3, r2
 8001a70:	3304      	adds	r3, #4
 8001a72:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	2200      	movs	r2, #0
 8001a84:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a8c:	7afb      	ldrb	r3, [r7, #11]
 8001a8e:	f003 030f 	and.w	r3, r3, #15
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d102      	bne.n	8001aa6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001aa6:	7afb      	ldrb	r3, [r7, #11]
 8001aa8:	f003 030f 	and.w	r3, r3, #15
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d109      	bne.n	8001ac4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6818      	ldr	r0, [r3, #0]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	461a      	mov	r2, r3
 8001abc:	6979      	ldr	r1, [r7, #20]
 8001abe:	f001 fea3 	bl	8003808 <USB_EP0StartXfer>
 8001ac2:	e008      	b.n	8001ad6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6818      	ldr	r0, [r3, #0]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	461a      	mov	r2, r3
 8001ad0:	6979      	ldr	r1, [r7, #20]
 8001ad2:	f001 fc55 	bl	8003380 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3718      	adds	r7, #24
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	607a      	str	r2, [r7, #4]
 8001aea:	603b      	str	r3, [r7, #0]
 8001aec:	460b      	mov	r3, r1
 8001aee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001af0:	7afb      	ldrb	r3, [r7, #11]
 8001af2:	f003 020f 	and.w	r2, r3, #15
 8001af6:	4613      	mov	r3, r2
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	1a9b      	subs	r3, r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	3338      	adds	r3, #56	; 0x38
 8001b00:	68fa      	ldr	r2, [r7, #12]
 8001b02:	4413      	add	r3, r2
 8001b04:	3304      	adds	r3, #4
 8001b06:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	2200      	movs	r2, #0
 8001b18:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b20:	7afb      	ldrb	r3, [r7, #11]
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d102      	bne.n	8001b3a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b3a:	7afb      	ldrb	r3, [r7, #11]
 8001b3c:	f003 030f 	and.w	r3, r3, #15
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d109      	bne.n	8001b58 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6818      	ldr	r0, [r3, #0]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	461a      	mov	r2, r3
 8001b50:	6979      	ldr	r1, [r7, #20]
 8001b52:	f001 fe59 	bl	8003808 <USB_EP0StartXfer>
 8001b56:	e008      	b.n	8001b6a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6818      	ldr	r0, [r3, #0]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	461a      	mov	r2, r3
 8001b64:	6979      	ldr	r1, [r7, #20]
 8001b66:	f001 fc0b 	bl	8003380 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3718      	adds	r7, #24
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001b80:	78fb      	ldrb	r3, [r7, #3]
 8001b82:	f003 020f 	and.w	r2, r3, #15
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d901      	bls.n	8001b92 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e050      	b.n	8001c34 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	da0f      	bge.n	8001bba <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b9a:	78fb      	ldrb	r3, [r7, #3]
 8001b9c:	f003 020f 	and.w	r2, r3, #15
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	1a9b      	subs	r3, r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	3338      	adds	r3, #56	; 0x38
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	3304      	adds	r3, #4
 8001bb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	705a      	strb	r2, [r3, #1]
 8001bb8:	e00d      	b.n	8001bd6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001bba:	78fa      	ldrb	r2, [r7, #3]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	1a9b      	subs	r3, r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	4413      	add	r3, r2
 8001bcc:	3304      	adds	r3, #4
 8001bce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bdc:	78fb      	ldrb	r3, [r7, #3]
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d101      	bne.n	8001bf6 <HAL_PCD_EP_SetStall+0x82>
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	e01e      	b.n	8001c34 <HAL_PCD_EP_SetStall+0xc0>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	68f9      	ldr	r1, [r7, #12]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f001 ffe8 	bl	8003bda <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c0a:	78fb      	ldrb	r3, [r7, #3]
 8001c0c:	f003 030f 	and.w	r3, r3, #15
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d10a      	bne.n	8001c2a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6818      	ldr	r0, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	b2d9      	uxtb	r1, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001c24:	461a      	mov	r2, r3
 8001c26:	f002 f9d9 	bl	8003fdc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	460b      	mov	r3, r1
 8001c46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001c48:	78fb      	ldrb	r3, [r7, #3]
 8001c4a:	f003 020f 	and.w	r2, r3, #15
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d901      	bls.n	8001c5a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e042      	b.n	8001ce0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	da0f      	bge.n	8001c82 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c62:	78fb      	ldrb	r3, [r7, #3]
 8001c64:	f003 020f 	and.w	r2, r3, #15
 8001c68:	4613      	mov	r3, r2
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	1a9b      	subs	r3, r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	3338      	adds	r3, #56	; 0x38
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	4413      	add	r3, r2
 8001c76:	3304      	adds	r3, #4
 8001c78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	705a      	strb	r2, [r3, #1]
 8001c80:	e00f      	b.n	8001ca2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c82:	78fb      	ldrb	r3, [r7, #3]
 8001c84:	f003 020f 	and.w	r2, r3, #15
 8001c88:	4613      	mov	r3, r2
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	1a9b      	subs	r3, r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	4413      	add	r3, r2
 8001c98:	3304      	adds	r3, #4
 8001c9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ca8:	78fb      	ldrb	r3, [r7, #3]
 8001caa:	f003 030f 	and.w	r3, r3, #15
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d101      	bne.n	8001cc2 <HAL_PCD_EP_ClrStall+0x86>
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	e00e      	b.n	8001ce0 <HAL_PCD_EP_ClrStall+0xa4>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68f9      	ldr	r1, [r7, #12]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f001 fff0 	bl	8003cb6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08a      	sub	sp, #40	; 0x28
 8001cec:	af02      	add	r7, sp, #8
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	00db      	lsls	r3, r3, #3
 8001d02:	1a9b      	subs	r3, r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	3338      	adds	r3, #56	; 0x38
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	3304      	adds	r3, #4
 8001d0e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	699a      	ldr	r2, [r3, #24]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	695b      	ldr	r3, [r3, #20]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d901      	bls.n	8001d20 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e06c      	b.n	8001dfa <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	695a      	ldr	r2, [r3, #20]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	69fa      	ldr	r2, [r7, #28]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d902      	bls.n	8001d3c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	3303      	adds	r3, #3
 8001d40:	089b      	lsrs	r3, r3, #2
 8001d42:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d44:	e02b      	b.n	8001d9e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	695a      	ldr	r2, [r3, #20]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	69fa      	ldr	r2, [r7, #28]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d902      	bls.n	8001d62 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	3303      	adds	r3, #3
 8001d66:	089b      	lsrs	r3, r3, #2
 8001d68:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	68d9      	ldr	r1, [r3, #12]
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	9300      	str	r3, [sp, #0]
 8001d7e:	4603      	mov	r3, r0
 8001d80:	6978      	ldr	r0, [r7, #20]
 8001d82:	f001 fe94 	bl	8003aae <USB_WritePacket>

    ep->xfer_buff  += len;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	68da      	ldr	r2, [r3, #12]
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	441a      	add	r2, r3
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	699a      	ldr	r2, [r3, #24]
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	441a      	add	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	015a      	lsls	r2, r3, #5
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	4413      	add	r3, r2
 8001da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d809      	bhi.n	8001dc8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	699a      	ldr	r2, [r3, #24]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d203      	bcs.n	8001dc8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	695b      	ldr	r3, [r3, #20]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1be      	bne.n	8001d46 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	695a      	ldr	r2, [r3, #20]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d811      	bhi.n	8001df8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	2201      	movs	r2, #1
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001de8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	43db      	mvns	r3, r3
 8001dee:	6939      	ldr	r1, [r7, #16]
 8001df0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001df4:	4013      	ands	r3, r2
 8001df6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3720      	adds	r7, #32
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
	...

08001e04 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	333c      	adds	r3, #60	; 0x3c
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	015a      	lsls	r2, r3, #5
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	4413      	add	r3, r2
 8001e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	f040 80a0 	bne.w	8001f7c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	f003 0308 	and.w	r3, r3, #8
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d015      	beq.n	8001e72 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	4a72      	ldr	r2, [pc, #456]	; (8002014 <PCD_EP_OutXfrComplete_int+0x210>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	f240 80dd 	bls.w	800200a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f000 80d7 	beq.w	800200a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	015a      	lsls	r2, r3, #5
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	4413      	add	r3, r2
 8001e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e68:	461a      	mov	r2, r3
 8001e6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e6e:	6093      	str	r3, [r2, #8]
 8001e70:	e0cb      	b.n	800200a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	f003 0320 	and.w	r3, r3, #32
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d009      	beq.n	8001e90 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	015a      	lsls	r2, r3, #5
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	4413      	add	r3, r2
 8001e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e88:	461a      	mov	r2, r3
 8001e8a:	2320      	movs	r3, #32
 8001e8c:	6093      	str	r3, [r2, #8]
 8001e8e:	e0bc      	b.n	800200a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f040 80b7 	bne.w	800200a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4a5d      	ldr	r2, [pc, #372]	; (8002014 <PCD_EP_OutXfrComplete_int+0x210>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d90f      	bls.n	8001ec4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00a      	beq.n	8001ec4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	015a      	lsls	r2, r3, #5
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001eba:	461a      	mov	r2, r3
 8001ebc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ec0:	6093      	str	r3, [r2, #8]
 8001ec2:	e0a2      	b.n	800200a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001ec4:	6879      	ldr	r1, [r7, #4]
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	1a9b      	subs	r3, r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001ed6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	0159      	lsls	r1, r3, #5
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	440b      	add	r3, r1
 8001ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001eea:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	1a9b      	subs	r3, r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	4403      	add	r3, r0
 8001efa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001efe:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001f00:	6879      	ldr	r1, [r7, #4]
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	4613      	mov	r3, r2
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	1a9b      	subs	r3, r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f12:	6819      	ldr	r1, [r3, #0]
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	1a9b      	subs	r3, r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4403      	add	r3, r0
 8001f22:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4419      	add	r1, r3
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	1a9b      	subs	r3, r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	4403      	add	r3, r0
 8001f38:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f3c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d114      	bne.n	8001f6e <PCD_EP_OutXfrComplete_int+0x16a>
 8001f44:	6879      	ldr	r1, [r7, #4]
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	1a9b      	subs	r3, r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	440b      	add	r3, r1
 8001f52:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d108      	bne.n	8001f6e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6818      	ldr	r0, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f66:	461a      	mov	r2, r3
 8001f68:	2101      	movs	r1, #1
 8001f6a:	f002 f837 	bl	8003fdc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	4619      	mov	r1, r3
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f003 fd7f 	bl	8005a78 <HAL_PCD_DataOutStageCallback>
 8001f7a:	e046      	b.n	800200a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4a26      	ldr	r2, [pc, #152]	; (8002018 <PCD_EP_OutXfrComplete_int+0x214>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d124      	bne.n	8001fce <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00a      	beq.n	8001fa4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	015a      	lsls	r2, r3, #5
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	4413      	add	r3, r2
 8001f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fa0:	6093      	str	r3, [r2, #8]
 8001fa2:	e032      	b.n	800200a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	f003 0320 	and.w	r3, r3, #32
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d008      	beq.n	8001fc0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	015a      	lsls	r2, r3, #5
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fba:	461a      	mov	r2, r3
 8001fbc:	2320      	movs	r3, #32
 8001fbe:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f003 fd56 	bl	8005a78 <HAL_PCD_DataOutStageCallback>
 8001fcc:	e01d      	b.n	800200a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d114      	bne.n	8001ffe <PCD_EP_OutXfrComplete_int+0x1fa>
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	1a9b      	subs	r3, r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d108      	bne.n	8001ffe <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6818      	ldr	r0, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	f001 ffef 	bl	8003fdc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	b2db      	uxtb	r3, r3
 8002002:	4619      	mov	r1, r3
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f003 fd37 	bl	8005a78 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3718      	adds	r7, #24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	4f54300a 	.word	0x4f54300a
 8002018:	4f54310a 	.word	0x4f54310a

0800201c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	333c      	adds	r3, #60	; 0x3c
 8002034:	3304      	adds	r3, #4
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	015a      	lsls	r2, r3, #5
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	4413      	add	r3, r2
 8002042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	4a15      	ldr	r2, [pc, #84]	; (80020a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d90e      	bls.n	8002070 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002058:	2b00      	cmp	r3, #0
 800205a:	d009      	beq.n	8002070 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	015a      	lsls	r2, r3, #5
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	4413      	add	r3, r2
 8002064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002068:	461a      	mov	r2, r3
 800206a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800206e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f003 fcef 	bl	8005a54 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	4a0a      	ldr	r2, [pc, #40]	; (80020a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d90c      	bls.n	8002098 <PCD_EP_OutSetupPacket_int+0x7c>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d108      	bne.n	8002098 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6818      	ldr	r0, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002090:	461a      	mov	r2, r3
 8002092:	2101      	movs	r1, #1
 8002094:	f001 ffa2 	bl	8003fdc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	4f54300a 	.word	0x4f54300a

080020a8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	460b      	mov	r3, r1
 80020b2:	70fb      	strb	r3, [r7, #3]
 80020b4:	4613      	mov	r3, r2
 80020b6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020be:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80020c0:	78fb      	ldrb	r3, [r7, #3]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d107      	bne.n	80020d6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80020c6:	883b      	ldrh	r3, [r7, #0]
 80020c8:	0419      	lsls	r1, r3, #16
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68ba      	ldr	r2, [r7, #8]
 80020d0:	430a      	orrs	r2, r1
 80020d2:	629a      	str	r2, [r3, #40]	; 0x28
 80020d4:	e028      	b.n	8002128 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020dc:	0c1b      	lsrs	r3, r3, #16
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	4413      	add	r3, r2
 80020e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80020e4:	2300      	movs	r3, #0
 80020e6:	73fb      	strb	r3, [r7, #15]
 80020e8:	e00d      	b.n	8002106 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	7bfb      	ldrb	r3, [r7, #15]
 80020f0:	3340      	adds	r3, #64	; 0x40
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	0c1b      	lsrs	r3, r3, #16
 80020fa:	68ba      	ldr	r2, [r7, #8]
 80020fc:	4413      	add	r3, r2
 80020fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002100:	7bfb      	ldrb	r3, [r7, #15]
 8002102:	3301      	adds	r3, #1
 8002104:	73fb      	strb	r3, [r7, #15]
 8002106:	7bfa      	ldrb	r2, [r7, #15]
 8002108:	78fb      	ldrb	r3, [r7, #3]
 800210a:	3b01      	subs	r3, #1
 800210c:	429a      	cmp	r2, r3
 800210e:	d3ec      	bcc.n	80020ea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002110:	883b      	ldrh	r3, [r7, #0]
 8002112:	0418      	lsls	r0, r3, #16
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6819      	ldr	r1, [r3, #0]
 8002118:	78fb      	ldrb	r3, [r7, #3]
 800211a:	3b01      	subs	r3, #1
 800211c:	68ba      	ldr	r2, [r7, #8]
 800211e:	4302      	orrs	r2, r0
 8002120:	3340      	adds	r3, #64	; 0x40
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	440b      	add	r3, r1
 8002126:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
 800213e:	460b      	mov	r3, r1
 8002140:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	887a      	ldrh	r2, [r7, #2]
 8002148:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	460b      	mov	r3, r1
 8002162:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e264      	b.n	800264c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	d075      	beq.n	800227a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800218e:	4ba3      	ldr	r3, [pc, #652]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f003 030c 	and.w	r3, r3, #12
 8002196:	2b04      	cmp	r3, #4
 8002198:	d00c      	beq.n	80021b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800219a:	4ba0      	ldr	r3, [pc, #640]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021a2:	2b08      	cmp	r3, #8
 80021a4:	d112      	bne.n	80021cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021a6:	4b9d      	ldr	r3, [pc, #628]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021b2:	d10b      	bne.n	80021cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b4:	4b99      	ldr	r3, [pc, #612]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d05b      	beq.n	8002278 <HAL_RCC_OscConfig+0x108>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d157      	bne.n	8002278 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e23f      	b.n	800264c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021d4:	d106      	bne.n	80021e4 <HAL_RCC_OscConfig+0x74>
 80021d6:	4b91      	ldr	r3, [pc, #580]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a90      	ldr	r2, [pc, #576]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 80021dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e0:	6013      	str	r3, [r2, #0]
 80021e2:	e01d      	b.n	8002220 <HAL_RCC_OscConfig+0xb0>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021ec:	d10c      	bne.n	8002208 <HAL_RCC_OscConfig+0x98>
 80021ee:	4b8b      	ldr	r3, [pc, #556]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a8a      	ldr	r2, [pc, #552]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 80021f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	4b88      	ldr	r3, [pc, #544]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a87      	ldr	r2, [pc, #540]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 8002200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002204:	6013      	str	r3, [r2, #0]
 8002206:	e00b      	b.n	8002220 <HAL_RCC_OscConfig+0xb0>
 8002208:	4b84      	ldr	r3, [pc, #528]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a83      	ldr	r2, [pc, #524]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 800220e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002212:	6013      	str	r3, [r2, #0]
 8002214:	4b81      	ldr	r3, [pc, #516]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a80      	ldr	r2, [pc, #512]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 800221a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800221e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d013      	beq.n	8002250 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002228:	f7fe fb40 	bl	80008ac <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002230:	f7fe fb3c 	bl	80008ac <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b64      	cmp	r3, #100	; 0x64
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e204      	b.n	800264c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002242:	4b76      	ldr	r3, [pc, #472]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d0f0      	beq.n	8002230 <HAL_RCC_OscConfig+0xc0>
 800224e:	e014      	b.n	800227a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002250:	f7fe fb2c 	bl	80008ac <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002258:	f7fe fb28 	bl	80008ac <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b64      	cmp	r3, #100	; 0x64
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e1f0      	b.n	800264c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800226a:	4b6c      	ldr	r3, [pc, #432]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1f0      	bne.n	8002258 <HAL_RCC_OscConfig+0xe8>
 8002276:	e000      	b.n	800227a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002278:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d063      	beq.n	800234e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002286:	4b65      	ldr	r3, [pc, #404]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 030c 	and.w	r3, r3, #12
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00b      	beq.n	80022aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002292:	4b62      	ldr	r3, [pc, #392]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800229a:	2b08      	cmp	r3, #8
 800229c:	d11c      	bne.n	80022d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800229e:	4b5f      	ldr	r3, [pc, #380]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d116      	bne.n	80022d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022aa:	4b5c      	ldr	r3, [pc, #368]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d005      	beq.n	80022c2 <HAL_RCC_OscConfig+0x152>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d001      	beq.n	80022c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e1c4      	b.n	800264c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c2:	4b56      	ldr	r3, [pc, #344]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	4952      	ldr	r1, [pc, #328]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022d6:	e03a      	b.n	800234e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d020      	beq.n	8002322 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022e0:	4b4f      	ldr	r3, [pc, #316]	; (8002420 <HAL_RCC_OscConfig+0x2b0>)
 80022e2:	2201      	movs	r2, #1
 80022e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e6:	f7fe fae1 	bl	80008ac <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022ee:	f7fe fadd 	bl	80008ac <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e1a5      	b.n	800264c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002300:	4b46      	ldr	r3, [pc, #280]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0f0      	beq.n	80022ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800230c:	4b43      	ldr	r3, [pc, #268]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	4940      	ldr	r1, [pc, #256]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 800231c:	4313      	orrs	r3, r2
 800231e:	600b      	str	r3, [r1, #0]
 8002320:	e015      	b.n	800234e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002322:	4b3f      	ldr	r3, [pc, #252]	; (8002420 <HAL_RCC_OscConfig+0x2b0>)
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002328:	f7fe fac0 	bl	80008ac <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002330:	f7fe fabc 	bl	80008ac <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e184      	b.n	800264c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002342:	4b36      	ldr	r3, [pc, #216]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f0      	bne.n	8002330 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0308 	and.w	r3, r3, #8
 8002356:	2b00      	cmp	r3, #0
 8002358:	d030      	beq.n	80023bc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d016      	beq.n	8002390 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002362:	4b30      	ldr	r3, [pc, #192]	; (8002424 <HAL_RCC_OscConfig+0x2b4>)
 8002364:	2201      	movs	r2, #1
 8002366:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002368:	f7fe faa0 	bl	80008ac <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002370:	f7fe fa9c 	bl	80008ac <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e164      	b.n	800264c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002382:	4b26      	ldr	r3, [pc, #152]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 8002384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d0f0      	beq.n	8002370 <HAL_RCC_OscConfig+0x200>
 800238e:	e015      	b.n	80023bc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002390:	4b24      	ldr	r3, [pc, #144]	; (8002424 <HAL_RCC_OscConfig+0x2b4>)
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002396:	f7fe fa89 	bl	80008ac <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800239e:	f7fe fa85 	bl	80008ac <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e14d      	b.n	800264c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b0:	4b1a      	ldr	r3, [pc, #104]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 80023b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1f0      	bne.n	800239e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f000 80a0 	beq.w	800250a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ca:	2300      	movs	r3, #0
 80023cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ce:	4b13      	ldr	r3, [pc, #76]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10f      	bne.n	80023fa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023da:	2300      	movs	r3, #0
 80023dc:	60bb      	str	r3, [r7, #8]
 80023de:	4b0f      	ldr	r3, [pc, #60]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	4a0e      	ldr	r2, [pc, #56]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 80023e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023e8:	6413      	str	r3, [r2, #64]	; 0x40
 80023ea:	4b0c      	ldr	r3, [pc, #48]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f2:	60bb      	str	r3, [r7, #8]
 80023f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023f6:	2301      	movs	r3, #1
 80023f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023fa:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <HAL_RCC_OscConfig+0x2b8>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002402:	2b00      	cmp	r3, #0
 8002404:	d121      	bne.n	800244a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002406:	4b08      	ldr	r3, [pc, #32]	; (8002428 <HAL_RCC_OscConfig+0x2b8>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a07      	ldr	r2, [pc, #28]	; (8002428 <HAL_RCC_OscConfig+0x2b8>)
 800240c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002410:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002412:	f7fe fa4b 	bl	80008ac <HAL_GetTick>
 8002416:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002418:	e011      	b.n	800243e <HAL_RCC_OscConfig+0x2ce>
 800241a:	bf00      	nop
 800241c:	40023800 	.word	0x40023800
 8002420:	42470000 	.word	0x42470000
 8002424:	42470e80 	.word	0x42470e80
 8002428:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800242c:	f7fe fa3e 	bl	80008ac <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e106      	b.n	800264c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800243e:	4b85      	ldr	r3, [pc, #532]	; (8002654 <HAL_RCC_OscConfig+0x4e4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002446:	2b00      	cmp	r3, #0
 8002448:	d0f0      	beq.n	800242c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d106      	bne.n	8002460 <HAL_RCC_OscConfig+0x2f0>
 8002452:	4b81      	ldr	r3, [pc, #516]	; (8002658 <HAL_RCC_OscConfig+0x4e8>)
 8002454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002456:	4a80      	ldr	r2, [pc, #512]	; (8002658 <HAL_RCC_OscConfig+0x4e8>)
 8002458:	f043 0301 	orr.w	r3, r3, #1
 800245c:	6713      	str	r3, [r2, #112]	; 0x70
 800245e:	e01c      	b.n	800249a <HAL_RCC_OscConfig+0x32a>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	2b05      	cmp	r3, #5
 8002466:	d10c      	bne.n	8002482 <HAL_RCC_OscConfig+0x312>
 8002468:	4b7b      	ldr	r3, [pc, #492]	; (8002658 <HAL_RCC_OscConfig+0x4e8>)
 800246a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246c:	4a7a      	ldr	r2, [pc, #488]	; (8002658 <HAL_RCC_OscConfig+0x4e8>)
 800246e:	f043 0304 	orr.w	r3, r3, #4
 8002472:	6713      	str	r3, [r2, #112]	; 0x70
 8002474:	4b78      	ldr	r3, [pc, #480]	; (8002658 <HAL_RCC_OscConfig+0x4e8>)
 8002476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002478:	4a77      	ldr	r2, [pc, #476]	; (8002658 <HAL_RCC_OscConfig+0x4e8>)
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	6713      	str	r3, [r2, #112]	; 0x70
 8002480:	e00b      	b.n	800249a <HAL_RCC_OscConfig+0x32a>
 8002482:	4b75      	ldr	r3, [pc, #468]	; (8002658 <HAL_RCC_OscConfig+0x4e8>)
 8002484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002486:	4a74      	ldr	r2, [pc, #464]	; (8002658 <HAL_RCC_OscConfig+0x4e8>)
 8002488:	f023 0301 	bic.w	r3, r3, #1
 800248c:	6713      	str	r3, [r2, #112]	; 0x70
 800248e:	4b72      	ldr	r3, [pc, #456]	; (8002658 <HAL_RCC_OscConfig+0x4e8>)
 8002490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002492:	4a71      	ldr	r2, [pc, #452]	; (8002658 <HAL_RCC_OscConfig+0x4e8>)
 8002494:	f023 0304 	bic.w	r3, r3, #4
 8002498:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d015      	beq.n	80024ce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a2:	f7fe fa03 	bl	80008ac <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a8:	e00a      	b.n	80024c0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024aa:	f7fe f9ff 	bl	80008ac <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e0c5      	b.n	800264c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c0:	4b65      	ldr	r3, [pc, #404]	; (8002658 <HAL_RCC_OscConfig+0x4e8>)
 80024c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0ee      	beq.n	80024aa <HAL_RCC_OscConfig+0x33a>
 80024cc:	e014      	b.n	80024f8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ce:	f7fe f9ed 	bl	80008ac <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d4:	e00a      	b.n	80024ec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024d6:	f7fe f9e9 	bl	80008ac <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e0af      	b.n	800264c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ec:	4b5a      	ldr	r3, [pc, #360]	; (8002658 <HAL_RCC_OscConfig+0x4e8>)
 80024ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1ee      	bne.n	80024d6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024f8:	7dfb      	ldrb	r3, [r7, #23]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d105      	bne.n	800250a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024fe:	4b56      	ldr	r3, [pc, #344]	; (8002658 <HAL_RCC_OscConfig+0x4e8>)
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	4a55      	ldr	r2, [pc, #340]	; (8002658 <HAL_RCC_OscConfig+0x4e8>)
 8002504:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002508:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 809b 	beq.w	800264a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002514:	4b50      	ldr	r3, [pc, #320]	; (8002658 <HAL_RCC_OscConfig+0x4e8>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f003 030c 	and.w	r3, r3, #12
 800251c:	2b08      	cmp	r3, #8
 800251e:	d05c      	beq.n	80025da <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	2b02      	cmp	r3, #2
 8002526:	d141      	bne.n	80025ac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002528:	4b4c      	ldr	r3, [pc, #304]	; (800265c <HAL_RCC_OscConfig+0x4ec>)
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252e:	f7fe f9bd 	bl	80008ac <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002536:	f7fe f9b9 	bl	80008ac <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e081      	b.n	800264c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002548:	4b43      	ldr	r3, [pc, #268]	; (8002658 <HAL_RCC_OscConfig+0x4e8>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1f0      	bne.n	8002536 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	69da      	ldr	r2, [r3, #28]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	431a      	orrs	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002562:	019b      	lsls	r3, r3, #6
 8002564:	431a      	orrs	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256a:	085b      	lsrs	r3, r3, #1
 800256c:	3b01      	subs	r3, #1
 800256e:	041b      	lsls	r3, r3, #16
 8002570:	431a      	orrs	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002576:	061b      	lsls	r3, r3, #24
 8002578:	4937      	ldr	r1, [pc, #220]	; (8002658 <HAL_RCC_OscConfig+0x4e8>)
 800257a:	4313      	orrs	r3, r2
 800257c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800257e:	4b37      	ldr	r3, [pc, #220]	; (800265c <HAL_RCC_OscConfig+0x4ec>)
 8002580:	2201      	movs	r2, #1
 8002582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002584:	f7fe f992 	bl	80008ac <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800258c:	f7fe f98e 	bl	80008ac <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e056      	b.n	800264c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800259e:	4b2e      	ldr	r3, [pc, #184]	; (8002658 <HAL_RCC_OscConfig+0x4e8>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0f0      	beq.n	800258c <HAL_RCC_OscConfig+0x41c>
 80025aa:	e04e      	b.n	800264a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ac:	4b2b      	ldr	r3, [pc, #172]	; (800265c <HAL_RCC_OscConfig+0x4ec>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b2:	f7fe f97b 	bl	80008ac <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025b8:	e008      	b.n	80025cc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ba:	f7fe f977 	bl	80008ac <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e03f      	b.n	800264c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025cc:	4b22      	ldr	r3, [pc, #136]	; (8002658 <HAL_RCC_OscConfig+0x4e8>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1f0      	bne.n	80025ba <HAL_RCC_OscConfig+0x44a>
 80025d8:	e037      	b.n	800264a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d101      	bne.n	80025e6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e032      	b.n	800264c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025e6:	4b1c      	ldr	r3, [pc, #112]	; (8002658 <HAL_RCC_OscConfig+0x4e8>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d028      	beq.n	8002646 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025fe:	429a      	cmp	r2, r3
 8002600:	d121      	bne.n	8002646 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800260c:	429a      	cmp	r2, r3
 800260e:	d11a      	bne.n	8002646 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002616:	4013      	ands	r3, r2
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800261c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800261e:	4293      	cmp	r3, r2
 8002620:	d111      	bne.n	8002646 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262c:	085b      	lsrs	r3, r3, #1
 800262e:	3b01      	subs	r3, #1
 8002630:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002632:	429a      	cmp	r2, r3
 8002634:	d107      	bne.n	8002646 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002640:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002642:	429a      	cmp	r2, r3
 8002644:	d001      	beq.n	800264a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e000      	b.n	800264c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	3718      	adds	r7, #24
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40007000 	.word	0x40007000
 8002658:	40023800 	.word	0x40023800
 800265c:	42470060 	.word	0x42470060

08002660 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e0cc      	b.n	800280e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002674:	4b68      	ldr	r3, [pc, #416]	; (8002818 <HAL_RCC_ClockConfig+0x1b8>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	429a      	cmp	r2, r3
 8002680:	d90c      	bls.n	800269c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002682:	4b65      	ldr	r3, [pc, #404]	; (8002818 <HAL_RCC_ClockConfig+0x1b8>)
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	b2d2      	uxtb	r2, r2
 8002688:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800268a:	4b63      	ldr	r3, [pc, #396]	; (8002818 <HAL_RCC_ClockConfig+0x1b8>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0307 	and.w	r3, r3, #7
 8002692:	683a      	ldr	r2, [r7, #0]
 8002694:	429a      	cmp	r2, r3
 8002696:	d001      	beq.n	800269c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e0b8      	b.n	800280e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d020      	beq.n	80026ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d005      	beq.n	80026c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026b4:	4b59      	ldr	r3, [pc, #356]	; (800281c <HAL_RCC_ClockConfig+0x1bc>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	4a58      	ldr	r2, [pc, #352]	; (800281c <HAL_RCC_ClockConfig+0x1bc>)
 80026ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0308 	and.w	r3, r3, #8
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d005      	beq.n	80026d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026cc:	4b53      	ldr	r3, [pc, #332]	; (800281c <HAL_RCC_ClockConfig+0x1bc>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	4a52      	ldr	r2, [pc, #328]	; (800281c <HAL_RCC_ClockConfig+0x1bc>)
 80026d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026d8:	4b50      	ldr	r3, [pc, #320]	; (800281c <HAL_RCC_ClockConfig+0x1bc>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	494d      	ldr	r1, [pc, #308]	; (800281c <HAL_RCC_ClockConfig+0x1bc>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d044      	beq.n	8002780 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d107      	bne.n	800270e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fe:	4b47      	ldr	r3, [pc, #284]	; (800281c <HAL_RCC_ClockConfig+0x1bc>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d119      	bne.n	800273e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e07f      	b.n	800280e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b02      	cmp	r3, #2
 8002714:	d003      	beq.n	800271e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800271a:	2b03      	cmp	r3, #3
 800271c:	d107      	bne.n	800272e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800271e:	4b3f      	ldr	r3, [pc, #252]	; (800281c <HAL_RCC_ClockConfig+0x1bc>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d109      	bne.n	800273e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e06f      	b.n	800280e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800272e:	4b3b      	ldr	r3, [pc, #236]	; (800281c <HAL_RCC_ClockConfig+0x1bc>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e067      	b.n	800280e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800273e:	4b37      	ldr	r3, [pc, #220]	; (800281c <HAL_RCC_ClockConfig+0x1bc>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f023 0203 	bic.w	r2, r3, #3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	4934      	ldr	r1, [pc, #208]	; (800281c <HAL_RCC_ClockConfig+0x1bc>)
 800274c:	4313      	orrs	r3, r2
 800274e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002750:	f7fe f8ac 	bl	80008ac <HAL_GetTick>
 8002754:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002756:	e00a      	b.n	800276e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002758:	f7fe f8a8 	bl	80008ac <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	f241 3288 	movw	r2, #5000	; 0x1388
 8002766:	4293      	cmp	r3, r2
 8002768:	d901      	bls.n	800276e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e04f      	b.n	800280e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800276e:	4b2b      	ldr	r3, [pc, #172]	; (800281c <HAL_RCC_ClockConfig+0x1bc>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f003 020c 	and.w	r2, r3, #12
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	429a      	cmp	r2, r3
 800277e:	d1eb      	bne.n	8002758 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002780:	4b25      	ldr	r3, [pc, #148]	; (8002818 <HAL_RCC_ClockConfig+0x1b8>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0307 	and.w	r3, r3, #7
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	429a      	cmp	r2, r3
 800278c:	d20c      	bcs.n	80027a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800278e:	4b22      	ldr	r3, [pc, #136]	; (8002818 <HAL_RCC_ClockConfig+0x1b8>)
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	b2d2      	uxtb	r2, r2
 8002794:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002796:	4b20      	ldr	r3, [pc, #128]	; (8002818 <HAL_RCC_ClockConfig+0x1b8>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d001      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e032      	b.n	800280e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0304 	and.w	r3, r3, #4
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d008      	beq.n	80027c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027b4:	4b19      	ldr	r3, [pc, #100]	; (800281c <HAL_RCC_ClockConfig+0x1bc>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	4916      	ldr	r1, [pc, #88]	; (800281c <HAL_RCC_ClockConfig+0x1bc>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0308 	and.w	r3, r3, #8
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d009      	beq.n	80027e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027d2:	4b12      	ldr	r3, [pc, #72]	; (800281c <HAL_RCC_ClockConfig+0x1bc>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	490e      	ldr	r1, [pc, #56]	; (800281c <HAL_RCC_ClockConfig+0x1bc>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027e6:	f000 f821 	bl	800282c <HAL_RCC_GetSysClockFreq>
 80027ea:	4602      	mov	r2, r0
 80027ec:	4b0b      	ldr	r3, [pc, #44]	; (800281c <HAL_RCC_ClockConfig+0x1bc>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	091b      	lsrs	r3, r3, #4
 80027f2:	f003 030f 	and.w	r3, r3, #15
 80027f6:	490a      	ldr	r1, [pc, #40]	; (8002820 <HAL_RCC_ClockConfig+0x1c0>)
 80027f8:	5ccb      	ldrb	r3, [r1, r3]
 80027fa:	fa22 f303 	lsr.w	r3, r2, r3
 80027fe:	4a09      	ldr	r2, [pc, #36]	; (8002824 <HAL_RCC_ClockConfig+0x1c4>)
 8002800:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002802:	4b09      	ldr	r3, [pc, #36]	; (8002828 <HAL_RCC_ClockConfig+0x1c8>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f7fe f80c 	bl	8000824 <HAL_InitTick>

  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40023c00 	.word	0x40023c00
 800281c:	40023800 	.word	0x40023800
 8002820:	08006060 	.word	0x08006060
 8002824:	20000000 	.word	0x20000000
 8002828:	20000004 	.word	0x20000004

0800282c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800282c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002830:	b084      	sub	sp, #16
 8002832:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002834:	2300      	movs	r3, #0
 8002836:	607b      	str	r3, [r7, #4]
 8002838:	2300      	movs	r3, #0
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	2300      	movs	r3, #0
 800283e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002840:	2300      	movs	r3, #0
 8002842:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002844:	4b67      	ldr	r3, [pc, #412]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f003 030c 	and.w	r3, r3, #12
 800284c:	2b08      	cmp	r3, #8
 800284e:	d00d      	beq.n	800286c <HAL_RCC_GetSysClockFreq+0x40>
 8002850:	2b08      	cmp	r3, #8
 8002852:	f200 80bd 	bhi.w	80029d0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002856:	2b00      	cmp	r3, #0
 8002858:	d002      	beq.n	8002860 <HAL_RCC_GetSysClockFreq+0x34>
 800285a:	2b04      	cmp	r3, #4
 800285c:	d003      	beq.n	8002866 <HAL_RCC_GetSysClockFreq+0x3a>
 800285e:	e0b7      	b.n	80029d0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002860:	4b61      	ldr	r3, [pc, #388]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002862:	60bb      	str	r3, [r7, #8]
       break;
 8002864:	e0b7      	b.n	80029d6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002866:	4b61      	ldr	r3, [pc, #388]	; (80029ec <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002868:	60bb      	str	r3, [r7, #8]
      break;
 800286a:	e0b4      	b.n	80029d6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800286c:	4b5d      	ldr	r3, [pc, #372]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002874:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002876:	4b5b      	ldr	r3, [pc, #364]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d04d      	beq.n	800291e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002882:	4b58      	ldr	r3, [pc, #352]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	099b      	lsrs	r3, r3, #6
 8002888:	461a      	mov	r2, r3
 800288a:	f04f 0300 	mov.w	r3, #0
 800288e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002892:	f04f 0100 	mov.w	r1, #0
 8002896:	ea02 0800 	and.w	r8, r2, r0
 800289a:	ea03 0901 	and.w	r9, r3, r1
 800289e:	4640      	mov	r0, r8
 80028a0:	4649      	mov	r1, r9
 80028a2:	f04f 0200 	mov.w	r2, #0
 80028a6:	f04f 0300 	mov.w	r3, #0
 80028aa:	014b      	lsls	r3, r1, #5
 80028ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80028b0:	0142      	lsls	r2, r0, #5
 80028b2:	4610      	mov	r0, r2
 80028b4:	4619      	mov	r1, r3
 80028b6:	ebb0 0008 	subs.w	r0, r0, r8
 80028ba:	eb61 0109 	sbc.w	r1, r1, r9
 80028be:	f04f 0200 	mov.w	r2, #0
 80028c2:	f04f 0300 	mov.w	r3, #0
 80028c6:	018b      	lsls	r3, r1, #6
 80028c8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80028cc:	0182      	lsls	r2, r0, #6
 80028ce:	1a12      	subs	r2, r2, r0
 80028d0:	eb63 0301 	sbc.w	r3, r3, r1
 80028d4:	f04f 0000 	mov.w	r0, #0
 80028d8:	f04f 0100 	mov.w	r1, #0
 80028dc:	00d9      	lsls	r1, r3, #3
 80028de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028e2:	00d0      	lsls	r0, r2, #3
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	eb12 0208 	adds.w	r2, r2, r8
 80028ec:	eb43 0309 	adc.w	r3, r3, r9
 80028f0:	f04f 0000 	mov.w	r0, #0
 80028f4:	f04f 0100 	mov.w	r1, #0
 80028f8:	0259      	lsls	r1, r3, #9
 80028fa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80028fe:	0250      	lsls	r0, r2, #9
 8002900:	4602      	mov	r2, r0
 8002902:	460b      	mov	r3, r1
 8002904:	4610      	mov	r0, r2
 8002906:	4619      	mov	r1, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	461a      	mov	r2, r3
 800290c:	f04f 0300 	mov.w	r3, #0
 8002910:	f7fd fc5a 	bl	80001c8 <__aeabi_uldivmod>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4613      	mov	r3, r2
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	e04a      	b.n	80029b4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800291e:	4b31      	ldr	r3, [pc, #196]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	099b      	lsrs	r3, r3, #6
 8002924:	461a      	mov	r2, r3
 8002926:	f04f 0300 	mov.w	r3, #0
 800292a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800292e:	f04f 0100 	mov.w	r1, #0
 8002932:	ea02 0400 	and.w	r4, r2, r0
 8002936:	ea03 0501 	and.w	r5, r3, r1
 800293a:	4620      	mov	r0, r4
 800293c:	4629      	mov	r1, r5
 800293e:	f04f 0200 	mov.w	r2, #0
 8002942:	f04f 0300 	mov.w	r3, #0
 8002946:	014b      	lsls	r3, r1, #5
 8002948:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800294c:	0142      	lsls	r2, r0, #5
 800294e:	4610      	mov	r0, r2
 8002950:	4619      	mov	r1, r3
 8002952:	1b00      	subs	r0, r0, r4
 8002954:	eb61 0105 	sbc.w	r1, r1, r5
 8002958:	f04f 0200 	mov.w	r2, #0
 800295c:	f04f 0300 	mov.w	r3, #0
 8002960:	018b      	lsls	r3, r1, #6
 8002962:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002966:	0182      	lsls	r2, r0, #6
 8002968:	1a12      	subs	r2, r2, r0
 800296a:	eb63 0301 	sbc.w	r3, r3, r1
 800296e:	f04f 0000 	mov.w	r0, #0
 8002972:	f04f 0100 	mov.w	r1, #0
 8002976:	00d9      	lsls	r1, r3, #3
 8002978:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800297c:	00d0      	lsls	r0, r2, #3
 800297e:	4602      	mov	r2, r0
 8002980:	460b      	mov	r3, r1
 8002982:	1912      	adds	r2, r2, r4
 8002984:	eb45 0303 	adc.w	r3, r5, r3
 8002988:	f04f 0000 	mov.w	r0, #0
 800298c:	f04f 0100 	mov.w	r1, #0
 8002990:	0299      	lsls	r1, r3, #10
 8002992:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002996:	0290      	lsls	r0, r2, #10
 8002998:	4602      	mov	r2, r0
 800299a:	460b      	mov	r3, r1
 800299c:	4610      	mov	r0, r2
 800299e:	4619      	mov	r1, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	461a      	mov	r2, r3
 80029a4:	f04f 0300 	mov.w	r3, #0
 80029a8:	f7fd fc0e 	bl	80001c8 <__aeabi_uldivmod>
 80029ac:	4602      	mov	r2, r0
 80029ae:	460b      	mov	r3, r1
 80029b0:	4613      	mov	r3, r2
 80029b2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029b4:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	0c1b      	lsrs	r3, r3, #16
 80029ba:	f003 0303 	and.w	r3, r3, #3
 80029be:	3301      	adds	r3, #1
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029cc:	60bb      	str	r3, [r7, #8]
      break;
 80029ce:	e002      	b.n	80029d6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029d0:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80029d2:	60bb      	str	r3, [r7, #8]
      break;
 80029d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029d6:	68bb      	ldr	r3, [r7, #8]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80029e2:	bf00      	nop
 80029e4:	40023800 	.word	0x40023800
 80029e8:	00f42400 	.word	0x00f42400
 80029ec:	007a1200 	.word	0x007a1200

080029f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029f4:	4b03      	ldr	r3, [pc, #12]	; (8002a04 <HAL_RCC_GetHCLKFreq+0x14>)
 80029f6:	681b      	ldr	r3, [r3, #0]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	20000000 	.word	0x20000000

08002a08 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002a08:	b084      	sub	sp, #16
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b084      	sub	sp, #16
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
 8002a12:	f107 001c 	add.w	r0, r7, #28
 8002a16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d122      	bne.n	8002a66 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002a34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002a48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d105      	bne.n	8002a5a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f001 fb1c 	bl	8004098 <USB_CoreReset>
 8002a60:	4603      	mov	r3, r0
 8002a62:	73fb      	strb	r3, [r7, #15]
 8002a64:	e01a      	b.n	8002a9c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f001 fb10 	bl	8004098 <USB_CoreReset>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002a7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d106      	bne.n	8002a90 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a86:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	639a      	str	r2, [r3, #56]	; 0x38
 8002a8e:	e005      	b.n	8002a9c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d10b      	bne.n	8002aba <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f043 0206 	orr.w	r2, r3, #6
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f043 0220 	orr.w	r2, r3, #32
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ac6:	b004      	add	sp, #16
 8002ac8:	4770      	bx	lr
	...

08002acc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b087      	sub	sp, #28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002ada:	79fb      	ldrb	r3, [r7, #7]
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d165      	bne.n	8002bac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	4a41      	ldr	r2, [pc, #260]	; (8002be8 <USB_SetTurnaroundTime+0x11c>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d906      	bls.n	8002af6 <USB_SetTurnaroundTime+0x2a>
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	4a40      	ldr	r2, [pc, #256]	; (8002bec <USB_SetTurnaroundTime+0x120>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d202      	bcs.n	8002af6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002af0:	230f      	movs	r3, #15
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	e062      	b.n	8002bbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	4a3c      	ldr	r2, [pc, #240]	; (8002bec <USB_SetTurnaroundTime+0x120>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d306      	bcc.n	8002b0c <USB_SetTurnaroundTime+0x40>
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	4a3b      	ldr	r2, [pc, #236]	; (8002bf0 <USB_SetTurnaroundTime+0x124>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d202      	bcs.n	8002b0c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002b06:	230e      	movs	r3, #14
 8002b08:	617b      	str	r3, [r7, #20]
 8002b0a:	e057      	b.n	8002bbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	4a38      	ldr	r2, [pc, #224]	; (8002bf0 <USB_SetTurnaroundTime+0x124>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d306      	bcc.n	8002b22 <USB_SetTurnaroundTime+0x56>
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	4a37      	ldr	r2, [pc, #220]	; (8002bf4 <USB_SetTurnaroundTime+0x128>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d202      	bcs.n	8002b22 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002b1c:	230d      	movs	r3, #13
 8002b1e:	617b      	str	r3, [r7, #20]
 8002b20:	e04c      	b.n	8002bbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	4a33      	ldr	r2, [pc, #204]	; (8002bf4 <USB_SetTurnaroundTime+0x128>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d306      	bcc.n	8002b38 <USB_SetTurnaroundTime+0x6c>
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	4a32      	ldr	r2, [pc, #200]	; (8002bf8 <USB_SetTurnaroundTime+0x12c>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d802      	bhi.n	8002b38 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002b32:	230c      	movs	r3, #12
 8002b34:	617b      	str	r3, [r7, #20]
 8002b36:	e041      	b.n	8002bbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	4a2f      	ldr	r2, [pc, #188]	; (8002bf8 <USB_SetTurnaroundTime+0x12c>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d906      	bls.n	8002b4e <USB_SetTurnaroundTime+0x82>
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	4a2e      	ldr	r2, [pc, #184]	; (8002bfc <USB_SetTurnaroundTime+0x130>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d802      	bhi.n	8002b4e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002b48:	230b      	movs	r3, #11
 8002b4a:	617b      	str	r3, [r7, #20]
 8002b4c:	e036      	b.n	8002bbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	4a2a      	ldr	r2, [pc, #168]	; (8002bfc <USB_SetTurnaroundTime+0x130>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d906      	bls.n	8002b64 <USB_SetTurnaroundTime+0x98>
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	4a29      	ldr	r2, [pc, #164]	; (8002c00 <USB_SetTurnaroundTime+0x134>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d802      	bhi.n	8002b64 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002b5e:	230a      	movs	r3, #10
 8002b60:	617b      	str	r3, [r7, #20]
 8002b62:	e02b      	b.n	8002bbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	4a26      	ldr	r2, [pc, #152]	; (8002c00 <USB_SetTurnaroundTime+0x134>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d906      	bls.n	8002b7a <USB_SetTurnaroundTime+0xae>
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	4a25      	ldr	r2, [pc, #148]	; (8002c04 <USB_SetTurnaroundTime+0x138>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d202      	bcs.n	8002b7a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002b74:	2309      	movs	r3, #9
 8002b76:	617b      	str	r3, [r7, #20]
 8002b78:	e020      	b.n	8002bbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	4a21      	ldr	r2, [pc, #132]	; (8002c04 <USB_SetTurnaroundTime+0x138>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d306      	bcc.n	8002b90 <USB_SetTurnaroundTime+0xc4>
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	4a20      	ldr	r2, [pc, #128]	; (8002c08 <USB_SetTurnaroundTime+0x13c>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d802      	bhi.n	8002b90 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002b8a:	2308      	movs	r3, #8
 8002b8c:	617b      	str	r3, [r7, #20]
 8002b8e:	e015      	b.n	8002bbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	4a1d      	ldr	r2, [pc, #116]	; (8002c08 <USB_SetTurnaroundTime+0x13c>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d906      	bls.n	8002ba6 <USB_SetTurnaroundTime+0xda>
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	4a1c      	ldr	r2, [pc, #112]	; (8002c0c <USB_SetTurnaroundTime+0x140>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d202      	bcs.n	8002ba6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002ba0:	2307      	movs	r3, #7
 8002ba2:	617b      	str	r3, [r7, #20]
 8002ba4:	e00a      	b.n	8002bbc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002ba6:	2306      	movs	r3, #6
 8002ba8:	617b      	str	r3, [r7, #20]
 8002baa:	e007      	b.n	8002bbc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002bac:	79fb      	ldrb	r3, [r7, #7]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d102      	bne.n	8002bb8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002bb2:	2309      	movs	r3, #9
 8002bb4:	617b      	str	r3, [r7, #20]
 8002bb6:	e001      	b.n	8002bbc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002bb8:	2309      	movs	r3, #9
 8002bba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	68da      	ldr	r2, [r3, #12]
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	029b      	lsls	r3, r3, #10
 8002bd0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	371c      	adds	r7, #28
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	00d8acbf 	.word	0x00d8acbf
 8002bec:	00e4e1c0 	.word	0x00e4e1c0
 8002bf0:	00f42400 	.word	0x00f42400
 8002bf4:	01067380 	.word	0x01067380
 8002bf8:	011a499f 	.word	0x011a499f
 8002bfc:	01312cff 	.word	0x01312cff
 8002c00:	014ca43f 	.word	0x014ca43f
 8002c04:	016e3600 	.word	0x016e3600
 8002c08:	01a6ab1f 	.word	0x01a6ab1f
 8002c0c:	01e84800 	.word	0x01e84800

08002c10 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f043 0201 	orr.w	r2, r3, #1
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f023 0201 	bic.w	r2, r3, #1
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002c70:	78fb      	ldrb	r3, [r7, #3]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d115      	bne.n	8002ca2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002c82:	2001      	movs	r0, #1
 8002c84:	f7fd fe1e 	bl	80008c4 <HAL_Delay>
      ms++;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f001 f972 	bl	8003f78 <USB_GetMode>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d01e      	beq.n	8002cd8 <USB_SetCurrentMode+0x84>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2b31      	cmp	r3, #49	; 0x31
 8002c9e:	d9f0      	bls.n	8002c82 <USB_SetCurrentMode+0x2e>
 8002ca0:	e01a      	b.n	8002cd8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002ca2:	78fb      	ldrb	r3, [r7, #3]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d115      	bne.n	8002cd4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002cb4:	2001      	movs	r0, #1
 8002cb6:	f7fd fe05 	bl	80008c4 <HAL_Delay>
      ms++;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f001 f959 	bl	8003f78 <USB_GetMode>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d005      	beq.n	8002cd8 <USB_SetCurrentMode+0x84>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2b31      	cmp	r3, #49	; 0x31
 8002cd0:	d9f0      	bls.n	8002cb4 <USB_SetCurrentMode+0x60>
 8002cd2:	e001      	b.n	8002cd8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e005      	b.n	8002ce4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2b32      	cmp	r3, #50	; 0x32
 8002cdc:	d101      	bne.n	8002ce2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e000      	b.n	8002ce4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002cec:	b084      	sub	sp, #16
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b086      	sub	sp, #24
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
 8002cf6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002cfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002d06:	2300      	movs	r3, #0
 8002d08:	613b      	str	r3, [r7, #16]
 8002d0a:	e009      	b.n	8002d20 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	3340      	adds	r3, #64	; 0x40
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4413      	add	r3, r2
 8002d16:	2200      	movs	r2, #0
 8002d18:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	613b      	str	r3, [r7, #16]
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	2b0e      	cmp	r3, #14
 8002d24:	d9f2      	bls.n	8002d0c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002d26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d11c      	bne.n	8002d66 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d3a:	f043 0302 	orr.w	r3, r3, #2
 8002d3e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d44:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d50:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	639a      	str	r2, [r3, #56]	; 0x38
 8002d64:	e00b      	b.n	8002d7e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d6a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d76:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002d84:	461a      	mov	r2, r3
 8002d86:	2300      	movs	r3, #0
 8002d88:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d90:	4619      	mov	r1, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d98:	461a      	mov	r2, r3
 8002d9a:	680b      	ldr	r3, [r1, #0]
 8002d9c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d10c      	bne.n	8002dbe <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d104      	bne.n	8002db4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002daa:	2100      	movs	r1, #0
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 f945 	bl	800303c <USB_SetDevSpeed>
 8002db2:	e008      	b.n	8002dc6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002db4:	2101      	movs	r1, #1
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f940 	bl	800303c <USB_SetDevSpeed>
 8002dbc:	e003      	b.n	8002dc6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002dbe:	2103      	movs	r1, #3
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 f93b 	bl	800303c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002dc6:	2110      	movs	r1, #16
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 f8f3 	bl	8002fb4 <USB_FlushTxFifo>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f000 f90f 	bl	8002ffc <USB_FlushRxFifo>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dee:	461a      	mov	r2, r3
 8002df0:	2300      	movs	r3, #0
 8002df2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e06:	461a      	mov	r2, r3
 8002e08:	2300      	movs	r3, #0
 8002e0a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	613b      	str	r3, [r7, #16]
 8002e10:	e043      	b.n	8002e9a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	015a      	lsls	r2, r3, #5
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	4413      	add	r3, r2
 8002e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e28:	d118      	bne.n	8002e5c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10a      	bne.n	8002e46 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	015a      	lsls	r2, r3, #5
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	4413      	add	r3, r2
 8002e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e42:	6013      	str	r3, [r2, #0]
 8002e44:	e013      	b.n	8002e6e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	015a      	lsls	r2, r3, #5
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e52:	461a      	mov	r2, r3
 8002e54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002e58:	6013      	str	r3, [r2, #0]
 8002e5a:	e008      	b.n	8002e6e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	015a      	lsls	r2, r3, #5
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4413      	add	r3, r2
 8002e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e68:	461a      	mov	r2, r3
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	015a      	lsls	r2, r3, #5
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	4413      	add	r3, r2
 8002e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	015a      	lsls	r2, r3, #5
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	4413      	add	r3, r2
 8002e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e92:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	3301      	adds	r3, #1
 8002e98:	613b      	str	r3, [r7, #16]
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d3b7      	bcc.n	8002e12 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	613b      	str	r3, [r7, #16]
 8002ea6:	e043      	b.n	8002f30 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	015a      	lsls	r2, r3, #5
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4413      	add	r3, r2
 8002eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002eba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ebe:	d118      	bne.n	8002ef2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10a      	bne.n	8002edc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	015a      	lsls	r2, r3, #5
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	4413      	add	r3, r2
 8002ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002ed8:	6013      	str	r3, [r2, #0]
 8002eda:	e013      	b.n	8002f04 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	015a      	lsls	r2, r3, #5
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ee8:	461a      	mov	r2, r3
 8002eea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002eee:	6013      	str	r3, [r2, #0]
 8002ef0:	e008      	b.n	8002f04 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	015a      	lsls	r2, r3, #5
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	4413      	add	r3, r2
 8002efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002efe:	461a      	mov	r2, r3
 8002f00:	2300      	movs	r3, #0
 8002f02:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	015a      	lsls	r2, r3, #5
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f10:	461a      	mov	r2, r3
 8002f12:	2300      	movs	r3, #0
 8002f14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	015a      	lsls	r2, r3, #5
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f22:	461a      	mov	r2, r3
 8002f24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f28:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	613b      	str	r3, [r7, #16]
 8002f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d3b7      	bcc.n	8002ea8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f4a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002f58:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d105      	bne.n	8002f6c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	f043 0210 	orr.w	r2, r3, #16
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	699a      	ldr	r2, [r3, #24]
 8002f70:	4b0f      	ldr	r3, [pc, #60]	; (8002fb0 <USB_DevInit+0x2c4>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d005      	beq.n	8002f8a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	f043 0208 	orr.w	r2, r3, #8
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002f8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d107      	bne.n	8002fa0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002f98:	f043 0304 	orr.w	r3, r3, #4
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002fa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3718      	adds	r7, #24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002fac:	b004      	add	sp, #16
 8002fae:	4770      	bx	lr
 8002fb0:	803c3800 	.word	0x803c3800

08002fb4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	019b      	lsls	r3, r3, #6
 8002fc6:	f043 0220 	orr.w	r2, r3, #32
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	60fb      	str	r3, [r7, #12]
 8002fd4:	4a08      	ldr	r2, [pc, #32]	; (8002ff8 <USB_FlushTxFifo+0x44>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d901      	bls.n	8002fde <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e006      	b.n	8002fec <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	f003 0320 	and.w	r3, r3, #32
 8002fe6:	2b20      	cmp	r3, #32
 8002fe8:	d0f1      	beq.n	8002fce <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	00030d40 	.word	0x00030d40

08002ffc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003004:	2300      	movs	r3, #0
 8003006:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2210      	movs	r2, #16
 800300c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	3301      	adds	r3, #1
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	4a08      	ldr	r2, [pc, #32]	; (8003038 <USB_FlushRxFifo+0x3c>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d901      	bls.n	800301e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e006      	b.n	800302c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	f003 0310 	and.w	r3, r3, #16
 8003026:	2b10      	cmp	r3, #16
 8003028:	d0f1      	beq.n	800300e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	00030d40 	.word	0x00030d40

0800303c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	460b      	mov	r3, r1
 8003046:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	78fb      	ldrb	r3, [r7, #3]
 8003056:	68f9      	ldr	r1, [r7, #12]
 8003058:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800305c:	4313      	orrs	r3, r2
 800305e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3714      	adds	r7, #20
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr

0800306e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800306e:	b480      	push	{r7}
 8003070:	b087      	sub	sp, #28
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 0306 	and.w	r3, r3, #6
 8003086:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d102      	bne.n	8003094 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800308e:	2300      	movs	r3, #0
 8003090:	75fb      	strb	r3, [r7, #23]
 8003092:	e00a      	b.n	80030aa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2b02      	cmp	r3, #2
 8003098:	d002      	beq.n	80030a0 <USB_GetDevSpeed+0x32>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2b06      	cmp	r3, #6
 800309e:	d102      	bne.n	80030a6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80030a0:	2302      	movs	r3, #2
 80030a2:	75fb      	strb	r3, [r7, #23]
 80030a4:	e001      	b.n	80030aa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80030a6:	230f      	movs	r3, #15
 80030a8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80030aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	371c      	adds	r7, #28
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	785b      	ldrb	r3, [r3, #1]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d13a      	bne.n	800314a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030da:	69da      	ldr	r2, [r3, #28]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	f003 030f 	and.w	r3, r3, #15
 80030e4:	2101      	movs	r1, #1
 80030e6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	68f9      	ldr	r1, [r7, #12]
 80030ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030f2:	4313      	orrs	r3, r2
 80030f4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	015a      	lsls	r2, r3, #5
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	4413      	add	r3, r2
 80030fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d155      	bne.n	80031b8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	015a      	lsls	r2, r3, #5
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	4413      	add	r3, r2
 8003114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	78db      	ldrb	r3, [r3, #3]
 8003126:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003128:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	059b      	lsls	r3, r3, #22
 800312e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003130:	4313      	orrs	r3, r2
 8003132:	68ba      	ldr	r2, [r7, #8]
 8003134:	0151      	lsls	r1, r2, #5
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	440a      	add	r2, r1
 800313a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800313e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003142:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003146:	6013      	str	r3, [r2, #0]
 8003148:	e036      	b.n	80031b8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003150:	69da      	ldr	r2, [r3, #28]
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	f003 030f 	and.w	r3, r3, #15
 800315a:	2101      	movs	r1, #1
 800315c:	fa01 f303 	lsl.w	r3, r1, r3
 8003160:	041b      	lsls	r3, r3, #16
 8003162:	68f9      	ldr	r1, [r7, #12]
 8003164:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003168:	4313      	orrs	r3, r2
 800316a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	015a      	lsls	r2, r3, #5
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	4413      	add	r3, r2
 8003174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d11a      	bne.n	80031b8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	015a      	lsls	r2, r3, #5
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	4413      	add	r3, r2
 800318a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	78db      	ldrb	r3, [r3, #3]
 800319c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800319e:	430b      	orrs	r3, r1
 80031a0:	4313      	orrs	r3, r2
 80031a2:	68ba      	ldr	r2, [r7, #8]
 80031a4:	0151      	lsls	r1, r2, #5
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	440a      	add	r2, r1
 80031aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80031ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031b6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3714      	adds	r7, #20
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
	...

080031c8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	785b      	ldrb	r3, [r3, #1]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d161      	bne.n	80032a8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	015a      	lsls	r2, r3, #5
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	4413      	add	r3, r2
 80031ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031fa:	d11f      	bne.n	800323c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	015a      	lsls	r2, r3, #5
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	4413      	add	r3, r2
 8003204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	0151      	lsls	r1, r2, #5
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	440a      	add	r2, r1
 8003212:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003216:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800321a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	015a      	lsls	r2, r3, #5
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	4413      	add	r3, r2
 8003224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	0151      	lsls	r1, r2, #5
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	440a      	add	r2, r1
 8003232:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003236:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800323a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003242:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	f003 030f 	and.w	r3, r3, #15
 800324c:	2101      	movs	r1, #1
 800324e:	fa01 f303 	lsl.w	r3, r1, r3
 8003252:	b29b      	uxth	r3, r3
 8003254:	43db      	mvns	r3, r3
 8003256:	68f9      	ldr	r1, [r7, #12]
 8003258:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800325c:	4013      	ands	r3, r2
 800325e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003266:	69da      	ldr	r2, [r3, #28]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	f003 030f 	and.w	r3, r3, #15
 8003270:	2101      	movs	r1, #1
 8003272:	fa01 f303 	lsl.w	r3, r1, r3
 8003276:	b29b      	uxth	r3, r3
 8003278:	43db      	mvns	r3, r3
 800327a:	68f9      	ldr	r1, [r7, #12]
 800327c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003280:	4013      	ands	r3, r2
 8003282:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	015a      	lsls	r2, r3, #5
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	4413      	add	r3, r2
 800328c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	0159      	lsls	r1, r3, #5
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	440b      	add	r3, r1
 800329a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800329e:	4619      	mov	r1, r3
 80032a0:	4b35      	ldr	r3, [pc, #212]	; (8003378 <USB_DeactivateEndpoint+0x1b0>)
 80032a2:	4013      	ands	r3, r2
 80032a4:	600b      	str	r3, [r1, #0]
 80032a6:	e060      	b.n	800336a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	015a      	lsls	r2, r3, #5
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4413      	add	r3, r2
 80032b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80032ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032be:	d11f      	bne.n	8003300 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	015a      	lsls	r2, r3, #5
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	4413      	add	r3, r2
 80032c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	0151      	lsls	r1, r2, #5
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	440a      	add	r2, r1
 80032d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80032da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80032de:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	015a      	lsls	r2, r3, #5
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4413      	add	r3, r2
 80032e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	0151      	lsls	r1, r2, #5
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	440a      	add	r2, r1
 80032f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80032fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80032fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003306:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	f003 030f 	and.w	r3, r3, #15
 8003310:	2101      	movs	r1, #1
 8003312:	fa01 f303 	lsl.w	r3, r1, r3
 8003316:	041b      	lsls	r3, r3, #16
 8003318:	43db      	mvns	r3, r3
 800331a:	68f9      	ldr	r1, [r7, #12]
 800331c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003320:	4013      	ands	r3, r2
 8003322:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800332a:	69da      	ldr	r2, [r3, #28]
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	f003 030f 	and.w	r3, r3, #15
 8003334:	2101      	movs	r1, #1
 8003336:	fa01 f303 	lsl.w	r3, r1, r3
 800333a:	041b      	lsls	r3, r3, #16
 800333c:	43db      	mvns	r3, r3
 800333e:	68f9      	ldr	r1, [r7, #12]
 8003340:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003344:	4013      	ands	r3, r2
 8003346:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	015a      	lsls	r2, r3, #5
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	4413      	add	r3, r2
 8003350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	0159      	lsls	r1, r3, #5
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	440b      	add	r3, r1
 800335e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003362:	4619      	mov	r1, r3
 8003364:	4b05      	ldr	r3, [pc, #20]	; (800337c <USB_DeactivateEndpoint+0x1b4>)
 8003366:	4013      	ands	r3, r2
 8003368:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3714      	adds	r7, #20
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	ec337800 	.word	0xec337800
 800337c:	eff37800 	.word	0xeff37800

08003380 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b08a      	sub	sp, #40	; 0x28
 8003384:	af02      	add	r7, sp, #8
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	4613      	mov	r3, r2
 800338c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	785b      	ldrb	r3, [r3, #1]
 800339c:	2b01      	cmp	r3, #1
 800339e:	f040 815c 	bne.w	800365a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d132      	bne.n	8003410 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	015a      	lsls	r2, r3, #5
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	4413      	add	r3, r2
 80033b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	0151      	lsls	r1, r2, #5
 80033bc:	69fa      	ldr	r2, [r7, #28]
 80033be:	440a      	add	r2, r1
 80033c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80033c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80033cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	015a      	lsls	r2, r3, #5
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	4413      	add	r3, r2
 80033d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	0151      	lsls	r1, r2, #5
 80033e0:	69fa      	ldr	r2, [r7, #28]
 80033e2:	440a      	add	r2, r1
 80033e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80033ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	015a      	lsls	r2, r3, #5
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	4413      	add	r3, r2
 80033f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	0151      	lsls	r1, r2, #5
 8003400:	69fa      	ldr	r2, [r7, #28]
 8003402:	440a      	add	r2, r1
 8003404:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003408:	0cdb      	lsrs	r3, r3, #19
 800340a:	04db      	lsls	r3, r3, #19
 800340c:	6113      	str	r3, [r2, #16]
 800340e:	e074      	b.n	80034fa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	015a      	lsls	r2, r3, #5
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	4413      	add	r3, r2
 8003418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	0151      	lsls	r1, r2, #5
 8003422:	69fa      	ldr	r2, [r7, #28]
 8003424:	440a      	add	r2, r1
 8003426:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800342a:	0cdb      	lsrs	r3, r3, #19
 800342c:	04db      	lsls	r3, r3, #19
 800342e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	015a      	lsls	r2, r3, #5
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	4413      	add	r3, r2
 8003438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	0151      	lsls	r1, r2, #5
 8003442:	69fa      	ldr	r2, [r7, #28]
 8003444:	440a      	add	r2, r1
 8003446:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800344a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800344e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003452:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	015a      	lsls	r2, r3, #5
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	4413      	add	r3, r2
 800345c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003460:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	6959      	ldr	r1, [r3, #20]
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	440b      	add	r3, r1
 800346c:	1e59      	subs	r1, r3, #1
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	fbb1 f3f3 	udiv	r3, r1, r3
 8003476:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003478:	4b9d      	ldr	r3, [pc, #628]	; (80036f0 <USB_EPStartXfer+0x370>)
 800347a:	400b      	ands	r3, r1
 800347c:	69b9      	ldr	r1, [r7, #24]
 800347e:	0148      	lsls	r0, r1, #5
 8003480:	69f9      	ldr	r1, [r7, #28]
 8003482:	4401      	add	r1, r0
 8003484:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003488:	4313      	orrs	r3, r2
 800348a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	015a      	lsls	r2, r3, #5
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	4413      	add	r3, r2
 8003494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003498:	691a      	ldr	r2, [r3, #16]
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034a2:	69b9      	ldr	r1, [r7, #24]
 80034a4:	0148      	lsls	r0, r1, #5
 80034a6:	69f9      	ldr	r1, [r7, #28]
 80034a8:	4401      	add	r1, r0
 80034aa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80034ae:	4313      	orrs	r3, r2
 80034b0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	78db      	ldrb	r3, [r3, #3]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d11f      	bne.n	80034fa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	015a      	lsls	r2, r3, #5
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	4413      	add	r3, r2
 80034c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	0151      	lsls	r1, r2, #5
 80034cc:	69fa      	ldr	r2, [r7, #28]
 80034ce:	440a      	add	r2, r1
 80034d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034d4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80034d8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	015a      	lsls	r2, r3, #5
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	4413      	add	r3, r2
 80034e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	0151      	lsls	r1, r2, #5
 80034ec:	69fa      	ldr	r2, [r7, #28]
 80034ee:	440a      	add	r2, r1
 80034f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80034f8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80034fa:	79fb      	ldrb	r3, [r7, #7]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d14b      	bne.n	8003598 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d009      	beq.n	800351c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	015a      	lsls	r2, r3, #5
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	4413      	add	r3, r2
 8003510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003514:	461a      	mov	r2, r3
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	78db      	ldrb	r3, [r3, #3]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d128      	bne.n	8003576 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003530:	2b00      	cmp	r3, #0
 8003532:	d110      	bne.n	8003556 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	015a      	lsls	r2, r3, #5
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	4413      	add	r3, r2
 800353c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	0151      	lsls	r1, r2, #5
 8003546:	69fa      	ldr	r2, [r7, #28]
 8003548:	440a      	add	r2, r1
 800354a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800354e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003552:	6013      	str	r3, [r2, #0]
 8003554:	e00f      	b.n	8003576 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	015a      	lsls	r2, r3, #5
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	4413      	add	r3, r2
 800355e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	0151      	lsls	r1, r2, #5
 8003568:	69fa      	ldr	r2, [r7, #28]
 800356a:	440a      	add	r2, r1
 800356c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003574:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	015a      	lsls	r2, r3, #5
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	4413      	add	r3, r2
 800357e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	0151      	lsls	r1, r2, #5
 8003588:	69fa      	ldr	r2, [r7, #28]
 800358a:	440a      	add	r2, r1
 800358c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003590:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003594:	6013      	str	r3, [r2, #0]
 8003596:	e12f      	b.n	80037f8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	015a      	lsls	r2, r3, #5
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	4413      	add	r3, r2
 80035a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	0151      	lsls	r1, r2, #5
 80035aa:	69fa      	ldr	r2, [r7, #28]
 80035ac:	440a      	add	r2, r1
 80035ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80035b6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	78db      	ldrb	r3, [r3, #3]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d015      	beq.n	80035ec <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 8117 	beq.w	80037f8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	2101      	movs	r1, #1
 80035dc:	fa01 f303 	lsl.w	r3, r1, r3
 80035e0:	69f9      	ldr	r1, [r7, #28]
 80035e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035e6:	4313      	orrs	r3, r2
 80035e8:	634b      	str	r3, [r1, #52]	; 0x34
 80035ea:	e105      	b.n	80037f8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d110      	bne.n	800361e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	015a      	lsls	r2, r3, #5
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	4413      	add	r3, r2
 8003604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	0151      	lsls	r1, r2, #5
 800360e:	69fa      	ldr	r2, [r7, #28]
 8003610:	440a      	add	r2, r1
 8003612:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003616:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800361a:	6013      	str	r3, [r2, #0]
 800361c:	e00f      	b.n	800363e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	015a      	lsls	r2, r3, #5
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	4413      	add	r3, r2
 8003626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	0151      	lsls	r1, r2, #5
 8003630:	69fa      	ldr	r2, [r7, #28]
 8003632:	440a      	add	r2, r1
 8003634:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800363c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	68d9      	ldr	r1, [r3, #12]
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	781a      	ldrb	r2, [r3, #0]
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	b298      	uxth	r0, r3
 800364c:	79fb      	ldrb	r3, [r7, #7]
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	4603      	mov	r3, r0
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f000 fa2b 	bl	8003aae <USB_WritePacket>
 8003658:	e0ce      	b.n	80037f8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	015a      	lsls	r2, r3, #5
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	4413      	add	r3, r2
 8003662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	0151      	lsls	r1, r2, #5
 800366c:	69fa      	ldr	r2, [r7, #28]
 800366e:	440a      	add	r2, r1
 8003670:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003674:	0cdb      	lsrs	r3, r3, #19
 8003676:	04db      	lsls	r3, r3, #19
 8003678:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	015a      	lsls	r2, r3, #5
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	4413      	add	r3, r2
 8003682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	0151      	lsls	r1, r2, #5
 800368c:	69fa      	ldr	r2, [r7, #28]
 800368e:	440a      	add	r2, r1
 8003690:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003694:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003698:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800369c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d126      	bne.n	80036f4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	015a      	lsls	r2, r3, #5
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	4413      	add	r3, r2
 80036ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036b2:	691a      	ldr	r2, [r3, #16]
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036bc:	69b9      	ldr	r1, [r7, #24]
 80036be:	0148      	lsls	r0, r1, #5
 80036c0:	69f9      	ldr	r1, [r7, #28]
 80036c2:	4401      	add	r1, r0
 80036c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80036c8:	4313      	orrs	r3, r2
 80036ca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	015a      	lsls	r2, r3, #5
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	4413      	add	r3, r2
 80036d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	0151      	lsls	r1, r2, #5
 80036de:	69fa      	ldr	r2, [r7, #28]
 80036e0:	440a      	add	r2, r1
 80036e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80036e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80036ea:	6113      	str	r3, [r2, #16]
 80036ec:	e036      	b.n	800375c <USB_EPStartXfer+0x3dc>
 80036ee:	bf00      	nop
 80036f0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	695a      	ldr	r2, [r3, #20]
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	4413      	add	r3, r2
 80036fe:	1e5a      	subs	r2, r3, #1
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	fbb2 f3f3 	udiv	r3, r2, r3
 8003708:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	015a      	lsls	r2, r3, #5
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	4413      	add	r3, r2
 8003712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003716:	691a      	ldr	r2, [r3, #16]
 8003718:	8afb      	ldrh	r3, [r7, #22]
 800371a:	04d9      	lsls	r1, r3, #19
 800371c:	4b39      	ldr	r3, [pc, #228]	; (8003804 <USB_EPStartXfer+0x484>)
 800371e:	400b      	ands	r3, r1
 8003720:	69b9      	ldr	r1, [r7, #24]
 8003722:	0148      	lsls	r0, r1, #5
 8003724:	69f9      	ldr	r1, [r7, #28]
 8003726:	4401      	add	r1, r0
 8003728:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800372c:	4313      	orrs	r3, r2
 800372e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	015a      	lsls	r2, r3, #5
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	4413      	add	r3, r2
 8003738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800373c:	691a      	ldr	r2, [r3, #16]
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	8af9      	ldrh	r1, [r7, #22]
 8003744:	fb01 f303 	mul.w	r3, r1, r3
 8003748:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800374c:	69b9      	ldr	r1, [r7, #24]
 800374e:	0148      	lsls	r0, r1, #5
 8003750:	69f9      	ldr	r1, [r7, #28]
 8003752:	4401      	add	r1, r0
 8003754:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003758:	4313      	orrs	r3, r2
 800375a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800375c:	79fb      	ldrb	r3, [r7, #7]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d10d      	bne.n	800377e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d009      	beq.n	800377e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	68d9      	ldr	r1, [r3, #12]
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	015a      	lsls	r2, r3, #5
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	4413      	add	r3, r2
 8003776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800377a:	460a      	mov	r2, r1
 800377c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	78db      	ldrb	r3, [r3, #3]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d128      	bne.n	80037d8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003792:	2b00      	cmp	r3, #0
 8003794:	d110      	bne.n	80037b8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	015a      	lsls	r2, r3, #5
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	4413      	add	r3, r2
 800379e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	0151      	lsls	r1, r2, #5
 80037a8:	69fa      	ldr	r2, [r7, #28]
 80037aa:	440a      	add	r2, r1
 80037ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80037b4:	6013      	str	r3, [r2, #0]
 80037b6:	e00f      	b.n	80037d8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	015a      	lsls	r2, r3, #5
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	4413      	add	r3, r2
 80037c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	0151      	lsls	r1, r2, #5
 80037ca:	69fa      	ldr	r2, [r7, #28]
 80037cc:	440a      	add	r2, r1
 80037ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037d6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	015a      	lsls	r2, r3, #5
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	4413      	add	r3, r2
 80037e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	0151      	lsls	r1, r2, #5
 80037ea:	69fa      	ldr	r2, [r7, #28]
 80037ec:	440a      	add	r2, r1
 80037ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80037f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3720      	adds	r7, #32
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	1ff80000 	.word	0x1ff80000

08003808 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003808:	b480      	push	{r7}
 800380a:	b087      	sub	sp, #28
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	4613      	mov	r3, r2
 8003814:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	785b      	ldrb	r3, [r3, #1]
 8003824:	2b01      	cmp	r3, #1
 8003826:	f040 80cd 	bne.w	80039c4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d132      	bne.n	8003898 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	015a      	lsls	r2, r3, #5
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	4413      	add	r3, r2
 800383a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	0151      	lsls	r1, r2, #5
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	440a      	add	r2, r1
 8003848:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800384c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003850:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003854:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	015a      	lsls	r2, r3, #5
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	4413      	add	r3, r2
 800385e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	0151      	lsls	r1, r2, #5
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	440a      	add	r2, r1
 800386c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003870:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003874:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	015a      	lsls	r2, r3, #5
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	4413      	add	r3, r2
 800387e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	0151      	lsls	r1, r2, #5
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	440a      	add	r2, r1
 800388c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003890:	0cdb      	lsrs	r3, r3, #19
 8003892:	04db      	lsls	r3, r3, #19
 8003894:	6113      	str	r3, [r2, #16]
 8003896:	e04e      	b.n	8003936 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	015a      	lsls	r2, r3, #5
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	4413      	add	r3, r2
 80038a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	0151      	lsls	r1, r2, #5
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	440a      	add	r2, r1
 80038ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038b2:	0cdb      	lsrs	r3, r3, #19
 80038b4:	04db      	lsls	r3, r3, #19
 80038b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	015a      	lsls	r2, r3, #5
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	4413      	add	r3, r2
 80038c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	693a      	ldr	r2, [r7, #16]
 80038c8:	0151      	lsls	r1, r2, #5
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	440a      	add	r2, r1
 80038ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80038d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80038da:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	695a      	ldr	r2, [r3, #20]
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d903      	bls.n	80038f0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	689a      	ldr	r2, [r3, #8]
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	015a      	lsls	r2, r3, #5
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	4413      	add	r3, r2
 80038f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	0151      	lsls	r1, r2, #5
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	440a      	add	r2, r1
 8003906:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800390a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800390e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	015a      	lsls	r2, r3, #5
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	4413      	add	r3, r2
 8003918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800391c:	691a      	ldr	r2, [r3, #16]
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003926:	6939      	ldr	r1, [r7, #16]
 8003928:	0148      	lsls	r0, r1, #5
 800392a:	6979      	ldr	r1, [r7, #20]
 800392c:	4401      	add	r1, r0
 800392e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003932:	4313      	orrs	r3, r2
 8003934:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003936:	79fb      	ldrb	r3, [r7, #7]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d11e      	bne.n	800397a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d009      	beq.n	8003958 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	015a      	lsls	r2, r3, #5
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	4413      	add	r3, r2
 800394c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003950:	461a      	mov	r2, r3
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	015a      	lsls	r2, r3, #5
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	4413      	add	r3, r2
 8003960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	0151      	lsls	r1, r2, #5
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	440a      	add	r2, r1
 800396e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003972:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003976:	6013      	str	r3, [r2, #0]
 8003978:	e092      	b.n	8003aa0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	015a      	lsls	r2, r3, #5
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	4413      	add	r3, r2
 8003982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	0151      	lsls	r1, r2, #5
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	440a      	add	r2, r1
 8003990:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003994:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003998:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d07e      	beq.n	8003aa0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	f003 030f 	and.w	r3, r3, #15
 80039b2:	2101      	movs	r1, #1
 80039b4:	fa01 f303 	lsl.w	r3, r1, r3
 80039b8:	6979      	ldr	r1, [r7, #20]
 80039ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039be:	4313      	orrs	r3, r2
 80039c0:	634b      	str	r3, [r1, #52]	; 0x34
 80039c2:	e06d      	b.n	8003aa0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	015a      	lsls	r2, r3, #5
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	4413      	add	r3, r2
 80039cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	0151      	lsls	r1, r2, #5
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	440a      	add	r2, r1
 80039da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039de:	0cdb      	lsrs	r3, r3, #19
 80039e0:	04db      	lsls	r3, r3, #19
 80039e2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	015a      	lsls	r2, r3, #5
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	4413      	add	r3, r2
 80039ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	0151      	lsls	r1, r2, #5
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	440a      	add	r2, r1
 80039fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039fe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003a02:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a06:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d003      	beq.n	8003a18 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	689a      	ldr	r2, [r3, #8]
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	015a      	lsls	r2, r3, #5
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	4413      	add	r3, r2
 8003a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	0151      	lsls	r1, r2, #5
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	440a      	add	r2, r1
 8003a2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a36:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	015a      	lsls	r2, r3, #5
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	4413      	add	r3, r2
 8003a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a44:	691a      	ldr	r2, [r3, #16]
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a4e:	6939      	ldr	r1, [r7, #16]
 8003a50:	0148      	lsls	r0, r1, #5
 8003a52:	6979      	ldr	r1, [r7, #20]
 8003a54:	4401      	add	r1, r0
 8003a56:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003a5e:	79fb      	ldrb	r3, [r7, #7]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d10d      	bne.n	8003a80 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d009      	beq.n	8003a80 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	68d9      	ldr	r1, [r3, #12]
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	015a      	lsls	r2, r3, #5
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	4413      	add	r3, r2
 8003a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a7c:	460a      	mov	r2, r1
 8003a7e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	015a      	lsls	r2, r3, #5
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	4413      	add	r3, r2
 8003a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	0151      	lsls	r1, r2, #5
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	440a      	add	r2, r1
 8003a96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a9a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	371c      	adds	r7, #28
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr

08003aae <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b089      	sub	sp, #36	; 0x24
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	60f8      	str	r0, [r7, #12]
 8003ab6:	60b9      	str	r1, [r7, #8]
 8003ab8:	4611      	mov	r1, r2
 8003aba:	461a      	mov	r2, r3
 8003abc:	460b      	mov	r3, r1
 8003abe:	71fb      	strb	r3, [r7, #7]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003acc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d123      	bne.n	8003b1c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003ad4:	88bb      	ldrh	r3, [r7, #4]
 8003ad6:	3303      	adds	r3, #3
 8003ad8:	089b      	lsrs	r3, r3, #2
 8003ada:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003adc:	2300      	movs	r3, #0
 8003ade:	61bb      	str	r3, [r7, #24]
 8003ae0:	e018      	b.n	8003b14 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003ae2:	79fb      	ldrb	r3, [r7, #7]
 8003ae4:	031a      	lsls	r2, r3, #12
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	4413      	add	r3, r2
 8003aea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aee:	461a      	mov	r2, r3
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	3301      	adds	r3, #1
 8003afa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	3301      	adds	r3, #1
 8003b00:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	3301      	adds	r3, #1
 8003b06:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	3301      	adds	r3, #1
 8003b12:	61bb      	str	r3, [r7, #24]
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d3e2      	bcc.n	8003ae2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3724      	adds	r7, #36	; 0x24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b08b      	sub	sp, #44	; 0x2c
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	60f8      	str	r0, [r7, #12]
 8003b32:	60b9      	str	r1, [r7, #8]
 8003b34:	4613      	mov	r3, r2
 8003b36:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003b40:	88fb      	ldrh	r3, [r7, #6]
 8003b42:	089b      	lsrs	r3, r3, #2
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003b48:	88fb      	ldrh	r3, [r7, #6]
 8003b4a:	f003 0303 	and.w	r3, r3, #3
 8003b4e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003b50:	2300      	movs	r3, #0
 8003b52:	623b      	str	r3, [r7, #32]
 8003b54:	e014      	b.n	8003b80 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b60:	601a      	str	r2, [r3, #0]
    pDest++;
 8003b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b64:	3301      	adds	r3, #1
 8003b66:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b70:	3301      	adds	r3, #1
 8003b72:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b76:	3301      	adds	r3, #1
 8003b78:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003b7a:	6a3b      	ldr	r3, [r7, #32]
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	623b      	str	r3, [r7, #32]
 8003b80:	6a3a      	ldr	r2, [r7, #32]
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d3e6      	bcc.n	8003b56 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003b88:	8bfb      	ldrh	r3, [r7, #30]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d01e      	beq.n	8003bcc <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b98:	461a      	mov	r2, r3
 8003b9a:	f107 0310 	add.w	r3, r7, #16
 8003b9e:	6812      	ldr	r2, [r2, #0]
 8003ba0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	6a3b      	ldr	r3, [r7, #32]
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	00db      	lsls	r3, r3, #3
 8003baa:	fa22 f303 	lsr.w	r3, r2, r3
 8003bae:	b2da      	uxtb	r2, r3
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb2:	701a      	strb	r2, [r3, #0]
      i++;
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	623b      	str	r3, [r7, #32]
      pDest++;
 8003bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003bc0:	8bfb      	ldrh	r3, [r7, #30]
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003bc6:	8bfb      	ldrh	r3, [r7, #30]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1ea      	bne.n	8003ba2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	372c      	adds	r7, #44	; 0x2c
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b085      	sub	sp, #20
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
 8003be2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	785b      	ldrb	r3, [r3, #1]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d12c      	bne.n	8003c50 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	015a      	lsls	r2, r3, #5
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	db12      	blt.n	8003c2e <USB_EPSetStall+0x54>
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00f      	beq.n	8003c2e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	015a      	lsls	r2, r3, #5
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	4413      	add	r3, r2
 8003c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68ba      	ldr	r2, [r7, #8]
 8003c1e:	0151      	lsls	r1, r2, #5
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	440a      	add	r2, r1
 8003c24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c28:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c2c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	015a      	lsls	r2, r3, #5
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	4413      	add	r3, r2
 8003c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	0151      	lsls	r1, r2, #5
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	440a      	add	r2, r1
 8003c44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c4c:	6013      	str	r3, [r2, #0]
 8003c4e:	e02b      	b.n	8003ca8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	015a      	lsls	r2, r3, #5
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4413      	add	r3, r2
 8003c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	db12      	blt.n	8003c88 <USB_EPSetStall+0xae>
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00f      	beq.n	8003c88 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	015a      	lsls	r2, r3, #5
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	4413      	add	r3, r2
 8003c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	0151      	lsls	r1, r2, #5
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	440a      	add	r2, r1
 8003c7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c82:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c86:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	015a      	lsls	r2, r3, #5
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4413      	add	r3, r2
 8003c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	0151      	lsls	r1, r2, #5
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	440a      	add	r2, r1
 8003c9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ca2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ca6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3714      	adds	r7, #20
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr

08003cb6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b085      	sub	sp, #20
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
 8003cbe:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	785b      	ldrb	r3, [r3, #1]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d128      	bne.n	8003d24 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	015a      	lsls	r2, r3, #5
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	4413      	add	r3, r2
 8003cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68ba      	ldr	r2, [r7, #8]
 8003ce2:	0151      	lsls	r1, r2, #5
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	440a      	add	r2, r1
 8003ce8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003cf0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	78db      	ldrb	r3, [r3, #3]
 8003cf6:	2b03      	cmp	r3, #3
 8003cf8:	d003      	beq.n	8003d02 <USB_EPClearStall+0x4c>
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	78db      	ldrb	r3, [r3, #3]
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d138      	bne.n	8003d74 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	015a      	lsls	r2, r3, #5
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	4413      	add	r3, r2
 8003d0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	0151      	lsls	r1, r2, #5
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	440a      	add	r2, r1
 8003d18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d20:	6013      	str	r3, [r2, #0]
 8003d22:	e027      	b.n	8003d74 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	015a      	lsls	r2, r3, #5
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	0151      	lsls	r1, r2, #5
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	440a      	add	r2, r1
 8003d3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d42:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	78db      	ldrb	r3, [r3, #3]
 8003d48:	2b03      	cmp	r3, #3
 8003d4a:	d003      	beq.n	8003d54 <USB_EPClearStall+0x9e>
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	78db      	ldrb	r3, [r3, #3]
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d10f      	bne.n	8003d74 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	015a      	lsls	r2, r3, #5
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68ba      	ldr	r2, [r7, #8]
 8003d64:	0151      	lsls	r1, r2, #5
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	440a      	add	r2, r1
 8003d6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d72:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3714      	adds	r7, #20
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b085      	sub	sp, #20
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003da0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003da4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	78fb      	ldrb	r3, [r7, #3]
 8003db0:	011b      	lsls	r3, r3, #4
 8003db2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003db6:	68f9      	ldr	r1, [r7, #12]
 8003db8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3714      	adds	r7, #20
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr

08003dce <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b085      	sub	sp, #20
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003de8:	f023 0303 	bic.w	r3, r3, #3
 8003dec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dfc:	f023 0302 	bic.w	r3, r3, #2
 8003e00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3714      	adds	r7, #20
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003e2a:	f023 0303 	bic.w	r3, r3, #3
 8003e2e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e3e:	f043 0302 	orr.w	r3, r3, #2
 8003e42:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3714      	adds	r7, #20
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr

08003e52 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003e52:	b480      	push	{r7}
 8003e54:	b085      	sub	sp, #20
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	4013      	ands	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3714      	adds	r7, #20
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e94:	69db      	ldr	r3, [r3, #28]
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	0c1b      	lsrs	r3, r3, #16
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3714      	adds	r7, #20
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	b29b      	uxth	r3, r3
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3714      	adds	r7, #20
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	460b      	mov	r3, r1
 8003eea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003ef0:	78fb      	ldrb	r3, [r7, #3]
 8003ef2:	015a      	lsls	r2, r3, #5
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003f0e:	68bb      	ldr	r3, [r7, #8]
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3714      	adds	r7, #20
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b087      	sub	sp, #28
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	460b      	mov	r3, r1
 8003f26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f3e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003f40:	78fb      	ldrb	r3, [r7, #3]
 8003f42:	f003 030f 	and.w	r3, r3, #15
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	fa22 f303 	lsr.w	r3, r2, r3
 8003f4c:	01db      	lsls	r3, r3, #7
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003f56:	78fb      	ldrb	r3, [r7, #3]
 8003f58:	015a      	lsls	r2, r3, #5
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	4013      	ands	r3, r2
 8003f68:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003f6a:	68bb      	ldr	r3, [r7, #8]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	371c      	adds	r7, #28
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	f003 0301 	and.w	r3, r3, #1
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fae:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003fb2:	f023 0307 	bic.w	r3, r3, #7
 8003fb6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3714      	adds	r7, #20
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
	...

08003fdc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b087      	sub	sp, #28
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	607a      	str	r2, [r7, #4]
 8003fe8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	333c      	adds	r3, #60	; 0x3c
 8003ff2:	3304      	adds	r3, #4
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	4a26      	ldr	r2, [pc, #152]	; (8004094 <USB_EP0_OutStart+0xb8>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d90a      	bls.n	8004016 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800400c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004010:	d101      	bne.n	8004016 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004012:	2300      	movs	r3, #0
 8004014:	e037      	b.n	8004086 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800401c:	461a      	mov	r2, r3
 800401e:	2300      	movs	r3, #0
 8004020:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004030:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004034:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004044:	f043 0318 	orr.w	r3, r3, #24
 8004048:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004058:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800405c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800405e:	7afb      	ldrb	r3, [r7, #11]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d10f      	bne.n	8004084 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800406a:	461a      	mov	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800407e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004082:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	371c      	adds	r7, #28
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	4f54300a 	.word	0x4f54300a

08004098 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80040a0:	2300      	movs	r3, #0
 80040a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	3301      	adds	r3, #1
 80040a8:	60fb      	str	r3, [r7, #12]
 80040aa:	4a13      	ldr	r2, [pc, #76]	; (80040f8 <USB_CoreReset+0x60>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d901      	bls.n	80040b4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e01a      	b.n	80040ea <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	daf3      	bge.n	80040a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80040bc:	2300      	movs	r3, #0
 80040be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	f043 0201 	orr.w	r2, r3, #1
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	3301      	adds	r3, #1
 80040d0:	60fb      	str	r3, [r7, #12]
 80040d2:	4a09      	ldr	r2, [pc, #36]	; (80040f8 <USB_CoreReset+0x60>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d901      	bls.n	80040dc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e006      	b.n	80040ea <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d0f1      	beq.n	80040cc <USB_CoreReset+0x34>

  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3714      	adds	r7, #20
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	00030d40 	.word	0x00030d40

080040fc <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	460b      	mov	r3, r1
 8004106:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8004108:	2010      	movs	r0, #16
 800410a:	f001 ff0d 	bl	8005f28 <USBD_static_malloc>
 800410e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d105      	bne.n	8004122 <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800411e:	2302      	movs	r3, #2
 8004120:	e01b      	b.n	800415a <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	7c1b      	ldrb	r3, [r3, #16]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d103      	bne.n	800413a <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2207      	movs	r2, #7
 8004136:	875a      	strh	r2, [r3, #58]	; 0x3a
 8004138:	e002      	b.n	8004140 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	220a      	movs	r2, #10
 800413e:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8004140:	2304      	movs	r3, #4
 8004142:	2203      	movs	r2, #3
 8004144:	2181      	movs	r1, #129	; 0x81
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f001 fddd 	bl	8005d06 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b082      	sub	sp, #8
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
 800416a:	460b      	mov	r3, r1
 800416c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800416e:	2181      	movs	r1, #129	; 0x81
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f001 fdee 	bl	8005d52 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004188:	2b00      	cmp	r3, #0
 800418a:	d009      	beq.n	80041a0 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004192:	4618      	mov	r0, r3
 8004194:	f001 fed6 	bl	8005f44 <USBD_static_free>
    pdev->pClassData = NULL;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
	...

080041ac <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80041bc:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80041be:	2300      	movs	r3, #0
 80041c0:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80041c2:	2300      	movs	r3, #0
 80041c4:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d101      	bne.n	80041d0 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e0e8      	b.n	80043a2 <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d046      	beq.n	800426a <USBD_HID_Setup+0xbe>
 80041dc:	2b20      	cmp	r3, #32
 80041de:	f040 80d8 	bne.w	8004392 <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	785b      	ldrb	r3, [r3, #1]
 80041e6:	3b02      	subs	r3, #2
 80041e8:	2b09      	cmp	r3, #9
 80041ea:	d836      	bhi.n	800425a <USBD_HID_Setup+0xae>
 80041ec:	a201      	add	r2, pc, #4	; (adr r2, 80041f4 <USBD_HID_Setup+0x48>)
 80041ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f2:	bf00      	nop
 80041f4:	0800424b 	.word	0x0800424b
 80041f8:	0800422b 	.word	0x0800422b
 80041fc:	0800425b 	.word	0x0800425b
 8004200:	0800425b 	.word	0x0800425b
 8004204:	0800425b 	.word	0x0800425b
 8004208:	0800425b 	.word	0x0800425b
 800420c:	0800425b 	.word	0x0800425b
 8004210:	0800425b 	.word	0x0800425b
 8004214:	08004239 	.word	0x08004239
 8004218:	0800421d 	.word	0x0800421d
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	885b      	ldrh	r3, [r3, #2]
 8004220:	b2db      	uxtb	r3, r3
 8004222:	461a      	mov	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	601a      	str	r2, [r3, #0]
          break;
 8004228:	e01e      	b.n	8004268 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2201      	movs	r2, #1
 800422e:	4619      	mov	r1, r3
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f001 fa22 	bl	800567a <USBD_CtlSendData>
          break;
 8004236:	e017      	b.n	8004268 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	885b      	ldrh	r3, [r3, #2]
 800423c:	0a1b      	lsrs	r3, r3, #8
 800423e:	b29b      	uxth	r3, r3
 8004240:	b2db      	uxtb	r3, r3
 8004242:	461a      	mov	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	605a      	str	r2, [r3, #4]
          break;
 8004248:	e00e      	b.n	8004268 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	3304      	adds	r3, #4
 800424e:	2201      	movs	r2, #1
 8004250:	4619      	mov	r1, r3
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f001 fa11 	bl	800567a <USBD_CtlSendData>
          break;
 8004258:	e006      	b.n	8004268 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800425a:	6839      	ldr	r1, [r7, #0]
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f001 f99b 	bl	8005598 <USBD_CtlError>
          ret = USBD_FAIL;
 8004262:	2303      	movs	r3, #3
 8004264:	75fb      	strb	r3, [r7, #23]
          break;
 8004266:	bf00      	nop
      }
      break;
 8004268:	e09a      	b.n	80043a0 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	785b      	ldrb	r3, [r3, #1]
 800426e:	2b0b      	cmp	r3, #11
 8004270:	f200 8086 	bhi.w	8004380 <USBD_HID_Setup+0x1d4>
 8004274:	a201      	add	r2, pc, #4	; (adr r2, 800427c <USBD_HID_Setup+0xd0>)
 8004276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800427a:	bf00      	nop
 800427c:	080042ad 	.word	0x080042ad
 8004280:	0800438f 	.word	0x0800438f
 8004284:	08004381 	.word	0x08004381
 8004288:	08004381 	.word	0x08004381
 800428c:	08004381 	.word	0x08004381
 8004290:	08004381 	.word	0x08004381
 8004294:	080042d7 	.word	0x080042d7
 8004298:	08004381 	.word	0x08004381
 800429c:	08004381 	.word	0x08004381
 80042a0:	08004381 	.word	0x08004381
 80042a4:	0800432f 	.word	0x0800432f
 80042a8:	08004359 	.word	0x08004359
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2b03      	cmp	r3, #3
 80042b6:	d107      	bne.n	80042c8 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80042b8:	f107 030a 	add.w	r3, r7, #10
 80042bc:	2202      	movs	r2, #2
 80042be:	4619      	mov	r1, r3
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f001 f9da 	bl	800567a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80042c6:	e063      	b.n	8004390 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 80042c8:	6839      	ldr	r1, [r7, #0]
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f001 f964 	bl	8005598 <USBD_CtlError>
            ret = USBD_FAIL;
 80042d0:	2303      	movs	r3, #3
 80042d2:	75fb      	strb	r3, [r7, #23]
          break;
 80042d4:	e05c      	b.n	8004390 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	885b      	ldrh	r3, [r3, #2]
 80042da:	0a1b      	lsrs	r3, r3, #8
 80042dc:	b29b      	uxth	r3, r3
 80042de:	2b22      	cmp	r3, #34	; 0x22
 80042e0:	d108      	bne.n	80042f4 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	88db      	ldrh	r3, [r3, #6]
 80042e6:	2b3f      	cmp	r3, #63	; 0x3f
 80042e8:	bf28      	it	cs
 80042ea:	233f      	movcs	r3, #63	; 0x3f
 80042ec:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 80042ee:	4b2f      	ldr	r3, [pc, #188]	; (80043ac <USBD_HID_Setup+0x200>)
 80042f0:	613b      	str	r3, [r7, #16]
 80042f2:	e015      	b.n	8004320 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	885b      	ldrh	r3, [r3, #2]
 80042f8:	0a1b      	lsrs	r3, r3, #8
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	2b21      	cmp	r3, #33	; 0x21
 80042fe:	d108      	bne.n	8004312 <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 8004300:	4b2b      	ldr	r3, [pc, #172]	; (80043b0 <USBD_HID_Setup+0x204>)
 8004302:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	88db      	ldrh	r3, [r3, #6]
 8004308:	2b09      	cmp	r3, #9
 800430a:	bf28      	it	cs
 800430c:	2309      	movcs	r3, #9
 800430e:	82bb      	strh	r3, [r7, #20]
 8004310:	e006      	b.n	8004320 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8004312:	6839      	ldr	r1, [r7, #0]
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f001 f93f 	bl	8005598 <USBD_CtlError>
            ret = USBD_FAIL;
 800431a:	2303      	movs	r3, #3
 800431c:	75fb      	strb	r3, [r7, #23]
            break;
 800431e:	e037      	b.n	8004390 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8004320:	8abb      	ldrh	r3, [r7, #20]
 8004322:	461a      	mov	r2, r3
 8004324:	6939      	ldr	r1, [r7, #16]
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f001 f9a7 	bl	800567a <USBD_CtlSendData>
          break;
 800432c:	e030      	b.n	8004390 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b03      	cmp	r3, #3
 8004338:	d107      	bne.n	800434a <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	3308      	adds	r3, #8
 800433e:	2201      	movs	r2, #1
 8004340:	4619      	mov	r1, r3
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f001 f999 	bl	800567a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004348:	e022      	b.n	8004390 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800434a:	6839      	ldr	r1, [r7, #0]
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f001 f923 	bl	8005598 <USBD_CtlError>
            ret = USBD_FAIL;
 8004352:	2303      	movs	r3, #3
 8004354:	75fb      	strb	r3, [r7, #23]
          break;
 8004356:	e01b      	b.n	8004390 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b03      	cmp	r3, #3
 8004362:	d106      	bne.n	8004372 <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	885b      	ldrh	r3, [r3, #2]
 8004368:	b2db      	uxtb	r3, r3
 800436a:	461a      	mov	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004370:	e00e      	b.n	8004390 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8004372:	6839      	ldr	r1, [r7, #0]
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f001 f90f 	bl	8005598 <USBD_CtlError>
            ret = USBD_FAIL;
 800437a:	2303      	movs	r3, #3
 800437c:	75fb      	strb	r3, [r7, #23]
          break;
 800437e:	e007      	b.n	8004390 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004380:	6839      	ldr	r1, [r7, #0]
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f001 f908 	bl	8005598 <USBD_CtlError>
          ret = USBD_FAIL;
 8004388:	2303      	movs	r3, #3
 800438a:	75fb      	strb	r3, [r7, #23]
          break;
 800438c:	e000      	b.n	8004390 <USBD_HID_Setup+0x1e4>
          break;
 800438e:	bf00      	nop
      }
      break;
 8004390:	e006      	b.n	80043a0 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 8004392:	6839      	ldr	r1, [r7, #0]
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f001 f8ff 	bl	8005598 <USBD_CtlError>
      ret = USBD_FAIL;
 800439a:	2303      	movs	r3, #3
 800439c:	75fb      	strb	r3, [r7, #23]
      break;
 800439e:	bf00      	nop
  }

  return (uint8_t)ret;
 80043a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3718      	adds	r7, #24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	200000c8 	.word	0x200000c8
 80043b0:	200000b0 	.word	0x200000b0

080043b4 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	4613      	mov	r3, r2
 80043c0:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80043c8:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d101      	bne.n	80043d4 <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e013      	b.n	80043fc <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	2b03      	cmp	r3, #3
 80043de:	d10c      	bne.n	80043fa <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	7b1b      	ldrb	r3, [r3, #12]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d108      	bne.n	80043fa <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	2201      	movs	r2, #1
 80043ec:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 80043ee:	88fb      	ldrh	r3, [r7, #6]
 80043f0:	68ba      	ldr	r2, [r7, #8]
 80043f2:	2181      	movs	r1, #129	; 0x81
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f001 fd54 	bl	8005ea2 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3718      	adds	r7, #24
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2222      	movs	r2, #34	; 0x22
 8004410:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8004412:	4b03      	ldr	r3, [pc, #12]	; (8004420 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8004414:	4618      	mov	r0, r3
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	20000044 	.word	0x20000044

08004424 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2222      	movs	r2, #34	; 0x22
 8004430:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8004432:	4b03      	ldr	r3, [pc, #12]	; (8004440 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8004434:	4618      	mov	r0, r3
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr
 8004440:	20000068 	.word	0x20000068

08004444 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2222      	movs	r2, #34	; 0x22
 8004450:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8004452:	4b03      	ldr	r3, [pc, #12]	; (8004460 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8004454:	4618      	mov	r0, r3
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr
 8004460:	2000008c 	.word	0x2000008c

08004464 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	460b      	mov	r3, r1
 800446e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004476:	2200      	movs	r2, #0
 8004478:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	220a      	movs	r2, #10
 8004494:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8004496:	4b03      	ldr	r3, [pc, #12]	; (80044a4 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8004498:	4618      	mov	r0, r3
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr
 80044a4:	200000bc 	.word	0x200000bc

080044a8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	4613      	mov	r3, r2
 80044b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d101      	bne.n	80044c0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80044bc:	2303      	movs	r3, #3
 80044be:	e01f      	b.n	8004500 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d003      	beq.n	80044e6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	68ba      	ldr	r2, [r7, #8]
 80044e2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2201      	movs	r2, #1
 80044ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	79fa      	ldrb	r2, [r7, #7]
 80044f2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f001 fb9f 	bl	8005c38 <USBD_LL_Init>
 80044fa:	4603      	mov	r3, r0
 80044fc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80044fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004500:	4618      	mov	r0, r3
 8004502:	3718      	adds	r7, #24
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004512:	2300      	movs	r3, #0
 8004514:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d101      	bne.n	8004520 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800451c:	2303      	movs	r3, #3
 800451e:	e016      	b.n	800454e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800452e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00b      	beq.n	800454c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800453a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453c:	f107 020e 	add.w	r2, r7, #14
 8004540:	4610      	mov	r0, r2
 8004542:	4798      	blx	r3
 8004544:	4602      	mov	r2, r0
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004556:	b580      	push	{r7, lr}
 8004558:	b082      	sub	sp, #8
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f001 fbb6 	bl	8005cd0 <USBD_LL_Start>
 8004564:	4603      	mov	r3, r0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3708      	adds	r7, #8
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800456e:	b480      	push	{r7}
 8004570:	b083      	sub	sp, #12
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	460b      	mov	r3, r1
 800458e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004590:	2303      	movs	r3, #3
 8004592:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800459a:	2b00      	cmp	r3, #0
 800459c:	d009      	beq.n	80045b2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	78fa      	ldrb	r2, [r7, #3]
 80045a8:	4611      	mov	r1, r2
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	4798      	blx	r3
 80045ae:	4603      	mov	r3, r0
 80045b0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80045b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	460b      	mov	r3, r1
 80045c6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d007      	beq.n	80045e2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	78fa      	ldrb	r2, [r7, #3]
 80045dc:	4611      	mov	r1, r2
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	4798      	blx	r3
  }

  return USBD_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3708      	adds	r7, #8
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80045fc:	6839      	ldr	r1, [r7, #0]
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 ff90 	bl	8005524 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004612:	461a      	mov	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004620:	f003 031f 	and.w	r3, r3, #31
 8004624:	2b02      	cmp	r3, #2
 8004626:	d01a      	beq.n	800465e <USBD_LL_SetupStage+0x72>
 8004628:	2b02      	cmp	r3, #2
 800462a:	d822      	bhi.n	8004672 <USBD_LL_SetupStage+0x86>
 800462c:	2b00      	cmp	r3, #0
 800462e:	d002      	beq.n	8004636 <USBD_LL_SetupStage+0x4a>
 8004630:	2b01      	cmp	r3, #1
 8004632:	d00a      	beq.n	800464a <USBD_LL_SetupStage+0x5e>
 8004634:	e01d      	b.n	8004672 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800463c:	4619      	mov	r1, r3
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 fa62 	bl	8004b08 <USBD_StdDevReq>
 8004644:	4603      	mov	r3, r0
 8004646:	73fb      	strb	r3, [r7, #15]
      break;
 8004648:	e020      	b.n	800468c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004650:	4619      	mov	r1, r3
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 fac6 	bl	8004be4 <USBD_StdItfReq>
 8004658:	4603      	mov	r3, r0
 800465a:	73fb      	strb	r3, [r7, #15]
      break;
 800465c:	e016      	b.n	800468c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004664:	4619      	mov	r1, r3
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 fb05 	bl	8004c76 <USBD_StdEPReq>
 800466c:	4603      	mov	r3, r0
 800466e:	73fb      	strb	r3, [r7, #15]
      break;
 8004670:	e00c      	b.n	800468c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004678:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800467c:	b2db      	uxtb	r3, r3
 800467e:	4619      	mov	r1, r3
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f001 fb85 	bl	8005d90 <USBD_LL_StallEP>
 8004686:	4603      	mov	r3, r0
 8004688:	73fb      	strb	r3, [r7, #15]
      break;
 800468a:	bf00      	nop
  }

  return ret;
 800468c:	7bfb      	ldrb	r3, [r7, #15]
}
 800468e:	4618      	mov	r0, r3
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b086      	sub	sp, #24
 800469a:	af00      	add	r7, sp, #0
 800469c:	60f8      	str	r0, [r7, #12]
 800469e:	460b      	mov	r3, r1
 80046a0:	607a      	str	r2, [r7, #4]
 80046a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80046a4:	7afb      	ldrb	r3, [r7, #11]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d138      	bne.n	800471c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80046b0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80046b8:	2b03      	cmp	r3, #3
 80046ba:	d14a      	bne.n	8004752 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	689a      	ldr	r2, [r3, #8]
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d913      	bls.n	80046f0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	689a      	ldr	r2, [r3, #8]
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	1ad2      	subs	r2, r2, r3
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	68da      	ldr	r2, [r3, #12]
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	4293      	cmp	r3, r2
 80046e0:	bf28      	it	cs
 80046e2:	4613      	movcs	r3, r2
 80046e4:	461a      	mov	r2, r3
 80046e6:	6879      	ldr	r1, [r7, #4]
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	f000 fff2 	bl	80056d2 <USBD_CtlContinueRx>
 80046ee:	e030      	b.n	8004752 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b03      	cmp	r3, #3
 80046fa:	d10b      	bne.n	8004714 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d005      	beq.n	8004714 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f000 ffed 	bl	80056f4 <USBD_CtlSendStatus>
 800471a:	e01a      	b.n	8004752 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b03      	cmp	r3, #3
 8004726:	d114      	bne.n	8004752 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00e      	beq.n	8004752 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	7afa      	ldrb	r2, [r7, #11]
 800473e:	4611      	mov	r1, r2
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	4798      	blx	r3
 8004744:	4603      	mov	r3, r0
 8004746:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004748:	7dfb      	ldrb	r3, [r7, #23]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800474e:	7dfb      	ldrb	r3, [r7, #23]
 8004750:	e000      	b.n	8004754 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3718      	adds	r7, #24
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	460b      	mov	r3, r1
 8004766:	607a      	str	r2, [r7, #4]
 8004768:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800476a:	7afb      	ldrb	r3, [r7, #11]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d16b      	bne.n	8004848 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	3314      	adds	r3, #20
 8004774:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800477c:	2b02      	cmp	r3, #2
 800477e:	d156      	bne.n	800482e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	429a      	cmp	r2, r3
 800478a:	d914      	bls.n	80047b6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	689a      	ldr	r2, [r3, #8]
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	1ad2      	subs	r2, r2, r3
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	461a      	mov	r2, r3
 80047a0:	6879      	ldr	r1, [r7, #4]
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f000 ff84 	bl	80056b0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80047a8:	2300      	movs	r3, #0
 80047aa:	2200      	movs	r2, #0
 80047ac:	2100      	movs	r1, #0
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f001 fb98 	bl	8005ee4 <USBD_LL_PrepareReceive>
 80047b4:	e03b      	b.n	800482e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	68da      	ldr	r2, [r3, #12]
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d11c      	bne.n	80047fc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d316      	bcc.n	80047fc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	685a      	ldr	r2, [r3, #4]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80047d8:	429a      	cmp	r2, r3
 80047da:	d20f      	bcs.n	80047fc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80047dc:	2200      	movs	r2, #0
 80047de:	2100      	movs	r1, #0
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f000 ff65 	bl	80056b0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80047ee:	2300      	movs	r3, #0
 80047f0:	2200      	movs	r2, #0
 80047f2:	2100      	movs	r1, #0
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f001 fb75 	bl	8005ee4 <USBD_LL_PrepareReceive>
 80047fa:	e018      	b.n	800482e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b03      	cmp	r3, #3
 8004806:	d10b      	bne.n	8004820 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d005      	beq.n	8004820 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004820:	2180      	movs	r1, #128	; 0x80
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f001 fab4 	bl	8005d90 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f000 ff76 	bl	800571a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004834:	2b01      	cmp	r3, #1
 8004836:	d122      	bne.n	800487e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f7ff fe98 	bl	800456e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004846:	e01a      	b.n	800487e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800484e:	b2db      	uxtb	r3, r3
 8004850:	2b03      	cmp	r3, #3
 8004852:	d114      	bne.n	800487e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00e      	beq.n	800487e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004866:	695b      	ldr	r3, [r3, #20]
 8004868:	7afa      	ldrb	r2, [r7, #11]
 800486a:	4611      	mov	r1, r2
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	4798      	blx	r3
 8004870:	4603      	mov	r3, r0
 8004872:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004874:	7dfb      	ldrb	r3, [r7, #23]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800487a:	7dfb      	ldrb	r3, [r7, #23]
 800487c:	e000      	b.n	8004880 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3718      	adds	r7, #24
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d101      	bne.n	80048bc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e02f      	b.n	800491c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00f      	beq.n	80048e6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d009      	beq.n	80048e6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	6852      	ldr	r2, [r2, #4]
 80048de:	b2d2      	uxtb	r2, r2
 80048e0:	4611      	mov	r1, r2
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80048e6:	2340      	movs	r3, #64	; 0x40
 80048e8:	2200      	movs	r2, #0
 80048ea:	2100      	movs	r1, #0
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f001 fa0a 	bl	8005d06 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2240      	movs	r2, #64	; 0x40
 80048fe:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004902:	2340      	movs	r3, #64	; 0x40
 8004904:	2200      	movs	r2, #0
 8004906:	2180      	movs	r1, #128	; 0x80
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f001 f9fc 	bl	8005d06 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2201      	movs	r2, #1
 8004912:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2240      	movs	r2, #64	; 0x40
 8004918:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	3708      	adds	r7, #8
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	460b      	mov	r3, r1
 800492e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	78fa      	ldrb	r2, [r7, #3]
 8004934:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004952:	b2da      	uxtb	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2204      	movs	r2, #4
 800495e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800497e:	b2db      	uxtb	r3, r3
 8004980:	2b04      	cmp	r3, #4
 8004982:	d106      	bne.n	8004992 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800498a:	b2da      	uxtb	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d101      	bne.n	80049b6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e012      	b.n	80049dc <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b03      	cmp	r3, #3
 80049c0:	d10b      	bne.n	80049da <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d005      	beq.n	80049da <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049d4:	69db      	ldr	r3, [r3, #28]
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3708      	adds	r7, #8
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	460b      	mov	r3, r1
 80049ee:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e014      	b.n	8004a28 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b03      	cmp	r3, #3
 8004a08:	d10d      	bne.n	8004a26 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d007      	beq.n	8004a26 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	78fa      	ldrb	r2, [r7, #3]
 8004a20:	4611      	mov	r1, r2
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3708      	adds	r7, #8
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	460b      	mov	r3, r1
 8004a3a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e014      	b.n	8004a74 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b03      	cmp	r3, #3
 8004a54:	d10d      	bne.n	8004a72 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d007      	beq.n	8004a72 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6a:	78fa      	ldrb	r2, [r7, #3]
 8004a6c:	4611      	mov	r1, r2
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3708      	adds	r7, #8
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b082      	sub	sp, #8
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d009      	beq.n	8004ac0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	6852      	ldr	r2, [r2, #4]
 8004ab8:	b2d2      	uxtb	r2, r2
 8004aba:	4611      	mov	r1, r2
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	4798      	blx	r3
  }

  return USBD_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3708      	adds	r7, #8
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b087      	sub	sp, #28
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004ae8:	8a3b      	ldrh	r3, [r7, #16]
 8004aea:	021b      	lsls	r3, r3, #8
 8004aec:	b21a      	sxth	r2, r3
 8004aee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	b21b      	sxth	r3, r3
 8004af6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8004af8:	89fb      	ldrh	r3, [r7, #14]
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	371c      	adds	r7, #28
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
	...

08004b08 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004b12:	2300      	movs	r3, #0
 8004b14:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004b1e:	2b40      	cmp	r3, #64	; 0x40
 8004b20:	d005      	beq.n	8004b2e <USBD_StdDevReq+0x26>
 8004b22:	2b40      	cmp	r3, #64	; 0x40
 8004b24:	d853      	bhi.n	8004bce <USBD_StdDevReq+0xc6>
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00b      	beq.n	8004b42 <USBD_StdDevReq+0x3a>
 8004b2a:	2b20      	cmp	r3, #32
 8004b2c:	d14f      	bne.n	8004bce <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	6839      	ldr	r1, [r7, #0]
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	4798      	blx	r3
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b40:	e04a      	b.n	8004bd8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	785b      	ldrb	r3, [r3, #1]
 8004b46:	2b09      	cmp	r3, #9
 8004b48:	d83b      	bhi.n	8004bc2 <USBD_StdDevReq+0xba>
 8004b4a:	a201      	add	r2, pc, #4	; (adr r2, 8004b50 <USBD_StdDevReq+0x48>)
 8004b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b50:	08004ba5 	.word	0x08004ba5
 8004b54:	08004bb9 	.word	0x08004bb9
 8004b58:	08004bc3 	.word	0x08004bc3
 8004b5c:	08004baf 	.word	0x08004baf
 8004b60:	08004bc3 	.word	0x08004bc3
 8004b64:	08004b83 	.word	0x08004b83
 8004b68:	08004b79 	.word	0x08004b79
 8004b6c:	08004bc3 	.word	0x08004bc3
 8004b70:	08004b9b 	.word	0x08004b9b
 8004b74:	08004b8d 	.word	0x08004b8d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8004b78:	6839      	ldr	r1, [r7, #0]
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f9de 	bl	8004f3c <USBD_GetDescriptor>
          break;
 8004b80:	e024      	b.n	8004bcc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8004b82:	6839      	ldr	r1, [r7, #0]
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 fb43 	bl	8005210 <USBD_SetAddress>
          break;
 8004b8a:	e01f      	b.n	8004bcc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8004b8c:	6839      	ldr	r1, [r7, #0]
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 fb82 	bl	8005298 <USBD_SetConfig>
 8004b94:	4603      	mov	r3, r0
 8004b96:	73fb      	strb	r3, [r7, #15]
          break;
 8004b98:	e018      	b.n	8004bcc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8004b9a:	6839      	ldr	r1, [r7, #0]
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 fc21 	bl	80053e4 <USBD_GetConfig>
          break;
 8004ba2:	e013      	b.n	8004bcc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8004ba4:	6839      	ldr	r1, [r7, #0]
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 fc52 	bl	8005450 <USBD_GetStatus>
          break;
 8004bac:	e00e      	b.n	8004bcc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8004bae:	6839      	ldr	r1, [r7, #0]
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 fc81 	bl	80054b8 <USBD_SetFeature>
          break;
 8004bb6:	e009      	b.n	8004bcc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8004bb8:	6839      	ldr	r1, [r7, #0]
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 fc90 	bl	80054e0 <USBD_ClrFeature>
          break;
 8004bc0:	e004      	b.n	8004bcc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8004bc2:	6839      	ldr	r1, [r7, #0]
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 fce7 	bl	8005598 <USBD_CtlError>
          break;
 8004bca:	bf00      	nop
      }
      break;
 8004bcc:	e004      	b.n	8004bd8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8004bce:	6839      	ldr	r1, [r7, #0]
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f000 fce1 	bl	8005598 <USBD_CtlError>
      break;
 8004bd6:	bf00      	nop
  }

  return ret;
 8004bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop

08004be4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004bfa:	2b40      	cmp	r3, #64	; 0x40
 8004bfc:	d005      	beq.n	8004c0a <USBD_StdItfReq+0x26>
 8004bfe:	2b40      	cmp	r3, #64	; 0x40
 8004c00:	d82f      	bhi.n	8004c62 <USBD_StdItfReq+0x7e>
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d001      	beq.n	8004c0a <USBD_StdItfReq+0x26>
 8004c06:	2b20      	cmp	r3, #32
 8004c08:	d12b      	bne.n	8004c62 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	3b01      	subs	r3, #1
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d81d      	bhi.n	8004c54 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	889b      	ldrh	r3, [r3, #4]
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d813      	bhi.n	8004c4a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	6839      	ldr	r1, [r7, #0]
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	4798      	blx	r3
 8004c30:	4603      	mov	r3, r0
 8004c32:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	88db      	ldrh	r3, [r3, #6]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d110      	bne.n	8004c5e <USBD_StdItfReq+0x7a>
 8004c3c:	7bfb      	ldrb	r3, [r7, #15]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10d      	bne.n	8004c5e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 fd56 	bl	80056f4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8004c48:	e009      	b.n	8004c5e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8004c4a:	6839      	ldr	r1, [r7, #0]
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 fca3 	bl	8005598 <USBD_CtlError>
          break;
 8004c52:	e004      	b.n	8004c5e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8004c54:	6839      	ldr	r1, [r7, #0]
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 fc9e 	bl	8005598 <USBD_CtlError>
          break;
 8004c5c:	e000      	b.n	8004c60 <USBD_StdItfReq+0x7c>
          break;
 8004c5e:	bf00      	nop
      }
      break;
 8004c60:	e004      	b.n	8004c6c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8004c62:	6839      	ldr	r1, [r7, #0]
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 fc97 	bl	8005598 <USBD_CtlError>
      break;
 8004c6a:	bf00      	nop
  }

  return ret;
 8004c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b084      	sub	sp, #16
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
 8004c7e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004c80:	2300      	movs	r3, #0
 8004c82:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	889b      	ldrh	r3, [r3, #4]
 8004c88:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004c92:	2b40      	cmp	r3, #64	; 0x40
 8004c94:	d007      	beq.n	8004ca6 <USBD_StdEPReq+0x30>
 8004c96:	2b40      	cmp	r3, #64	; 0x40
 8004c98:	f200 8145 	bhi.w	8004f26 <USBD_StdEPReq+0x2b0>
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00c      	beq.n	8004cba <USBD_StdEPReq+0x44>
 8004ca0:	2b20      	cmp	r3, #32
 8004ca2:	f040 8140 	bne.w	8004f26 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	6839      	ldr	r1, [r7, #0]
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	4798      	blx	r3
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	73fb      	strb	r3, [r7, #15]
      break;
 8004cb8:	e13a      	b.n	8004f30 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	785b      	ldrb	r3, [r3, #1]
 8004cbe:	2b03      	cmp	r3, #3
 8004cc0:	d007      	beq.n	8004cd2 <USBD_StdEPReq+0x5c>
 8004cc2:	2b03      	cmp	r3, #3
 8004cc4:	f300 8129 	bgt.w	8004f1a <USBD_StdEPReq+0x2a4>
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d07f      	beq.n	8004dcc <USBD_StdEPReq+0x156>
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d03c      	beq.n	8004d4a <USBD_StdEPReq+0xd4>
 8004cd0:	e123      	b.n	8004f1a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d002      	beq.n	8004ce4 <USBD_StdEPReq+0x6e>
 8004cde:	2b03      	cmp	r3, #3
 8004ce0:	d016      	beq.n	8004d10 <USBD_StdEPReq+0x9a>
 8004ce2:	e02c      	b.n	8004d3e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004ce4:	7bbb      	ldrb	r3, [r7, #14]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00d      	beq.n	8004d06 <USBD_StdEPReq+0x90>
 8004cea:	7bbb      	ldrb	r3, [r7, #14]
 8004cec:	2b80      	cmp	r3, #128	; 0x80
 8004cee:	d00a      	beq.n	8004d06 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004cf0:	7bbb      	ldrb	r3, [r7, #14]
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f001 f84b 	bl	8005d90 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004cfa:	2180      	movs	r1, #128	; 0x80
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f001 f847 	bl	8005d90 <USBD_LL_StallEP>
 8004d02:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004d04:	e020      	b.n	8004d48 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8004d06:	6839      	ldr	r1, [r7, #0]
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 fc45 	bl	8005598 <USBD_CtlError>
              break;
 8004d0e:	e01b      	b.n	8004d48 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	885b      	ldrh	r3, [r3, #2]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10e      	bne.n	8004d36 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004d18:	7bbb      	ldrb	r3, [r7, #14]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00b      	beq.n	8004d36 <USBD_StdEPReq+0xc0>
 8004d1e:	7bbb      	ldrb	r3, [r7, #14]
 8004d20:	2b80      	cmp	r3, #128	; 0x80
 8004d22:	d008      	beq.n	8004d36 <USBD_StdEPReq+0xc0>
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	88db      	ldrh	r3, [r3, #6]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d104      	bne.n	8004d36 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8004d2c:	7bbb      	ldrb	r3, [r7, #14]
 8004d2e:	4619      	mov	r1, r3
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f001 f82d 	bl	8005d90 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 fcdc 	bl	80056f4 <USBD_CtlSendStatus>

              break;
 8004d3c:	e004      	b.n	8004d48 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8004d3e:	6839      	ldr	r1, [r7, #0]
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 fc29 	bl	8005598 <USBD_CtlError>
              break;
 8004d46:	bf00      	nop
          }
          break;
 8004d48:	e0ec      	b.n	8004f24 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d002      	beq.n	8004d5c <USBD_StdEPReq+0xe6>
 8004d56:	2b03      	cmp	r3, #3
 8004d58:	d016      	beq.n	8004d88 <USBD_StdEPReq+0x112>
 8004d5a:	e030      	b.n	8004dbe <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004d5c:	7bbb      	ldrb	r3, [r7, #14]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00d      	beq.n	8004d7e <USBD_StdEPReq+0x108>
 8004d62:	7bbb      	ldrb	r3, [r7, #14]
 8004d64:	2b80      	cmp	r3, #128	; 0x80
 8004d66:	d00a      	beq.n	8004d7e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004d68:	7bbb      	ldrb	r3, [r7, #14]
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f001 f80f 	bl	8005d90 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004d72:	2180      	movs	r1, #128	; 0x80
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f001 f80b 	bl	8005d90 <USBD_LL_StallEP>
 8004d7a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004d7c:	e025      	b.n	8004dca <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8004d7e:	6839      	ldr	r1, [r7, #0]
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 fc09 	bl	8005598 <USBD_CtlError>
              break;
 8004d86:	e020      	b.n	8004dca <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	885b      	ldrh	r3, [r3, #2]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d11b      	bne.n	8004dc8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8004d90:	7bbb      	ldrb	r3, [r7, #14]
 8004d92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d004      	beq.n	8004da4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8004d9a:	7bbb      	ldrb	r3, [r7, #14]
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f001 f815 	bl	8005dce <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 fca5 	bl	80056f4 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	6839      	ldr	r1, [r7, #0]
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	4798      	blx	r3
 8004db8:	4603      	mov	r3, r0
 8004dba:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8004dbc:	e004      	b.n	8004dc8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8004dbe:	6839      	ldr	r1, [r7, #0]
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 fbe9 	bl	8005598 <USBD_CtlError>
              break;
 8004dc6:	e000      	b.n	8004dca <USBD_StdEPReq+0x154>
              break;
 8004dc8:	bf00      	nop
          }
          break;
 8004dca:	e0ab      	b.n	8004f24 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d002      	beq.n	8004dde <USBD_StdEPReq+0x168>
 8004dd8:	2b03      	cmp	r3, #3
 8004dda:	d032      	beq.n	8004e42 <USBD_StdEPReq+0x1cc>
 8004ddc:	e097      	b.n	8004f0e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004dde:	7bbb      	ldrb	r3, [r7, #14]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d007      	beq.n	8004df4 <USBD_StdEPReq+0x17e>
 8004de4:	7bbb      	ldrb	r3, [r7, #14]
 8004de6:	2b80      	cmp	r3, #128	; 0x80
 8004de8:	d004      	beq.n	8004df4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8004dea:	6839      	ldr	r1, [r7, #0]
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 fbd3 	bl	8005598 <USBD_CtlError>
                break;
 8004df2:	e091      	b.n	8004f18 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004df4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	da0b      	bge.n	8004e14 <USBD_StdEPReq+0x19e>
 8004dfc:	7bbb      	ldrb	r3, [r7, #14]
 8004dfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004e02:	4613      	mov	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	4413      	add	r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	3310      	adds	r3, #16
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	4413      	add	r3, r2
 8004e10:	3304      	adds	r3, #4
 8004e12:	e00b      	b.n	8004e2c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004e14:	7bbb      	ldrb	r3, [r7, #14]
 8004e16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	4413      	add	r3, r2
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	4413      	add	r3, r2
 8004e2a:	3304      	adds	r3, #4
 8004e2c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	2200      	movs	r2, #0
 8004e32:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	2202      	movs	r2, #2
 8004e38:	4619      	mov	r1, r3
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 fc1d 	bl	800567a <USBD_CtlSendData>
              break;
 8004e40:	e06a      	b.n	8004f18 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8004e42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	da11      	bge.n	8004e6e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004e4a:	7bbb      	ldrb	r3, [r7, #14]
 8004e4c:	f003 020f 	and.w	r2, r3, #15
 8004e50:	6879      	ldr	r1, [r7, #4]
 8004e52:	4613      	mov	r3, r2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4413      	add	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	440b      	add	r3, r1
 8004e5c:	3324      	adds	r3, #36	; 0x24
 8004e5e:	881b      	ldrh	r3, [r3, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d117      	bne.n	8004e94 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8004e64:	6839      	ldr	r1, [r7, #0]
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 fb96 	bl	8005598 <USBD_CtlError>
                  break;
 8004e6c:	e054      	b.n	8004f18 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004e6e:	7bbb      	ldrb	r3, [r7, #14]
 8004e70:	f003 020f 	and.w	r2, r3, #15
 8004e74:	6879      	ldr	r1, [r7, #4]
 8004e76:	4613      	mov	r3, r2
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	4413      	add	r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	440b      	add	r3, r1
 8004e80:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004e84:	881b      	ldrh	r3, [r3, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d104      	bne.n	8004e94 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8004e8a:	6839      	ldr	r1, [r7, #0]
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 fb83 	bl	8005598 <USBD_CtlError>
                  break;
 8004e92:	e041      	b.n	8004f18 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004e94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	da0b      	bge.n	8004eb4 <USBD_StdEPReq+0x23e>
 8004e9c:	7bbb      	ldrb	r3, [r7, #14]
 8004e9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	4413      	add	r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	3310      	adds	r3, #16
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	4413      	add	r3, r2
 8004eb0:	3304      	adds	r3, #4
 8004eb2:	e00b      	b.n	8004ecc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004eb4:	7bbb      	ldrb	r3, [r7, #14]
 8004eb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004eba:	4613      	mov	r3, r2
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	4413      	add	r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	4413      	add	r3, r2
 8004eca:	3304      	adds	r3, #4
 8004ecc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004ece:	7bbb      	ldrb	r3, [r7, #14]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d002      	beq.n	8004eda <USBD_StdEPReq+0x264>
 8004ed4:	7bbb      	ldrb	r3, [r7, #14]
 8004ed6:	2b80      	cmp	r3, #128	; 0x80
 8004ed8:	d103      	bne.n	8004ee2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	2200      	movs	r2, #0
 8004ede:	601a      	str	r2, [r3, #0]
 8004ee0:	e00e      	b.n	8004f00 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8004ee2:	7bbb      	ldrb	r3, [r7, #14]
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 ff90 	bl	8005e0c <USBD_LL_IsStallEP>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d003      	beq.n	8004efa <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	601a      	str	r2, [r3, #0]
 8004ef8:	e002      	b.n	8004f00 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	2200      	movs	r2, #0
 8004efe:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	2202      	movs	r2, #2
 8004f04:	4619      	mov	r1, r3
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 fbb7 	bl	800567a <USBD_CtlSendData>
              break;
 8004f0c:	e004      	b.n	8004f18 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8004f0e:	6839      	ldr	r1, [r7, #0]
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 fb41 	bl	8005598 <USBD_CtlError>
              break;
 8004f16:	bf00      	nop
          }
          break;
 8004f18:	e004      	b.n	8004f24 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8004f1a:	6839      	ldr	r1, [r7, #0]
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 fb3b 	bl	8005598 <USBD_CtlError>
          break;
 8004f22:	bf00      	nop
      }
      break;
 8004f24:	e004      	b.n	8004f30 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8004f26:	6839      	ldr	r1, [r7, #0]
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 fb35 	bl	8005598 <USBD_CtlError>
      break;
 8004f2e:	bf00      	nop
  }

  return ret;
 8004f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
	...

08004f3c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004f46:	2300      	movs	r3, #0
 8004f48:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	885b      	ldrh	r3, [r3, #2]
 8004f56:	0a1b      	lsrs	r3, r3, #8
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	2b06      	cmp	r3, #6
 8004f5e:	f200 8128 	bhi.w	80051b2 <USBD_GetDescriptor+0x276>
 8004f62:	a201      	add	r2, pc, #4	; (adr r2, 8004f68 <USBD_GetDescriptor+0x2c>)
 8004f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f68:	08004f85 	.word	0x08004f85
 8004f6c:	08004f9d 	.word	0x08004f9d
 8004f70:	08004fdd 	.word	0x08004fdd
 8004f74:	080051b3 	.word	0x080051b3
 8004f78:	080051b3 	.word	0x080051b3
 8004f7c:	08005153 	.word	0x08005153
 8004f80:	0800517f 	.word	0x0800517f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	7c12      	ldrb	r2, [r2, #16]
 8004f90:	f107 0108 	add.w	r1, r7, #8
 8004f94:	4610      	mov	r0, r2
 8004f96:	4798      	blx	r3
 8004f98:	60f8      	str	r0, [r7, #12]
      break;
 8004f9a:	e112      	b.n	80051c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	7c1b      	ldrb	r3, [r3, #16]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d10d      	bne.n	8004fc0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fac:	f107 0208 	add.w	r2, r7, #8
 8004fb0:	4610      	mov	r0, r2
 8004fb2:	4798      	blx	r3
 8004fb4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	3301      	adds	r3, #1
 8004fba:	2202      	movs	r2, #2
 8004fbc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8004fbe:	e100      	b.n	80051c2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc8:	f107 0208 	add.w	r2, r7, #8
 8004fcc:	4610      	mov	r0, r2
 8004fce:	4798      	blx	r3
 8004fd0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	701a      	strb	r2, [r3, #0]
      break;
 8004fda:	e0f2      	b.n	80051c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	885b      	ldrh	r3, [r3, #2]
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b05      	cmp	r3, #5
 8004fe4:	f200 80ac 	bhi.w	8005140 <USBD_GetDescriptor+0x204>
 8004fe8:	a201      	add	r2, pc, #4	; (adr r2, 8004ff0 <USBD_GetDescriptor+0xb4>)
 8004fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fee:	bf00      	nop
 8004ff0:	08005009 	.word	0x08005009
 8004ff4:	0800503d 	.word	0x0800503d
 8004ff8:	08005071 	.word	0x08005071
 8004ffc:	080050a5 	.word	0x080050a5
 8005000:	080050d9 	.word	0x080050d9
 8005004:	0800510d 	.word	0x0800510d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00b      	beq.n	800502c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	7c12      	ldrb	r2, [r2, #16]
 8005020:	f107 0108 	add.w	r1, r7, #8
 8005024:	4610      	mov	r0, r2
 8005026:	4798      	blx	r3
 8005028:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800502a:	e091      	b.n	8005150 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800502c:	6839      	ldr	r1, [r7, #0]
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 fab2 	bl	8005598 <USBD_CtlError>
            err++;
 8005034:	7afb      	ldrb	r3, [r7, #11]
 8005036:	3301      	adds	r3, #1
 8005038:	72fb      	strb	r3, [r7, #11]
          break;
 800503a:	e089      	b.n	8005150 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00b      	beq.n	8005060 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	7c12      	ldrb	r2, [r2, #16]
 8005054:	f107 0108 	add.w	r1, r7, #8
 8005058:	4610      	mov	r0, r2
 800505a:	4798      	blx	r3
 800505c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800505e:	e077      	b.n	8005150 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005060:	6839      	ldr	r1, [r7, #0]
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 fa98 	bl	8005598 <USBD_CtlError>
            err++;
 8005068:	7afb      	ldrb	r3, [r7, #11]
 800506a:	3301      	adds	r3, #1
 800506c:	72fb      	strb	r3, [r7, #11]
          break;
 800506e:	e06f      	b.n	8005150 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00b      	beq.n	8005094 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	7c12      	ldrb	r2, [r2, #16]
 8005088:	f107 0108 	add.w	r1, r7, #8
 800508c:	4610      	mov	r0, r2
 800508e:	4798      	blx	r3
 8005090:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005092:	e05d      	b.n	8005150 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005094:	6839      	ldr	r1, [r7, #0]
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 fa7e 	bl	8005598 <USBD_CtlError>
            err++;
 800509c:	7afb      	ldrb	r3, [r7, #11]
 800509e:	3301      	adds	r3, #1
 80050a0:	72fb      	strb	r3, [r7, #11]
          break;
 80050a2:	e055      	b.n	8005150 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d00b      	beq.n	80050c8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	7c12      	ldrb	r2, [r2, #16]
 80050bc:	f107 0108 	add.w	r1, r7, #8
 80050c0:	4610      	mov	r0, r2
 80050c2:	4798      	blx	r3
 80050c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80050c6:	e043      	b.n	8005150 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80050c8:	6839      	ldr	r1, [r7, #0]
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 fa64 	bl	8005598 <USBD_CtlError>
            err++;
 80050d0:	7afb      	ldrb	r3, [r7, #11]
 80050d2:	3301      	adds	r3, #1
 80050d4:	72fb      	strb	r3, [r7, #11]
          break;
 80050d6:	e03b      	b.n	8005150 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00b      	beq.n	80050fc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050ea:	695b      	ldr	r3, [r3, #20]
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	7c12      	ldrb	r2, [r2, #16]
 80050f0:	f107 0108 	add.w	r1, r7, #8
 80050f4:	4610      	mov	r0, r2
 80050f6:	4798      	blx	r3
 80050f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80050fa:	e029      	b.n	8005150 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80050fc:	6839      	ldr	r1, [r7, #0]
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 fa4a 	bl	8005598 <USBD_CtlError>
            err++;
 8005104:	7afb      	ldrb	r3, [r7, #11]
 8005106:	3301      	adds	r3, #1
 8005108:	72fb      	strb	r3, [r7, #11]
          break;
 800510a:	e021      	b.n	8005150 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005112:	699b      	ldr	r3, [r3, #24]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00b      	beq.n	8005130 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	7c12      	ldrb	r2, [r2, #16]
 8005124:	f107 0108 	add.w	r1, r7, #8
 8005128:	4610      	mov	r0, r2
 800512a:	4798      	blx	r3
 800512c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800512e:	e00f      	b.n	8005150 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005130:	6839      	ldr	r1, [r7, #0]
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 fa30 	bl	8005598 <USBD_CtlError>
            err++;
 8005138:	7afb      	ldrb	r3, [r7, #11]
 800513a:	3301      	adds	r3, #1
 800513c:	72fb      	strb	r3, [r7, #11]
          break;
 800513e:	e007      	b.n	8005150 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005140:	6839      	ldr	r1, [r7, #0]
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 fa28 	bl	8005598 <USBD_CtlError>
          err++;
 8005148:	7afb      	ldrb	r3, [r7, #11]
 800514a:	3301      	adds	r3, #1
 800514c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800514e:	bf00      	nop
      }
      break;
 8005150:	e037      	b.n	80051c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	7c1b      	ldrb	r3, [r3, #16]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d109      	bne.n	800516e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005162:	f107 0208 	add.w	r2, r7, #8
 8005166:	4610      	mov	r0, r2
 8005168:	4798      	blx	r3
 800516a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800516c:	e029      	b.n	80051c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800516e:	6839      	ldr	r1, [r7, #0]
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 fa11 	bl	8005598 <USBD_CtlError>
        err++;
 8005176:	7afb      	ldrb	r3, [r7, #11]
 8005178:	3301      	adds	r3, #1
 800517a:	72fb      	strb	r3, [r7, #11]
      break;
 800517c:	e021      	b.n	80051c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	7c1b      	ldrb	r3, [r3, #16]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10d      	bne.n	80051a2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800518c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518e:	f107 0208 	add.w	r2, r7, #8
 8005192:	4610      	mov	r0, r2
 8005194:	4798      	blx	r3
 8005196:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	3301      	adds	r3, #1
 800519c:	2207      	movs	r2, #7
 800519e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80051a0:	e00f      	b.n	80051c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80051a2:	6839      	ldr	r1, [r7, #0]
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 f9f7 	bl	8005598 <USBD_CtlError>
        err++;
 80051aa:	7afb      	ldrb	r3, [r7, #11]
 80051ac:	3301      	adds	r3, #1
 80051ae:	72fb      	strb	r3, [r7, #11]
      break;
 80051b0:	e007      	b.n	80051c2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80051b2:	6839      	ldr	r1, [r7, #0]
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 f9ef 	bl	8005598 <USBD_CtlError>
      err++;
 80051ba:	7afb      	ldrb	r3, [r7, #11]
 80051bc:	3301      	adds	r3, #1
 80051be:	72fb      	strb	r3, [r7, #11]
      break;
 80051c0:	bf00      	nop
  }

  if (err != 0U)
 80051c2:	7afb      	ldrb	r3, [r7, #11]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d11e      	bne.n	8005206 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	88db      	ldrh	r3, [r3, #6]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d016      	beq.n	80051fe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80051d0:	893b      	ldrh	r3, [r7, #8]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00e      	beq.n	80051f4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	88da      	ldrh	r2, [r3, #6]
 80051da:	893b      	ldrh	r3, [r7, #8]
 80051dc:	4293      	cmp	r3, r2
 80051de:	bf28      	it	cs
 80051e0:	4613      	movcs	r3, r2
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80051e6:	893b      	ldrh	r3, [r7, #8]
 80051e8:	461a      	mov	r2, r3
 80051ea:	68f9      	ldr	r1, [r7, #12]
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 fa44 	bl	800567a <USBD_CtlSendData>
 80051f2:	e009      	b.n	8005208 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80051f4:	6839      	ldr	r1, [r7, #0]
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 f9ce 	bl	8005598 <USBD_CtlError>
 80051fc:	e004      	b.n	8005208 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 fa78 	bl	80056f4 <USBD_CtlSendStatus>
 8005204:	e000      	b.n	8005208 <USBD_GetDescriptor+0x2cc>
    return;
 8005206:	bf00      	nop
  }
}
 8005208:	3710      	adds	r7, #16
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop

08005210 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	889b      	ldrh	r3, [r3, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d131      	bne.n	8005286 <USBD_SetAddress+0x76>
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	88db      	ldrh	r3, [r3, #6]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d12d      	bne.n	8005286 <USBD_SetAddress+0x76>
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	885b      	ldrh	r3, [r3, #2]
 800522e:	2b7f      	cmp	r3, #127	; 0x7f
 8005230:	d829      	bhi.n	8005286 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	885b      	ldrh	r3, [r3, #2]
 8005236:	b2db      	uxtb	r3, r3
 8005238:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800523c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b03      	cmp	r3, #3
 8005248:	d104      	bne.n	8005254 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800524a:	6839      	ldr	r1, [r7, #0]
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 f9a3 	bl	8005598 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005252:	e01d      	b.n	8005290 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	7bfa      	ldrb	r2, [r7, #15]
 8005258:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800525c:	7bfb      	ldrb	r3, [r7, #15]
 800525e:	4619      	mov	r1, r3
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 fdff 	bl	8005e64 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 fa44 	bl	80056f4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800526c:	7bfb      	ldrb	r3, [r7, #15]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d004      	beq.n	800527c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2202      	movs	r2, #2
 8005276:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800527a:	e009      	b.n	8005290 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005284:	e004      	b.n	8005290 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005286:	6839      	ldr	r1, [r7, #0]
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 f985 	bl	8005598 <USBD_CtlError>
  }
}
 800528e:	bf00      	nop
 8005290:	bf00      	nop
 8005292:	3710      	adds	r7, #16
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80052a2:	2300      	movs	r3, #0
 80052a4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	885b      	ldrh	r3, [r3, #2]
 80052aa:	b2da      	uxtb	r2, r3
 80052ac:	4b4c      	ldr	r3, [pc, #304]	; (80053e0 <USBD_SetConfig+0x148>)
 80052ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80052b0:	4b4b      	ldr	r3, [pc, #300]	; (80053e0 <USBD_SetConfig+0x148>)
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d905      	bls.n	80052c4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80052b8:	6839      	ldr	r1, [r7, #0]
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 f96c 	bl	8005598 <USBD_CtlError>
    return USBD_FAIL;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e088      	b.n	80053d6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d002      	beq.n	80052d6 <USBD_SetConfig+0x3e>
 80052d0:	2b03      	cmp	r3, #3
 80052d2:	d025      	beq.n	8005320 <USBD_SetConfig+0x88>
 80052d4:	e071      	b.n	80053ba <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80052d6:	4b42      	ldr	r3, [pc, #264]	; (80053e0 <USBD_SetConfig+0x148>)
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d01c      	beq.n	8005318 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80052de:	4b40      	ldr	r3, [pc, #256]	; (80053e0 <USBD_SetConfig+0x148>)
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	461a      	mov	r2, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80052e8:	4b3d      	ldr	r3, [pc, #244]	; (80053e0 <USBD_SetConfig+0x148>)
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	4619      	mov	r1, r3
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f7ff f948 	bl	8004584 <USBD_SetClassConfig>
 80052f4:	4603      	mov	r3, r0
 80052f6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80052f8:	7bfb      	ldrb	r3, [r7, #15]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d004      	beq.n	8005308 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80052fe:	6839      	ldr	r1, [r7, #0]
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 f949 	bl	8005598 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005306:	e065      	b.n	80053d4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 f9f3 	bl	80056f4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2203      	movs	r2, #3
 8005312:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005316:	e05d      	b.n	80053d4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 f9eb 	bl	80056f4 <USBD_CtlSendStatus>
      break;
 800531e:	e059      	b.n	80053d4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005320:	4b2f      	ldr	r3, [pc, #188]	; (80053e0 <USBD_SetConfig+0x148>)
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d112      	bne.n	800534e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2202      	movs	r2, #2
 800532c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005330:	4b2b      	ldr	r3, [pc, #172]	; (80053e0 <USBD_SetConfig+0x148>)
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	461a      	mov	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800533a:	4b29      	ldr	r3, [pc, #164]	; (80053e0 <USBD_SetConfig+0x148>)
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	4619      	mov	r1, r3
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f7ff f93b 	bl	80045bc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f9d4 	bl	80056f4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800534c:	e042      	b.n	80053d4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800534e:	4b24      	ldr	r3, [pc, #144]	; (80053e0 <USBD_SetConfig+0x148>)
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	461a      	mov	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	429a      	cmp	r2, r3
 800535a:	d02a      	beq.n	80053b2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	b2db      	uxtb	r3, r3
 8005362:	4619      	mov	r1, r3
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f7ff f929 	bl	80045bc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800536a:	4b1d      	ldr	r3, [pc, #116]	; (80053e0 <USBD_SetConfig+0x148>)
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	461a      	mov	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005374:	4b1a      	ldr	r3, [pc, #104]	; (80053e0 <USBD_SetConfig+0x148>)
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	4619      	mov	r1, r3
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f7ff f902 	bl	8004584 <USBD_SetClassConfig>
 8005380:	4603      	mov	r3, r0
 8005382:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005384:	7bfb      	ldrb	r3, [r7, #15]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00f      	beq.n	80053aa <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800538a:	6839      	ldr	r1, [r7, #0]
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 f903 	bl	8005598 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	b2db      	uxtb	r3, r3
 8005398:	4619      	mov	r1, r3
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f7ff f90e 	bl	80045bc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2202      	movs	r2, #2
 80053a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80053a8:	e014      	b.n	80053d4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 f9a2 	bl	80056f4 <USBD_CtlSendStatus>
      break;
 80053b0:	e010      	b.n	80053d4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 f99e 	bl	80056f4 <USBD_CtlSendStatus>
      break;
 80053b8:	e00c      	b.n	80053d4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80053ba:	6839      	ldr	r1, [r7, #0]
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 f8eb 	bl	8005598 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80053c2:	4b07      	ldr	r3, [pc, #28]	; (80053e0 <USBD_SetConfig+0x148>)
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	4619      	mov	r1, r3
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f7ff f8f7 	bl	80045bc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80053ce:	2303      	movs	r3, #3
 80053d0:	73fb      	strb	r3, [r7, #15]
      break;
 80053d2:	bf00      	nop
  }

  return ret;
 80053d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3710      	adds	r7, #16
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	2000017d 	.word	0x2000017d

080053e4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	88db      	ldrh	r3, [r3, #6]
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d004      	beq.n	8005400 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80053f6:	6839      	ldr	r1, [r7, #0]
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 f8cd 	bl	8005598 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80053fe:	e023      	b.n	8005448 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005406:	b2db      	uxtb	r3, r3
 8005408:	2b02      	cmp	r3, #2
 800540a:	dc02      	bgt.n	8005412 <USBD_GetConfig+0x2e>
 800540c:	2b00      	cmp	r3, #0
 800540e:	dc03      	bgt.n	8005418 <USBD_GetConfig+0x34>
 8005410:	e015      	b.n	800543e <USBD_GetConfig+0x5a>
 8005412:	2b03      	cmp	r3, #3
 8005414:	d00b      	beq.n	800542e <USBD_GetConfig+0x4a>
 8005416:	e012      	b.n	800543e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	3308      	adds	r3, #8
 8005422:	2201      	movs	r2, #1
 8005424:	4619      	mov	r1, r3
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f927 	bl	800567a <USBD_CtlSendData>
        break;
 800542c:	e00c      	b.n	8005448 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	3304      	adds	r3, #4
 8005432:	2201      	movs	r2, #1
 8005434:	4619      	mov	r1, r3
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 f91f 	bl	800567a <USBD_CtlSendData>
        break;
 800543c:	e004      	b.n	8005448 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800543e:	6839      	ldr	r1, [r7, #0]
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f000 f8a9 	bl	8005598 <USBD_CtlError>
        break;
 8005446:	bf00      	nop
}
 8005448:	bf00      	nop
 800544a:	3708      	adds	r7, #8
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005460:	b2db      	uxtb	r3, r3
 8005462:	3b01      	subs	r3, #1
 8005464:	2b02      	cmp	r3, #2
 8005466:	d81e      	bhi.n	80054a6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	88db      	ldrh	r3, [r3, #6]
 800546c:	2b02      	cmp	r3, #2
 800546e:	d004      	beq.n	800547a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005470:	6839      	ldr	r1, [r7, #0]
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f890 	bl	8005598 <USBD_CtlError>
        break;
 8005478:	e01a      	b.n	80054b0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2201      	movs	r2, #1
 800547e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005486:	2b00      	cmp	r3, #0
 8005488:	d005      	beq.n	8005496 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	f043 0202 	orr.w	r2, r3, #2
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	330c      	adds	r3, #12
 800549a:	2202      	movs	r2, #2
 800549c:	4619      	mov	r1, r3
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 f8eb 	bl	800567a <USBD_CtlSendData>
      break;
 80054a4:	e004      	b.n	80054b0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80054a6:	6839      	ldr	r1, [r7, #0]
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 f875 	bl	8005598 <USBD_CtlError>
      break;
 80054ae:	bf00      	nop
  }
}
 80054b0:	bf00      	nop
 80054b2:	3708      	adds	r7, #8
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	885b      	ldrh	r3, [r3, #2]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d106      	bne.n	80054d8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2201      	movs	r2, #1
 80054ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 f90e 	bl	80056f4 <USBD_CtlSendStatus>
  }
}
 80054d8:	bf00      	nop
 80054da:	3708      	adds	r7, #8
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	3b01      	subs	r3, #1
 80054f4:	2b02      	cmp	r3, #2
 80054f6:	d80b      	bhi.n	8005510 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	885b      	ldrh	r3, [r3, #2]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d10c      	bne.n	800551a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 f8f3 	bl	80056f4 <USBD_CtlSendStatus>
      }
      break;
 800550e:	e004      	b.n	800551a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005510:	6839      	ldr	r1, [r7, #0]
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f840 	bl	8005598 <USBD_CtlError>
      break;
 8005518:	e000      	b.n	800551c <USBD_ClrFeature+0x3c>
      break;
 800551a:	bf00      	nop
  }
}
 800551c:	bf00      	nop
 800551e:	3708      	adds	r7, #8
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	781a      	ldrb	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	3301      	adds	r3, #1
 800553e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	781a      	ldrb	r2, [r3, #0]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	3301      	adds	r3, #1
 800554c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	f7ff fabb 	bl	8004aca <SWAPBYTE>
 8005554:	4603      	mov	r3, r0
 8005556:	461a      	mov	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	3301      	adds	r3, #1
 8005560:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	3301      	adds	r3, #1
 8005566:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f7ff faae 	bl	8004aca <SWAPBYTE>
 800556e:	4603      	mov	r3, r0
 8005570:	461a      	mov	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	3301      	adds	r3, #1
 800557a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	3301      	adds	r3, #1
 8005580:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f7ff faa1 	bl	8004aca <SWAPBYTE>
 8005588:	4603      	mov	r3, r0
 800558a:	461a      	mov	r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	80da      	strh	r2, [r3, #6]
}
 8005590:	bf00      	nop
 8005592:	3710      	adds	r7, #16
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80055a2:	2180      	movs	r1, #128	; 0x80
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 fbf3 	bl	8005d90 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80055aa:	2100      	movs	r1, #0
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 fbef 	bl	8005d90 <USBD_LL_StallEP>
}
 80055b2:	bf00      	nop
 80055b4:	3708      	adds	r7, #8
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b086      	sub	sp, #24
 80055be:	af00      	add	r7, sp, #0
 80055c0:	60f8      	str	r0, [r7, #12]
 80055c2:	60b9      	str	r1, [r7, #8]
 80055c4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80055c6:	2300      	movs	r3, #0
 80055c8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d036      	beq.n	800563e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80055d4:	6938      	ldr	r0, [r7, #16]
 80055d6:	f000 f836 	bl	8005646 <USBD_GetLen>
 80055da:	4603      	mov	r3, r0
 80055dc:	3301      	adds	r3, #1
 80055de:	b29b      	uxth	r3, r3
 80055e0:	005b      	lsls	r3, r3, #1
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80055e8:	7dfb      	ldrb	r3, [r7, #23]
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	4413      	add	r3, r2
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	7812      	ldrb	r2, [r2, #0]
 80055f2:	701a      	strb	r2, [r3, #0]
  idx++;
 80055f4:	7dfb      	ldrb	r3, [r7, #23]
 80055f6:	3301      	adds	r3, #1
 80055f8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80055fa:	7dfb      	ldrb	r3, [r7, #23]
 80055fc:	68ba      	ldr	r2, [r7, #8]
 80055fe:	4413      	add	r3, r2
 8005600:	2203      	movs	r2, #3
 8005602:	701a      	strb	r2, [r3, #0]
  idx++;
 8005604:	7dfb      	ldrb	r3, [r7, #23]
 8005606:	3301      	adds	r3, #1
 8005608:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800560a:	e013      	b.n	8005634 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800560c:	7dfb      	ldrb	r3, [r7, #23]
 800560e:	68ba      	ldr	r2, [r7, #8]
 8005610:	4413      	add	r3, r2
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	7812      	ldrb	r2, [r2, #0]
 8005616:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	3301      	adds	r3, #1
 800561c:	613b      	str	r3, [r7, #16]
    idx++;
 800561e:	7dfb      	ldrb	r3, [r7, #23]
 8005620:	3301      	adds	r3, #1
 8005622:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005624:	7dfb      	ldrb	r3, [r7, #23]
 8005626:	68ba      	ldr	r2, [r7, #8]
 8005628:	4413      	add	r3, r2
 800562a:	2200      	movs	r2, #0
 800562c:	701a      	strb	r2, [r3, #0]
    idx++;
 800562e:	7dfb      	ldrb	r3, [r7, #23]
 8005630:	3301      	adds	r3, #1
 8005632:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1e7      	bne.n	800560c <USBD_GetString+0x52>
 800563c:	e000      	b.n	8005640 <USBD_GetString+0x86>
    return;
 800563e:	bf00      	nop
  }
}
 8005640:	3718      	adds	r7, #24
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005646:	b480      	push	{r7}
 8005648:	b085      	sub	sp, #20
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800564e:	2300      	movs	r3, #0
 8005650:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005656:	e005      	b.n	8005664 <USBD_GetLen+0x1e>
  {
    len++;
 8005658:	7bfb      	ldrb	r3, [r7, #15]
 800565a:	3301      	adds	r3, #1
 800565c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	3301      	adds	r3, #1
 8005662:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1f5      	bne.n	8005658 <USBD_GetLen+0x12>
  }

  return len;
 800566c:	7bfb      	ldrb	r3, [r7, #15]
}
 800566e:	4618      	mov	r0, r3
 8005670:	3714      	adds	r7, #20
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr

0800567a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800567a:	b580      	push	{r7, lr}
 800567c:	b084      	sub	sp, #16
 800567e:	af00      	add	r7, sp, #0
 8005680:	60f8      	str	r0, [r7, #12]
 8005682:	60b9      	str	r1, [r7, #8]
 8005684:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2202      	movs	r2, #2
 800568a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	68ba      	ldr	r2, [r7, #8]
 800569e:	2100      	movs	r1, #0
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f000 fbfe 	bl	8005ea2 <USBD_LL_Transmit>

  return USBD_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	68ba      	ldr	r2, [r7, #8]
 80056c0:	2100      	movs	r1, #0
 80056c2:	68f8      	ldr	r0, [r7, #12]
 80056c4:	f000 fbed 	bl	8005ea2 <USBD_LL_Transmit>

  return USBD_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80056d2:	b580      	push	{r7, lr}
 80056d4:	b084      	sub	sp, #16
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	60f8      	str	r0, [r7, #12]
 80056da:	60b9      	str	r1, [r7, #8]
 80056dc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	68ba      	ldr	r2, [r7, #8]
 80056e2:	2100      	movs	r1, #0
 80056e4:	68f8      	ldr	r0, [r7, #12]
 80056e6:	f000 fbfd 	bl	8005ee4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3710      	adds	r7, #16
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2204      	movs	r2, #4
 8005700:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005704:	2300      	movs	r3, #0
 8005706:	2200      	movs	r2, #0
 8005708:	2100      	movs	r1, #0
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 fbc9 	bl	8005ea2 <USBD_LL_Transmit>

  return USBD_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3708      	adds	r7, #8
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800571a:	b580      	push	{r7, lr}
 800571c:	b082      	sub	sp, #8
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2205      	movs	r2, #5
 8005726:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800572a:	2300      	movs	r3, #0
 800572c:	2200      	movs	r2, #0
 800572e:	2100      	movs	r1, #0
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 fbd7 	bl	8005ee4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3708      	adds	r7, #8
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005744:	2200      	movs	r2, #0
 8005746:	490e      	ldr	r1, [pc, #56]	; (8005780 <MX_USB_DEVICE_Init+0x40>)
 8005748:	480e      	ldr	r0, [pc, #56]	; (8005784 <MX_USB_DEVICE_Init+0x44>)
 800574a:	f7fe fead 	bl	80044a8 <USBD_Init>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d001      	beq.n	8005758 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005754:	f7fa ff9e 	bl	8000694 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8005758:	490b      	ldr	r1, [pc, #44]	; (8005788 <MX_USB_DEVICE_Init+0x48>)
 800575a:	480a      	ldr	r0, [pc, #40]	; (8005784 <MX_USB_DEVICE_Init+0x44>)
 800575c:	f7fe fed4 	bl	8004508 <USBD_RegisterClass>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d001      	beq.n	800576a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005766:	f7fa ff95 	bl	8000694 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800576a:	4806      	ldr	r0, [pc, #24]	; (8005784 <MX_USB_DEVICE_Init+0x44>)
 800576c:	f7fe fef3 	bl	8004556 <USBD_Start>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d001      	beq.n	800577a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8005776:	f7fa ff8d 	bl	8000694 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800577a:	bf00      	nop
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	20000108 	.word	0x20000108
 8005784:	20000198 	.word	0x20000198
 8005788:	2000000c 	.word	0x2000000c

0800578c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	4603      	mov	r3, r0
 8005794:	6039      	str	r1, [r7, #0]
 8005796:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	2212      	movs	r2, #18
 800579c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800579e:	4b03      	ldr	r3, [pc, #12]	; (80057ac <USBD_FS_DeviceDescriptor+0x20>)
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr
 80057ac:	20000124 	.word	0x20000124

080057b0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	4603      	mov	r3, r0
 80057b8:	6039      	str	r1, [r7, #0]
 80057ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	2204      	movs	r2, #4
 80057c0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80057c2:	4b03      	ldr	r3, [pc, #12]	; (80057d0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr
 80057d0:	20000138 	.word	0x20000138

080057d4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	4603      	mov	r3, r0
 80057dc:	6039      	str	r1, [r7, #0]
 80057de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80057e0:	79fb      	ldrb	r3, [r7, #7]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d105      	bne.n	80057f2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80057e6:	683a      	ldr	r2, [r7, #0]
 80057e8:	4907      	ldr	r1, [pc, #28]	; (8005808 <USBD_FS_ProductStrDescriptor+0x34>)
 80057ea:	4808      	ldr	r0, [pc, #32]	; (800580c <USBD_FS_ProductStrDescriptor+0x38>)
 80057ec:	f7ff fee5 	bl	80055ba <USBD_GetString>
 80057f0:	e004      	b.n	80057fc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80057f2:	683a      	ldr	r2, [r7, #0]
 80057f4:	4904      	ldr	r1, [pc, #16]	; (8005808 <USBD_FS_ProductStrDescriptor+0x34>)
 80057f6:	4805      	ldr	r0, [pc, #20]	; (800580c <USBD_FS_ProductStrDescriptor+0x38>)
 80057f8:	f7ff fedf 	bl	80055ba <USBD_GetString>
  }
  return USBD_StrDesc;
 80057fc:	4b02      	ldr	r3, [pc, #8]	; (8005808 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3708      	adds	r7, #8
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	20000468 	.word	0x20000468
 800580c:	08006020 	.word	0x08006020

08005810 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	4603      	mov	r3, r0
 8005818:	6039      	str	r1, [r7, #0]
 800581a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800581c:	683a      	ldr	r2, [r7, #0]
 800581e:	4904      	ldr	r1, [pc, #16]	; (8005830 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005820:	4804      	ldr	r0, [pc, #16]	; (8005834 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005822:	f7ff feca 	bl	80055ba <USBD_GetString>
  return USBD_StrDesc;
 8005826:	4b02      	ldr	r3, [pc, #8]	; (8005830 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005828:	4618      	mov	r0, r3
 800582a:	3708      	adds	r7, #8
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	20000468 	.word	0x20000468
 8005834:	08006030 	.word	0x08006030

08005838 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	4603      	mov	r3, r0
 8005840:	6039      	str	r1, [r7, #0]
 8005842:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	221a      	movs	r2, #26
 8005848:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800584a:	f000 f843 	bl	80058d4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800584e:	4b02      	ldr	r3, [pc, #8]	; (8005858 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005850:	4618      	mov	r0, r3
 8005852:	3708      	adds	r7, #8
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	2000013c 	.word	0x2000013c

0800585c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	4603      	mov	r3, r0
 8005864:	6039      	str	r1, [r7, #0]
 8005866:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005868:	79fb      	ldrb	r3, [r7, #7]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d105      	bne.n	800587a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800586e:	683a      	ldr	r2, [r7, #0]
 8005870:	4907      	ldr	r1, [pc, #28]	; (8005890 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005872:	4808      	ldr	r0, [pc, #32]	; (8005894 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005874:	f7ff fea1 	bl	80055ba <USBD_GetString>
 8005878:	e004      	b.n	8005884 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800587a:	683a      	ldr	r2, [r7, #0]
 800587c:	4904      	ldr	r1, [pc, #16]	; (8005890 <USBD_FS_ConfigStrDescriptor+0x34>)
 800587e:	4805      	ldr	r0, [pc, #20]	; (8005894 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005880:	f7ff fe9b 	bl	80055ba <USBD_GetString>
  }
  return USBD_StrDesc;
 8005884:	4b02      	ldr	r3, [pc, #8]	; (8005890 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005886:	4618      	mov	r0, r3
 8005888:	3708      	adds	r7, #8
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	20000468 	.word	0x20000468
 8005894:	08006044 	.word	0x08006044

08005898 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	4603      	mov	r3, r0
 80058a0:	6039      	str	r1, [r7, #0]
 80058a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80058a4:	79fb      	ldrb	r3, [r7, #7]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d105      	bne.n	80058b6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80058aa:	683a      	ldr	r2, [r7, #0]
 80058ac:	4907      	ldr	r1, [pc, #28]	; (80058cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80058ae:	4808      	ldr	r0, [pc, #32]	; (80058d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80058b0:	f7ff fe83 	bl	80055ba <USBD_GetString>
 80058b4:	e004      	b.n	80058c0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	4904      	ldr	r1, [pc, #16]	; (80058cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80058ba:	4805      	ldr	r0, [pc, #20]	; (80058d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80058bc:	f7ff fe7d 	bl	80055ba <USBD_GetString>
  }
  return USBD_StrDesc;
 80058c0:	4b02      	ldr	r3, [pc, #8]	; (80058cc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3708      	adds	r7, #8
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	20000468 	.word	0x20000468
 80058d0:	08006050 	.word	0x08006050

080058d4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80058da:	4b0f      	ldr	r3, [pc, #60]	; (8005918 <Get_SerialNum+0x44>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80058e0:	4b0e      	ldr	r3, [pc, #56]	; (800591c <Get_SerialNum+0x48>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80058e6:	4b0e      	ldr	r3, [pc, #56]	; (8005920 <Get_SerialNum+0x4c>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4413      	add	r3, r2
 80058f2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d009      	beq.n	800590e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80058fa:	2208      	movs	r2, #8
 80058fc:	4909      	ldr	r1, [pc, #36]	; (8005924 <Get_SerialNum+0x50>)
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f000 f814 	bl	800592c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005904:	2204      	movs	r2, #4
 8005906:	4908      	ldr	r1, [pc, #32]	; (8005928 <Get_SerialNum+0x54>)
 8005908:	68b8      	ldr	r0, [r7, #8]
 800590a:	f000 f80f 	bl	800592c <IntToUnicode>
  }
}
 800590e:	bf00      	nop
 8005910:	3710      	adds	r7, #16
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	1fff7a10 	.word	0x1fff7a10
 800591c:	1fff7a14 	.word	0x1fff7a14
 8005920:	1fff7a18 	.word	0x1fff7a18
 8005924:	2000013e 	.word	0x2000013e
 8005928:	2000014e 	.word	0x2000014e

0800592c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800592c:	b480      	push	{r7}
 800592e:	b087      	sub	sp, #28
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	4613      	mov	r3, r2
 8005938:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800593a:	2300      	movs	r3, #0
 800593c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800593e:	2300      	movs	r3, #0
 8005940:	75fb      	strb	r3, [r7, #23]
 8005942:	e027      	b.n	8005994 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	0f1b      	lsrs	r3, r3, #28
 8005948:	2b09      	cmp	r3, #9
 800594a:	d80b      	bhi.n	8005964 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	0f1b      	lsrs	r3, r3, #28
 8005950:	b2da      	uxtb	r2, r3
 8005952:	7dfb      	ldrb	r3, [r7, #23]
 8005954:	005b      	lsls	r3, r3, #1
 8005956:	4619      	mov	r1, r3
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	440b      	add	r3, r1
 800595c:	3230      	adds	r2, #48	; 0x30
 800595e:	b2d2      	uxtb	r2, r2
 8005960:	701a      	strb	r2, [r3, #0]
 8005962:	e00a      	b.n	800597a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	0f1b      	lsrs	r3, r3, #28
 8005968:	b2da      	uxtb	r2, r3
 800596a:	7dfb      	ldrb	r3, [r7, #23]
 800596c:	005b      	lsls	r3, r3, #1
 800596e:	4619      	mov	r1, r3
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	440b      	add	r3, r1
 8005974:	3237      	adds	r2, #55	; 0x37
 8005976:	b2d2      	uxtb	r2, r2
 8005978:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	011b      	lsls	r3, r3, #4
 800597e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005980:	7dfb      	ldrb	r3, [r7, #23]
 8005982:	005b      	lsls	r3, r3, #1
 8005984:	3301      	adds	r3, #1
 8005986:	68ba      	ldr	r2, [r7, #8]
 8005988:	4413      	add	r3, r2
 800598a:	2200      	movs	r2, #0
 800598c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800598e:	7dfb      	ldrb	r3, [r7, #23]
 8005990:	3301      	adds	r3, #1
 8005992:	75fb      	strb	r3, [r7, #23]
 8005994:	7dfa      	ldrb	r2, [r7, #23]
 8005996:	79fb      	ldrb	r3, [r7, #7]
 8005998:	429a      	cmp	r2, r3
 800599a:	d3d3      	bcc.n	8005944 <IntToUnicode+0x18>
  }
}
 800599c:	bf00      	nop
 800599e:	bf00      	nop
 80059a0:	371c      	adds	r7, #28
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr
	...

080059ac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b08a      	sub	sp, #40	; 0x28
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059b4:	f107 0314 	add.w	r3, r7, #20
 80059b8:	2200      	movs	r2, #0
 80059ba:	601a      	str	r2, [r3, #0]
 80059bc:	605a      	str	r2, [r3, #4]
 80059be:	609a      	str	r2, [r3, #8]
 80059c0:	60da      	str	r2, [r3, #12]
 80059c2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059cc:	d13a      	bne.n	8005a44 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059ce:	2300      	movs	r3, #0
 80059d0:	613b      	str	r3, [r7, #16]
 80059d2:	4b1e      	ldr	r3, [pc, #120]	; (8005a4c <HAL_PCD_MspInit+0xa0>)
 80059d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d6:	4a1d      	ldr	r2, [pc, #116]	; (8005a4c <HAL_PCD_MspInit+0xa0>)
 80059d8:	f043 0301 	orr.w	r3, r3, #1
 80059dc:	6313      	str	r3, [r2, #48]	; 0x30
 80059de:	4b1b      	ldr	r3, [pc, #108]	; (8005a4c <HAL_PCD_MspInit+0xa0>)
 80059e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	613b      	str	r3, [r7, #16]
 80059e8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80059ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80059ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059f0:	2302      	movs	r3, #2
 80059f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059f4:	2300      	movs	r3, #0
 80059f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059f8:	2303      	movs	r3, #3
 80059fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80059fc:	230a      	movs	r3, #10
 80059fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a00:	f107 0314 	add.w	r3, r7, #20
 8005a04:	4619      	mov	r1, r3
 8005a06:	4812      	ldr	r0, [pc, #72]	; (8005a50 <HAL_PCD_MspInit+0xa4>)
 8005a08:	f7fb f892 	bl	8000b30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005a0c:	4b0f      	ldr	r3, [pc, #60]	; (8005a4c <HAL_PCD_MspInit+0xa0>)
 8005a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a10:	4a0e      	ldr	r2, [pc, #56]	; (8005a4c <HAL_PCD_MspInit+0xa0>)
 8005a12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a16:	6353      	str	r3, [r2, #52]	; 0x34
 8005a18:	2300      	movs	r3, #0
 8005a1a:	60fb      	str	r3, [r7, #12]
 8005a1c:	4b0b      	ldr	r3, [pc, #44]	; (8005a4c <HAL_PCD_MspInit+0xa0>)
 8005a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a20:	4a0a      	ldr	r2, [pc, #40]	; (8005a4c <HAL_PCD_MspInit+0xa0>)
 8005a22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a26:	6453      	str	r3, [r2, #68]	; 0x44
 8005a28:	4b08      	ldr	r3, [pc, #32]	; (8005a4c <HAL_PCD_MspInit+0xa0>)
 8005a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a30:	60fb      	str	r3, [r7, #12]
 8005a32:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8005a34:	2200      	movs	r2, #0
 8005a36:	2100      	movs	r1, #0
 8005a38:	2043      	movs	r0, #67	; 0x43
 8005a3a:	f7fb f842 	bl	8000ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005a3e:	2043      	movs	r0, #67	; 0x43
 8005a40:	f7fb f85b 	bl	8000afa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005a44:	bf00      	nop
 8005a46:	3728      	adds	r7, #40	; 0x28
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	40023800 	.word	0x40023800
 8005a50:	40020000 	.word	0x40020000

08005a54 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005a68:	4619      	mov	r1, r3
 8005a6a:	4610      	mov	r0, r2
 8005a6c:	f7fe fdbe 	bl	80045ec <USBD_LL_SetupStage>
}
 8005a70:	bf00      	nop
 8005a72:	3708      	adds	r7, #8
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	460b      	mov	r3, r1
 8005a82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005a8a:	78fa      	ldrb	r2, [r7, #3]
 8005a8c:	6879      	ldr	r1, [r7, #4]
 8005a8e:	4613      	mov	r3, r2
 8005a90:	00db      	lsls	r3, r3, #3
 8005a92:	1a9b      	subs	r3, r3, r2
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	440b      	add	r3, r1
 8005a98:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	78fb      	ldrb	r3, [r7, #3]
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	f7fe fdf8 	bl	8004696 <USBD_LL_DataOutStage>
}
 8005aa6:	bf00      	nop
 8005aa8:	3708      	adds	r7, #8
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}

08005aae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005aae:	b580      	push	{r7, lr}
 8005ab0:	b082      	sub	sp, #8
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005ac0:	78fa      	ldrb	r2, [r7, #3]
 8005ac2:	6879      	ldr	r1, [r7, #4]
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	00db      	lsls	r3, r3, #3
 8005ac8:	1a9b      	subs	r3, r3, r2
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	440b      	add	r3, r1
 8005ace:	3348      	adds	r3, #72	; 0x48
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	78fb      	ldrb	r3, [r7, #3]
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	f7fe fe41 	bl	800475c <USBD_LL_DataInStage>
}
 8005ada:	bf00      	nop
 8005adc:	3708      	adds	r7, #8
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b082      	sub	sp, #8
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005af0:	4618      	mov	r0, r3
 8005af2:	f7fe ff55 	bl	80049a0 <USBD_LL_SOF>
}
 8005af6:	bf00      	nop
 8005af8:	3708      	adds	r7, #8
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}

08005afe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005afe:	b580      	push	{r7, lr}
 8005b00:	b084      	sub	sp, #16
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005b06:	2301      	movs	r3, #1
 8005b08:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d102      	bne.n	8005b18 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8005b12:	2300      	movs	r3, #0
 8005b14:	73fb      	strb	r3, [r7, #15]
 8005b16:	e008      	b.n	8005b2a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d102      	bne.n	8005b26 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8005b20:	2301      	movs	r3, #1
 8005b22:	73fb      	strb	r3, [r7, #15]
 8005b24:	e001      	b.n	8005b2a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8005b26:	f7fa fdb5 	bl	8000694 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005b30:	7bfa      	ldrb	r2, [r7, #15]
 8005b32:	4611      	mov	r1, r2
 8005b34:	4618      	mov	r0, r3
 8005b36:	f7fe fef5 	bl	8004924 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005b40:	4618      	mov	r0, r3
 8005b42:	f7fe fea1 	bl	8004888 <USBD_LL_Reset>
}
 8005b46:	bf00      	nop
 8005b48:	3710      	adds	r7, #16
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
	...

08005b50 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7fe fef0 	bl	8004944 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	6812      	ldr	r2, [r2, #0]
 8005b72:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005b76:	f043 0301 	orr.w	r3, r3, #1
 8005b7a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a1b      	ldr	r3, [r3, #32]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d005      	beq.n	8005b90 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005b84:	4b04      	ldr	r3, [pc, #16]	; (8005b98 <HAL_PCD_SuspendCallback+0x48>)
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	4a03      	ldr	r2, [pc, #12]	; (8005b98 <HAL_PCD_SuspendCallback+0x48>)
 8005b8a:	f043 0306 	orr.w	r3, r3, #6
 8005b8e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005b90:	bf00      	nop
 8005b92:	3708      	adds	r7, #8
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	e000ed00 	.word	0xe000ed00

08005b9c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b082      	sub	sp, #8
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7fe fee0 	bl	8004970 <USBD_LL_Resume>
}
 8005bb0:	bf00      	nop
 8005bb2:	3708      	adds	r7, #8
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005bca:	78fa      	ldrb	r2, [r7, #3]
 8005bcc:	4611      	mov	r1, r2
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f7fe ff2e 	bl	8004a30 <USBD_LL_IsoOUTIncomplete>
}
 8005bd4:	bf00      	nop
 8005bd6:	3708      	adds	r7, #8
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	460b      	mov	r3, r1
 8005be6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005bee:	78fa      	ldrb	r2, [r7, #3]
 8005bf0:	4611      	mov	r1, r2
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7fe fef6 	bl	80049e4 <USBD_LL_IsoINIncomplete>
}
 8005bf8:	bf00      	nop
 8005bfa:	3708      	adds	r7, #8
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f7fe ff34 	bl	8004a7c <USBD_LL_DevConnected>
}
 8005c14:	bf00      	nop
 8005c16:	3708      	adds	r7, #8
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f7fe ff31 	bl	8004a92 <USBD_LL_DevDisconnected>
}
 8005c30:	bf00      	nop
 8005c32:	3708      	adds	r7, #8
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d13c      	bne.n	8005cc2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8005c48:	4a20      	ldr	r2, [pc, #128]	; (8005ccc <USBD_LL_Init+0x94>)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a1e      	ldr	r2, [pc, #120]	; (8005ccc <USBD_LL_Init+0x94>)
 8005c54:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005c58:	4b1c      	ldr	r3, [pc, #112]	; (8005ccc <USBD_LL_Init+0x94>)
 8005c5a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005c5e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8005c60:	4b1a      	ldr	r3, [pc, #104]	; (8005ccc <USBD_LL_Init+0x94>)
 8005c62:	2204      	movs	r2, #4
 8005c64:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8005c66:	4b19      	ldr	r3, [pc, #100]	; (8005ccc <USBD_LL_Init+0x94>)
 8005c68:	2202      	movs	r2, #2
 8005c6a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005c6c:	4b17      	ldr	r3, [pc, #92]	; (8005ccc <USBD_LL_Init+0x94>)
 8005c6e:	2200      	movs	r2, #0
 8005c70:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005c72:	4b16      	ldr	r3, [pc, #88]	; (8005ccc <USBD_LL_Init+0x94>)
 8005c74:	2202      	movs	r2, #2
 8005c76:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8005c78:	4b14      	ldr	r3, [pc, #80]	; (8005ccc <USBD_LL_Init+0x94>)
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8005c7e:	4b13      	ldr	r3, [pc, #76]	; (8005ccc <USBD_LL_Init+0x94>)
 8005c80:	2200      	movs	r2, #0
 8005c82:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8005c84:	4b11      	ldr	r3, [pc, #68]	; (8005ccc <USBD_LL_Init+0x94>)
 8005c86:	2200      	movs	r2, #0
 8005c88:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8005c8a:	4b10      	ldr	r3, [pc, #64]	; (8005ccc <USBD_LL_Init+0x94>)
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8005c90:	4b0e      	ldr	r3, [pc, #56]	; (8005ccc <USBD_LL_Init+0x94>)
 8005c92:	2200      	movs	r2, #0
 8005c94:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8005c96:	480d      	ldr	r0, [pc, #52]	; (8005ccc <USBD_LL_Init+0x94>)
 8005c98:	f7fb f8fe 	bl	8000e98 <HAL_PCD_Init>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d001      	beq.n	8005ca6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8005ca2:	f7fa fcf7 	bl	8000694 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8005ca6:	2180      	movs	r1, #128	; 0x80
 8005ca8:	4808      	ldr	r0, [pc, #32]	; (8005ccc <USBD_LL_Init+0x94>)
 8005caa:	f7fc fa44 	bl	8002136 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8005cae:	2240      	movs	r2, #64	; 0x40
 8005cb0:	2100      	movs	r1, #0
 8005cb2:	4806      	ldr	r0, [pc, #24]	; (8005ccc <USBD_LL_Init+0x94>)
 8005cb4:	f7fc f9f8 	bl	80020a8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8005cb8:	2280      	movs	r2, #128	; 0x80
 8005cba:	2101      	movs	r1, #1
 8005cbc:	4803      	ldr	r0, [pc, #12]	; (8005ccc <USBD_LL_Init+0x94>)
 8005cbe:	f7fc f9f3 	bl	80020a8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3708      	adds	r7, #8
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	20000668 	.word	0x20000668

08005cd0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7fb f9f3 	bl	80010d2 <HAL_PCD_Start>
 8005cec:	4603      	mov	r3, r0
 8005cee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005cf0:	7bfb      	ldrb	r3, [r7, #15]
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f000 f930 	bl	8005f58 <USBD_Get_USB_Status>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005cfc:	7bbb      	ldrb	r3, [r7, #14]
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3710      	adds	r7, #16
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}

08005d06 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8005d06:	b580      	push	{r7, lr}
 8005d08:	b084      	sub	sp, #16
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
 8005d0e:	4608      	mov	r0, r1
 8005d10:	4611      	mov	r1, r2
 8005d12:	461a      	mov	r2, r3
 8005d14:	4603      	mov	r3, r0
 8005d16:	70fb      	strb	r3, [r7, #3]
 8005d18:	460b      	mov	r3, r1
 8005d1a:	70bb      	strb	r3, [r7, #2]
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005d20:	2300      	movs	r3, #0
 8005d22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005d24:	2300      	movs	r3, #0
 8005d26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8005d2e:	78bb      	ldrb	r3, [r7, #2]
 8005d30:	883a      	ldrh	r2, [r7, #0]
 8005d32:	78f9      	ldrb	r1, [r7, #3]
 8005d34:	f7fb fdd7 	bl	80018e6 <HAL_PCD_EP_Open>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005d3c:	7bfb      	ldrb	r3, [r7, #15]
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f000 f90a 	bl	8005f58 <USBD_Get_USB_Status>
 8005d44:	4603      	mov	r3, r0
 8005d46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005d48:	7bbb      	ldrb	r3, [r7, #14]
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b084      	sub	sp, #16
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005d62:	2300      	movs	r3, #0
 8005d64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005d6c:	78fa      	ldrb	r2, [r7, #3]
 8005d6e:	4611      	mov	r1, r2
 8005d70:	4618      	mov	r0, r3
 8005d72:	f7fb fe20 	bl	80019b6 <HAL_PCD_EP_Close>
 8005d76:	4603      	mov	r3, r0
 8005d78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005d7a:	7bfb      	ldrb	r3, [r7, #15]
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f000 f8eb 	bl	8005f58 <USBD_Get_USB_Status>
 8005d82:	4603      	mov	r3, r0
 8005d84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005d86:	7bbb      	ldrb	r3, [r7, #14]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3710      	adds	r7, #16
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	460b      	mov	r3, r1
 8005d9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005da0:	2300      	movs	r3, #0
 8005da2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005daa:	78fa      	ldrb	r2, [r7, #3]
 8005dac:	4611      	mov	r1, r2
 8005dae:	4618      	mov	r0, r3
 8005db0:	f7fb fee0 	bl	8001b74 <HAL_PCD_EP_SetStall>
 8005db4:	4603      	mov	r3, r0
 8005db6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005db8:	7bfb      	ldrb	r3, [r7, #15]
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f000 f8cc 	bl	8005f58 <USBD_Get_USB_Status>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005dc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b084      	sub	sp, #16
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005dde:	2300      	movs	r3, #0
 8005de0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005de8:	78fa      	ldrb	r2, [r7, #3]
 8005dea:	4611      	mov	r1, r2
 8005dec:	4618      	mov	r0, r3
 8005dee:	f7fb ff25 	bl	8001c3c <HAL_PCD_EP_ClrStall>
 8005df2:	4603      	mov	r3, r0
 8005df4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005df6:	7bfb      	ldrb	r3, [r7, #15]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f000 f8ad 	bl	8005f58 <USBD_Get_USB_Status>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005e02:	7bbb      	ldrb	r3, [r7, #14]
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3710      	adds	r7, #16
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	460b      	mov	r3, r1
 8005e16:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005e1e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8005e20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	da0b      	bge.n	8005e40 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8005e28:	78fb      	ldrb	r3, [r7, #3]
 8005e2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e2e:	68f9      	ldr	r1, [r7, #12]
 8005e30:	4613      	mov	r3, r2
 8005e32:	00db      	lsls	r3, r3, #3
 8005e34:	1a9b      	subs	r3, r3, r2
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	440b      	add	r3, r1
 8005e3a:	333e      	adds	r3, #62	; 0x3e
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	e00b      	b.n	8005e58 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8005e40:	78fb      	ldrb	r3, [r7, #3]
 8005e42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e46:	68f9      	ldr	r1, [r7, #12]
 8005e48:	4613      	mov	r3, r2
 8005e4a:	00db      	lsls	r3, r3, #3
 8005e4c:	1a9b      	subs	r3, r3, r2
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	440b      	add	r3, r1
 8005e52:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005e56:	781b      	ldrb	r3, [r3, #0]
  }
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3714      	adds	r7, #20
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	460b      	mov	r3, r1
 8005e6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005e70:	2300      	movs	r3, #0
 8005e72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005e74:	2300      	movs	r3, #0
 8005e76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005e7e:	78fa      	ldrb	r2, [r7, #3]
 8005e80:	4611      	mov	r1, r2
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7fb fd0a 	bl	800189c <HAL_PCD_SetAddress>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005e8c:	7bfb      	ldrb	r3, [r7, #15]
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f000 f862 	bl	8005f58 <USBD_Get_USB_Status>
 8005e94:	4603      	mov	r3, r0
 8005e96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005e98:	7bbb      	ldrb	r3, [r7, #14]
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3710      	adds	r7, #16
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	b086      	sub	sp, #24
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	60f8      	str	r0, [r7, #12]
 8005eaa:	607a      	str	r2, [r7, #4]
 8005eac:	603b      	str	r3, [r7, #0]
 8005eae:	460b      	mov	r3, r1
 8005eb0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8005ec0:	7af9      	ldrb	r1, [r7, #11]
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	f7fb fe0b 	bl	8001ae0 <HAL_PCD_EP_Transmit>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005ece:	7dfb      	ldrb	r3, [r7, #23]
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f000 f841 	bl	8005f58 <USBD_Get_USB_Status>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8005eda:	7dbb      	ldrb	r3, [r7, #22]
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3718      	adds	r7, #24
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b086      	sub	sp, #24
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	607a      	str	r2, [r7, #4]
 8005eee:	603b      	str	r3, [r7, #0]
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8005f02:	7af9      	ldrb	r1, [r7, #11]
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	f7fb fd9f 	bl	8001a4a <HAL_PCD_EP_Receive>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005f10:	7dfb      	ldrb	r3, [r7, #23]
 8005f12:	4618      	mov	r0, r3
 8005f14:	f000 f820 	bl	8005f58 <USBD_Get_USB_Status>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8005f1c:	7dbb      	ldrb	r3, [r7, #22]
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3718      	adds	r7, #24
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
	...

08005f28 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8005f30:	4b03      	ldr	r3, [pc, #12]	; (8005f40 <USBD_static_malloc+0x18>)
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	370c      	adds	r7, #12
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop
 8005f40:	20000180 	.word	0x20000180

08005f44 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]

}
 8005f4c:	bf00      	nop
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	4603      	mov	r3, r0
 8005f60:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005f62:	2300      	movs	r3, #0
 8005f64:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8005f66:	79fb      	ldrb	r3, [r7, #7]
 8005f68:	2b03      	cmp	r3, #3
 8005f6a:	d817      	bhi.n	8005f9c <USBD_Get_USB_Status+0x44>
 8005f6c:	a201      	add	r2, pc, #4	; (adr r2, 8005f74 <USBD_Get_USB_Status+0x1c>)
 8005f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f72:	bf00      	nop
 8005f74:	08005f85 	.word	0x08005f85
 8005f78:	08005f8b 	.word	0x08005f8b
 8005f7c:	08005f91 	.word	0x08005f91
 8005f80:	08005f97 	.word	0x08005f97
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8005f84:	2300      	movs	r3, #0
 8005f86:	73fb      	strb	r3, [r7, #15]
    break;
 8005f88:	e00b      	b.n	8005fa2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	73fb      	strb	r3, [r7, #15]
    break;
 8005f8e:	e008      	b.n	8005fa2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005f90:	2301      	movs	r3, #1
 8005f92:	73fb      	strb	r3, [r7, #15]
    break;
 8005f94:	e005      	b.n	8005fa2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8005f96:	2303      	movs	r3, #3
 8005f98:	73fb      	strb	r3, [r7, #15]
    break;
 8005f9a:	e002      	b.n	8005fa2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	73fb      	strb	r3, [r7, #15]
    break;
 8005fa0:	bf00      	nop
  }
  return usb_status;
 8005fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3714      	adds	r7, #20
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <__libc_init_array>:
 8005fb0:	b570      	push	{r4, r5, r6, lr}
 8005fb2:	4d0d      	ldr	r5, [pc, #52]	; (8005fe8 <__libc_init_array+0x38>)
 8005fb4:	4c0d      	ldr	r4, [pc, #52]	; (8005fec <__libc_init_array+0x3c>)
 8005fb6:	1b64      	subs	r4, r4, r5
 8005fb8:	10a4      	asrs	r4, r4, #2
 8005fba:	2600      	movs	r6, #0
 8005fbc:	42a6      	cmp	r6, r4
 8005fbe:	d109      	bne.n	8005fd4 <__libc_init_array+0x24>
 8005fc0:	4d0b      	ldr	r5, [pc, #44]	; (8005ff0 <__libc_init_array+0x40>)
 8005fc2:	4c0c      	ldr	r4, [pc, #48]	; (8005ff4 <__libc_init_array+0x44>)
 8005fc4:	f000 f820 	bl	8006008 <_init>
 8005fc8:	1b64      	subs	r4, r4, r5
 8005fca:	10a4      	asrs	r4, r4, #2
 8005fcc:	2600      	movs	r6, #0
 8005fce:	42a6      	cmp	r6, r4
 8005fd0:	d105      	bne.n	8005fde <__libc_init_array+0x2e>
 8005fd2:	bd70      	pop	{r4, r5, r6, pc}
 8005fd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fd8:	4798      	blx	r3
 8005fda:	3601      	adds	r6, #1
 8005fdc:	e7ee      	b.n	8005fbc <__libc_init_array+0xc>
 8005fde:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fe2:	4798      	blx	r3
 8005fe4:	3601      	adds	r6, #1
 8005fe6:	e7f2      	b.n	8005fce <__libc_init_array+0x1e>
 8005fe8:	08006078 	.word	0x08006078
 8005fec:	08006078 	.word	0x08006078
 8005ff0:	08006078 	.word	0x08006078
 8005ff4:	0800607c 	.word	0x0800607c

08005ff8 <memset>:
 8005ff8:	4402      	add	r2, r0
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d100      	bne.n	8006002 <memset+0xa>
 8006000:	4770      	bx	lr
 8006002:	f803 1b01 	strb.w	r1, [r3], #1
 8006006:	e7f9      	b.n	8005ffc <memset+0x4>

08006008 <_init>:
 8006008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800600a:	bf00      	nop
 800600c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800600e:	bc08      	pop	{r3}
 8006010:	469e      	mov	lr, r3
 8006012:	4770      	bx	lr

08006014 <_fini>:
 8006014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006016:	bf00      	nop
 8006018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800601a:	bc08      	pop	{r3}
 800601c:	469e      	mov	lr, r3
 800601e:	4770      	bx	lr
