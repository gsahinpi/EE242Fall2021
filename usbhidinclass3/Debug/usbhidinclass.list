
usbhidinclass.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e78  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08006000  08006000  00016000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006050  08006050  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  08006050  08006050  00016050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006058  08006058  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006058  08006058  00016058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800605c  0800605c  0001605c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  08006060  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020164  2**0
                  CONTENTS
 10 .bss          00000914  20000164  20000164  00020164  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a78  20000a78  00020164  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001110a  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029fe  00000000  00000000  0003129e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000aa0  00000000  00000000  00033ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000978  00000000  00000000  00034740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000227bb  00000000  00000000  000350b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000db53  00000000  00000000  00057873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3b95  00000000  00000000  000653c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00128f5b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002a00  00000000  00000000  00128fb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000164 	.word	0x20000164
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005fe8 	.word	0x08005fe8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000168 	.word	0x20000168
 80001c4:	08005fe8 	.word	0x08005fe8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 f97c 	bl	80007c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f80e 	bl	80004e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f876 	bl	80005bc <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004d0:	f005 f926 	bl	8005720 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  USBD_HID_SendReport(&hUsbDeviceFS, &mousehid , sizeof(mousehid ));
 80004d4:	2204      	movs	r2, #4
 80004d6:	4902      	ldr	r1, [pc, #8]	; (80004e0 <main+0x20>)
 80004d8:	4802      	ldr	r0, [pc, #8]	; (80004e4 <main+0x24>)
 80004da:	f003 ff5b 	bl	8004394 <USBD_HID_SendReport>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004de:	e7fe      	b.n	80004de <main+0x1e>
 80004e0:	20000180 	.word	0x20000180
 80004e4:	200001a0 	.word	0x200001a0

080004e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b094      	sub	sp, #80	; 0x50
 80004ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ee:	f107 0320 	add.w	r3, r7, #32
 80004f2:	2230      	movs	r2, #48	; 0x30
 80004f4:	2100      	movs	r1, #0
 80004f6:	4618      	mov	r0, r3
 80004f8:	f005 fd6e 	bl	8005fd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fc:	f107 030c 	add.w	r3, r7, #12
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
 8000504:	605a      	str	r2, [r3, #4]
 8000506:	609a      	str	r2, [r3, #8]
 8000508:	60da      	str	r2, [r3, #12]
 800050a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800050c:	2300      	movs	r3, #0
 800050e:	60bb      	str	r3, [r7, #8]
 8000510:	4b28      	ldr	r3, [pc, #160]	; (80005b4 <SystemClock_Config+0xcc>)
 8000512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000514:	4a27      	ldr	r2, [pc, #156]	; (80005b4 <SystemClock_Config+0xcc>)
 8000516:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800051a:	6413      	str	r3, [r2, #64]	; 0x40
 800051c:	4b25      	ldr	r3, [pc, #148]	; (80005b4 <SystemClock_Config+0xcc>)
 800051e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000524:	60bb      	str	r3, [r7, #8]
 8000526:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000528:	2300      	movs	r3, #0
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	4b22      	ldr	r3, [pc, #136]	; (80005b8 <SystemClock_Config+0xd0>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a21      	ldr	r2, [pc, #132]	; (80005b8 <SystemClock_Config+0xd0>)
 8000532:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000536:	6013      	str	r3, [r2, #0]
 8000538:	4b1f      	ldr	r3, [pc, #124]	; (80005b8 <SystemClock_Config+0xd0>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000540:	607b      	str	r3, [r7, #4]
 8000542:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000544:	2301      	movs	r3, #1
 8000546:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000548:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800054c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800054e:	2302      	movs	r3, #2
 8000550:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000552:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000556:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000558:	2304      	movs	r3, #4
 800055a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800055c:	23a8      	movs	r3, #168	; 0xa8
 800055e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000560:	2302      	movs	r3, #2
 8000562:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000564:	2307      	movs	r3, #7
 8000566:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000568:	f107 0320 	add.w	r3, r7, #32
 800056c:	4618      	mov	r0, r3
 800056e:	f001 fdef 	bl	8002150 <HAL_RCC_OscConfig>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000578:	f000 f87c 	bl	8000674 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057c:	230f      	movs	r3, #15
 800057e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000580:	2302      	movs	r3, #2
 8000582:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000584:	2300      	movs	r3, #0
 8000586:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000588:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800058c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800058e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000592:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000594:	f107 030c 	add.w	r3, r7, #12
 8000598:	2105      	movs	r1, #5
 800059a:	4618      	mov	r0, r3
 800059c:	f002 f850 	bl	8002640 <HAL_RCC_ClockConfig>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005a6:	f000 f865 	bl	8000674 <Error_Handler>
  }
}
 80005aa:	bf00      	nop
 80005ac:	3750      	adds	r7, #80	; 0x50
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40023800 	.word	0x40023800
 80005b8:	40007000 	.word	0x40007000

080005bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c2:	f107 030c 	add.w	r3, r7, #12
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	4b19      	ldr	r3, [pc, #100]	; (800063c <MX_GPIO_Init+0x80>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a18      	ldr	r2, [pc, #96]	; (800063c <MX_GPIO_Init+0x80>)
 80005dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b16      	ldr	r3, [pc, #88]	; (800063c <MX_GPIO_Init+0x80>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	4b12      	ldr	r3, [pc, #72]	; (800063c <MX_GPIO_Init+0x80>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	4a11      	ldr	r2, [pc, #68]	; (800063c <MX_GPIO_Init+0x80>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	6313      	str	r3, [r2, #48]	; 0x30
 80005fe:	4b0f      	ldr	r3, [pc, #60]	; (800063c <MX_GPIO_Init+0x80>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 800060a:	2301      	movs	r3, #1
 800060c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800060e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000612:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	4619      	mov	r1, r3
 800061e:	4808      	ldr	r0, [pc, #32]	; (8000640 <MX_GPIO_Init+0x84>)
 8000620:	f000 fa76 	bl	8000b10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000624:	2200      	movs	r2, #0
 8000626:	2100      	movs	r1, #0
 8000628:	2006      	movs	r0, #6
 800062a:	f000 fa3a 	bl	8000aa2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800062e:	2006      	movs	r0, #6
 8000630:	f000 fa53 	bl	8000ada <HAL_NVIC_EnableIRQ>

}
 8000634:	bf00      	nop
 8000636:	3720      	adds	r7, #32
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40023800 	.word	0x40023800
 8000640:	40020000 	.word	0x40020000

08000644 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	80fb      	strh	r3, [r7, #6]
	mouseHID mousehid = {0,1000,100,0};
 800064e:	4b07      	ldr	r3, [pc, #28]	; (800066c <HAL_GPIO_EXTI_Callback+0x28>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	60fb      	str	r3, [r7, #12]
	 USBD_HID_SendReport(&hUsbDeviceFS, &mousehid , sizeof(mousehid ));
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	2204      	movs	r2, #4
 800065a:	4619      	mov	r1, r3
 800065c:	4804      	ldr	r0, [pc, #16]	; (8000670 <HAL_GPIO_EXTI_Callback+0x2c>)
 800065e:	f003 fe99 	bl	8004394 <USBD_HID_SendReport>
}
 8000662:	bf00      	nop
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	08006000 	.word	0x08006000
 8000670:	200001a0 	.word	0x200001a0

08000674 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000678:	b672      	cpsid	i
}
 800067a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800067c:	e7fe      	b.n	800067c <Error_Handler+0x8>
	...

08000680 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <HAL_MspInit+0x4c>)
 800068c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800068e:	4a0f      	ldr	r2, [pc, #60]	; (80006cc <HAL_MspInit+0x4c>)
 8000690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000694:	6453      	str	r3, [r2, #68]	; 0x44
 8000696:	4b0d      	ldr	r3, [pc, #52]	; (80006cc <HAL_MspInit+0x4c>)
 8000698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800069a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	603b      	str	r3, [r7, #0]
 80006a6:	4b09      	ldr	r3, [pc, #36]	; (80006cc <HAL_MspInit+0x4c>)
 80006a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006aa:	4a08      	ldr	r2, [pc, #32]	; (80006cc <HAL_MspInit+0x4c>)
 80006ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b0:	6413      	str	r3, [r2, #64]	; 0x40
 80006b2:	4b06      	ldr	r3, [pc, #24]	; (80006cc <HAL_MspInit+0x4c>)
 80006b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006be:	bf00      	nop
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	40023800 	.word	0x40023800

080006d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <NMI_Handler+0x4>

080006d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006da:	e7fe      	b.n	80006da <HardFault_Handler+0x4>

080006dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <MemManage_Handler+0x4>

080006e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006e6:	e7fe      	b.n	80006e6 <BusFault_Handler+0x4>

080006e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006ec:	e7fe      	b.n	80006ec <UsageFault_Handler+0x4>

080006ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006f2:	bf00      	nop
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr

080006fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr

0800070a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800070a:	b480      	push	{r7}
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800070e:	bf00      	nop
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr

08000718 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800071c:	f000 f8a2 	bl	8000864 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}

08000724 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_Pin);
 8000728:	2001      	movs	r0, #1
 800072a:	f000 fb8d 	bl	8000e48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
	...

08000734 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000738:	4802      	ldr	r0, [pc, #8]	; (8000744 <OTG_FS_IRQHandler+0x10>)
 800073a:	f000 fced 	bl	8001118 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000670 	.word	0x20000670

08000748 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <SystemInit+0x20>)
 800074e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000752:	4a05      	ldr	r2, [pc, #20]	; (8000768 <SystemInit+0x20>)
 8000754:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000758:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	e000ed00 	.word	0xe000ed00

0800076c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800076c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000770:	480d      	ldr	r0, [pc, #52]	; (80007a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000772:	490e      	ldr	r1, [pc, #56]	; (80007ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000774:	4a0e      	ldr	r2, [pc, #56]	; (80007b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000776:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000778:	e002      	b.n	8000780 <LoopCopyDataInit>

0800077a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800077a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800077c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800077e:	3304      	adds	r3, #4

08000780 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000780:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000782:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000784:	d3f9      	bcc.n	800077a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000786:	4a0b      	ldr	r2, [pc, #44]	; (80007b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000788:	4c0b      	ldr	r4, [pc, #44]	; (80007b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800078a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800078c:	e001      	b.n	8000792 <LoopFillZerobss>

0800078e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800078e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000790:	3204      	adds	r2, #4

08000792 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000792:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000794:	d3fb      	bcc.n	800078e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000796:	f7ff ffd7 	bl	8000748 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800079a:	f005 fbf9 	bl	8005f90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800079e:	f7ff fe8f 	bl	80004c0 <main>
  bx  lr    
 80007a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80007a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007ac:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 80007b0:	08006060 	.word	0x08006060
  ldr r2, =_sbss
 80007b4:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 80007b8:	20000a78 	.word	0x20000a78

080007bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007bc:	e7fe      	b.n	80007bc <ADC_IRQHandler>
	...

080007c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007c4:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <HAL_Init+0x40>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a0d      	ldr	r2, [pc, #52]	; (8000800 <HAL_Init+0x40>)
 80007ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007d0:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <HAL_Init+0x40>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a0a      	ldr	r2, [pc, #40]	; (8000800 <HAL_Init+0x40>)
 80007d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007dc:	4b08      	ldr	r3, [pc, #32]	; (8000800 <HAL_Init+0x40>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a07      	ldr	r2, [pc, #28]	; (8000800 <HAL_Init+0x40>)
 80007e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007e8:	2003      	movs	r0, #3
 80007ea:	f000 f94f 	bl	8000a8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ee:	200f      	movs	r0, #15
 80007f0:	f000 f808 	bl	8000804 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007f4:	f7ff ff44 	bl	8000680 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007f8:	2300      	movs	r3, #0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40023c00 	.word	0x40023c00

08000804 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <HAL_InitTick+0x54>)
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	4b12      	ldr	r3, [pc, #72]	; (800085c <HAL_InitTick+0x58>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	4619      	mov	r1, r3
 8000816:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800081a:	fbb3 f3f1 	udiv	r3, r3, r1
 800081e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000822:	4618      	mov	r0, r3
 8000824:	f000 f967 	bl	8000af6 <HAL_SYSTICK_Config>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800082e:	2301      	movs	r3, #1
 8000830:	e00e      	b.n	8000850 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2b0f      	cmp	r3, #15
 8000836:	d80a      	bhi.n	800084e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000838:	2200      	movs	r2, #0
 800083a:	6879      	ldr	r1, [r7, #4]
 800083c:	f04f 30ff 	mov.w	r0, #4294967295
 8000840:	f000 f92f 	bl	8000aa2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000844:	4a06      	ldr	r2, [pc, #24]	; (8000860 <HAL_InitTick+0x5c>)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800084a:	2300      	movs	r3, #0
 800084c:	e000      	b.n	8000850 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800084e:	2301      	movs	r3, #1
}
 8000850:	4618      	mov	r0, r3
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000000 	.word	0x20000000
 800085c:	20000008 	.word	0x20000008
 8000860:	20000004 	.word	0x20000004

08000864 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <HAL_IncTick+0x20>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	461a      	mov	r2, r3
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <HAL_IncTick+0x24>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4413      	add	r3, r2
 8000874:	4a04      	ldr	r2, [pc, #16]	; (8000888 <HAL_IncTick+0x24>)
 8000876:	6013      	str	r3, [r2, #0]
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	20000008 	.word	0x20000008
 8000888:	2000019c 	.word	0x2000019c

0800088c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  return uwTick;
 8000890:	4b03      	ldr	r3, [pc, #12]	; (80008a0 <HAL_GetTick+0x14>)
 8000892:	681b      	ldr	r3, [r3, #0]
}
 8000894:	4618      	mov	r0, r3
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	2000019c 	.word	0x2000019c

080008a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008ac:	f7ff ffee 	bl	800088c <HAL_GetTick>
 80008b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008bc:	d005      	beq.n	80008ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008be:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <HAL_Delay+0x44>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	461a      	mov	r2, r3
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	4413      	add	r3, r2
 80008c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80008ca:	bf00      	nop
 80008cc:	f7ff ffde 	bl	800088c <HAL_GetTick>
 80008d0:	4602      	mov	r2, r0
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	1ad3      	subs	r3, r2, r3
 80008d6:	68fa      	ldr	r2, [r7, #12]
 80008d8:	429a      	cmp	r2, r3
 80008da:	d8f7      	bhi.n	80008cc <HAL_Delay+0x28>
  {
  }
}
 80008dc:	bf00      	nop
 80008de:	bf00      	nop
 80008e0:	3710      	adds	r7, #16
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000008 	.word	0x20000008

080008ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	f003 0307 	and.w	r3, r3, #7
 80008fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008fc:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <__NVIC_SetPriorityGrouping+0x44>)
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000902:	68ba      	ldr	r2, [r7, #8]
 8000904:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000908:	4013      	ands	r3, r2
 800090a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000914:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800091c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800091e:	4a04      	ldr	r2, [pc, #16]	; (8000930 <__NVIC_SetPriorityGrouping+0x44>)
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	60d3      	str	r3, [r2, #12]
}
 8000924:	bf00      	nop
 8000926:	3714      	adds	r7, #20
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000938:	4b04      	ldr	r3, [pc, #16]	; (800094c <__NVIC_GetPriorityGrouping+0x18>)
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	0a1b      	lsrs	r3, r3, #8
 800093e:	f003 0307 	and.w	r3, r3, #7
}
 8000942:	4618      	mov	r0, r3
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800095a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095e:	2b00      	cmp	r3, #0
 8000960:	db0b      	blt.n	800097a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	f003 021f 	and.w	r2, r3, #31
 8000968:	4907      	ldr	r1, [pc, #28]	; (8000988 <__NVIC_EnableIRQ+0x38>)
 800096a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096e:	095b      	lsrs	r3, r3, #5
 8000970:	2001      	movs	r0, #1
 8000972:	fa00 f202 	lsl.w	r2, r0, r2
 8000976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	e000e100 	.word	0xe000e100

0800098c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	6039      	str	r1, [r7, #0]
 8000996:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099c:	2b00      	cmp	r3, #0
 800099e:	db0a      	blt.n	80009b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	b2da      	uxtb	r2, r3
 80009a4:	490c      	ldr	r1, [pc, #48]	; (80009d8 <__NVIC_SetPriority+0x4c>)
 80009a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009aa:	0112      	lsls	r2, r2, #4
 80009ac:	b2d2      	uxtb	r2, r2
 80009ae:	440b      	add	r3, r1
 80009b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009b4:	e00a      	b.n	80009cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	b2da      	uxtb	r2, r3
 80009ba:	4908      	ldr	r1, [pc, #32]	; (80009dc <__NVIC_SetPriority+0x50>)
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	f003 030f 	and.w	r3, r3, #15
 80009c2:	3b04      	subs	r3, #4
 80009c4:	0112      	lsls	r2, r2, #4
 80009c6:	b2d2      	uxtb	r2, r2
 80009c8:	440b      	add	r3, r1
 80009ca:	761a      	strb	r2, [r3, #24]
}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	e000e100 	.word	0xe000e100
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b089      	sub	sp, #36	; 0x24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	60b9      	str	r1, [r7, #8]
 80009ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	f003 0307 	and.w	r3, r3, #7
 80009f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009f4:	69fb      	ldr	r3, [r7, #28]
 80009f6:	f1c3 0307 	rsb	r3, r3, #7
 80009fa:	2b04      	cmp	r3, #4
 80009fc:	bf28      	it	cs
 80009fe:	2304      	movcs	r3, #4
 8000a00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	3304      	adds	r3, #4
 8000a06:	2b06      	cmp	r3, #6
 8000a08:	d902      	bls.n	8000a10 <NVIC_EncodePriority+0x30>
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	3b03      	subs	r3, #3
 8000a0e:	e000      	b.n	8000a12 <NVIC_EncodePriority+0x32>
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a14:	f04f 32ff 	mov.w	r2, #4294967295
 8000a18:	69bb      	ldr	r3, [r7, #24]
 8000a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1e:	43da      	mvns	r2, r3
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	401a      	ands	r2, r3
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a28:	f04f 31ff 	mov.w	r1, #4294967295
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a32:	43d9      	mvns	r1, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a38:	4313      	orrs	r3, r2
         );
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3724      	adds	r7, #36	; 0x24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
	...

08000a48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	3b01      	subs	r3, #1
 8000a54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a58:	d301      	bcc.n	8000a5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e00f      	b.n	8000a7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a5e:	4a0a      	ldr	r2, [pc, #40]	; (8000a88 <SysTick_Config+0x40>)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a66:	210f      	movs	r1, #15
 8000a68:	f04f 30ff 	mov.w	r0, #4294967295
 8000a6c:	f7ff ff8e 	bl	800098c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a70:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <SysTick_Config+0x40>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a76:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <SysTick_Config+0x40>)
 8000a78:	2207      	movs	r2, #7
 8000a7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a7c:	2300      	movs	r3, #0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	e000e010 	.word	0xe000e010

08000a8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f7ff ff29 	bl	80008ec <__NVIC_SetPriorityGrouping>
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b086      	sub	sp, #24
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	60b9      	str	r1, [r7, #8]
 8000aac:	607a      	str	r2, [r7, #4]
 8000aae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ab4:	f7ff ff3e 	bl	8000934 <__NVIC_GetPriorityGrouping>
 8000ab8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	68b9      	ldr	r1, [r7, #8]
 8000abe:	6978      	ldr	r0, [r7, #20]
 8000ac0:	f7ff ff8e 	bl	80009e0 <NVIC_EncodePriority>
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aca:	4611      	mov	r1, r2
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ff5d 	bl	800098c <__NVIC_SetPriority>
}
 8000ad2:	bf00      	nop
 8000ad4:	3718      	adds	r7, #24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b082      	sub	sp, #8
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff ff31 	bl	8000950 <__NVIC_EnableIRQ>
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b082      	sub	sp, #8
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000afe:	6878      	ldr	r0, [r7, #4]
 8000b00:	f7ff ffa2 	bl	8000a48 <SysTick_Config>
 8000b04:	4603      	mov	r3, r0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b089      	sub	sp, #36	; 0x24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]
 8000b2a:	e16b      	b.n	8000e04 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	fa02 f303 	lsl.w	r3, r2, r3
 8000b34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	697a      	ldr	r2, [r7, #20]
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	f040 815a 	bne.w	8000dfe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	f003 0303 	and.w	r3, r3, #3
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d005      	beq.n	8000b62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b5e:	2b02      	cmp	r3, #2
 8000b60:	d130      	bne.n	8000bc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	2203      	movs	r2, #3
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	43db      	mvns	r3, r3
 8000b74:	69ba      	ldr	r2, [r7, #24]
 8000b76:	4013      	ands	r3, r2
 8000b78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	68da      	ldr	r2, [r3, #12]
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	69ba      	ldr	r2, [r7, #24]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	69ba      	ldr	r2, [r7, #24]
 8000b90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b98:	2201      	movs	r2, #1
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba0:	43db      	mvns	r3, r3
 8000ba2:	69ba      	ldr	r2, [r7, #24]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	091b      	lsrs	r3, r3, #4
 8000bae:	f003 0201 	and.w	r2, r3, #1
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb8:	69ba      	ldr	r2, [r7, #24]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	69ba      	ldr	r2, [r7, #24]
 8000bc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f003 0303 	and.w	r3, r3, #3
 8000bcc:	2b03      	cmp	r3, #3
 8000bce:	d017      	beq.n	8000c00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	2203      	movs	r2, #3
 8000bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000be0:	43db      	mvns	r3, r3
 8000be2:	69ba      	ldr	r2, [r7, #24]
 8000be4:	4013      	ands	r3, r2
 8000be6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	689a      	ldr	r2, [r3, #8]
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	69ba      	ldr	r2, [r7, #24]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	69ba      	ldr	r2, [r7, #24]
 8000bfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f003 0303 	and.w	r3, r3, #3
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	d123      	bne.n	8000c54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	08da      	lsrs	r2, r3, #3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	3208      	adds	r2, #8
 8000c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	f003 0307 	and.w	r3, r3, #7
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	220f      	movs	r2, #15
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	69ba      	ldr	r2, [r7, #24]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	691a      	ldr	r2, [r3, #16]
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	f003 0307 	and.w	r3, r3, #7
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	69ba      	ldr	r2, [r7, #24]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	08da      	lsrs	r2, r3, #3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	3208      	adds	r2, #8
 8000c4e:	69b9      	ldr	r1, [r7, #24]
 8000c50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	2203      	movs	r2, #3
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	43db      	mvns	r3, r3
 8000c66:	69ba      	ldr	r2, [r7, #24]
 8000c68:	4013      	ands	r3, r2
 8000c6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f003 0203 	and.w	r2, r3, #3
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	f000 80b4 	beq.w	8000dfe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	4b60      	ldr	r3, [pc, #384]	; (8000e1c <HAL_GPIO_Init+0x30c>)
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9e:	4a5f      	ldr	r2, [pc, #380]	; (8000e1c <HAL_GPIO_Init+0x30c>)
 8000ca0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ca6:	4b5d      	ldr	r3, [pc, #372]	; (8000e1c <HAL_GPIO_Init+0x30c>)
 8000ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cb2:	4a5b      	ldr	r2, [pc, #364]	; (8000e20 <HAL_GPIO_Init+0x310>)
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	089b      	lsrs	r3, r3, #2
 8000cb8:	3302      	adds	r3, #2
 8000cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	f003 0303 	and.w	r3, r3, #3
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	220f      	movs	r2, #15
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	43db      	mvns	r3, r3
 8000cd0:	69ba      	ldr	r2, [r7, #24]
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a52      	ldr	r2, [pc, #328]	; (8000e24 <HAL_GPIO_Init+0x314>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d02b      	beq.n	8000d36 <HAL_GPIO_Init+0x226>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a51      	ldr	r2, [pc, #324]	; (8000e28 <HAL_GPIO_Init+0x318>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d025      	beq.n	8000d32 <HAL_GPIO_Init+0x222>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4a50      	ldr	r2, [pc, #320]	; (8000e2c <HAL_GPIO_Init+0x31c>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d01f      	beq.n	8000d2e <HAL_GPIO_Init+0x21e>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4a4f      	ldr	r2, [pc, #316]	; (8000e30 <HAL_GPIO_Init+0x320>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d019      	beq.n	8000d2a <HAL_GPIO_Init+0x21a>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4a4e      	ldr	r2, [pc, #312]	; (8000e34 <HAL_GPIO_Init+0x324>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d013      	beq.n	8000d26 <HAL_GPIO_Init+0x216>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a4d      	ldr	r2, [pc, #308]	; (8000e38 <HAL_GPIO_Init+0x328>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d00d      	beq.n	8000d22 <HAL_GPIO_Init+0x212>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a4c      	ldr	r2, [pc, #304]	; (8000e3c <HAL_GPIO_Init+0x32c>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d007      	beq.n	8000d1e <HAL_GPIO_Init+0x20e>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a4b      	ldr	r2, [pc, #300]	; (8000e40 <HAL_GPIO_Init+0x330>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d101      	bne.n	8000d1a <HAL_GPIO_Init+0x20a>
 8000d16:	2307      	movs	r3, #7
 8000d18:	e00e      	b.n	8000d38 <HAL_GPIO_Init+0x228>
 8000d1a:	2308      	movs	r3, #8
 8000d1c:	e00c      	b.n	8000d38 <HAL_GPIO_Init+0x228>
 8000d1e:	2306      	movs	r3, #6
 8000d20:	e00a      	b.n	8000d38 <HAL_GPIO_Init+0x228>
 8000d22:	2305      	movs	r3, #5
 8000d24:	e008      	b.n	8000d38 <HAL_GPIO_Init+0x228>
 8000d26:	2304      	movs	r3, #4
 8000d28:	e006      	b.n	8000d38 <HAL_GPIO_Init+0x228>
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	e004      	b.n	8000d38 <HAL_GPIO_Init+0x228>
 8000d2e:	2302      	movs	r3, #2
 8000d30:	e002      	b.n	8000d38 <HAL_GPIO_Init+0x228>
 8000d32:	2301      	movs	r3, #1
 8000d34:	e000      	b.n	8000d38 <HAL_GPIO_Init+0x228>
 8000d36:	2300      	movs	r3, #0
 8000d38:	69fa      	ldr	r2, [r7, #28]
 8000d3a:	f002 0203 	and.w	r2, r2, #3
 8000d3e:	0092      	lsls	r2, r2, #2
 8000d40:	4093      	lsls	r3, r2
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d48:	4935      	ldr	r1, [pc, #212]	; (8000e20 <HAL_GPIO_Init+0x310>)
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	089b      	lsrs	r3, r3, #2
 8000d4e:	3302      	adds	r3, #2
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d56:	4b3b      	ldr	r3, [pc, #236]	; (8000e44 <HAL_GPIO_Init+0x334>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	4013      	ands	r3, r2
 8000d64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d003      	beq.n	8000d7a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d7a:	4a32      	ldr	r2, [pc, #200]	; (8000e44 <HAL_GPIO_Init+0x334>)
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000d80:	4b30      	ldr	r3, [pc, #192]	; (8000e44 <HAL_GPIO_Init+0x334>)
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	69ba      	ldr	r2, [r7, #24]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d003      	beq.n	8000da4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000da4:	4a27      	ldr	r2, [pc, #156]	; (8000e44 <HAL_GPIO_Init+0x334>)
 8000da6:	69bb      	ldr	r3, [r7, #24]
 8000da8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000daa:	4b26      	ldr	r3, [pc, #152]	; (8000e44 <HAL_GPIO_Init+0x334>)
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	43db      	mvns	r3, r3
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	4013      	ands	r3, r2
 8000db8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d003      	beq.n	8000dce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000dce:	4a1d      	ldr	r2, [pc, #116]	; (8000e44 <HAL_GPIO_Init+0x334>)
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dd4:	4b1b      	ldr	r3, [pc, #108]	; (8000e44 <HAL_GPIO_Init+0x334>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	4013      	ands	r3, r2
 8000de2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d003      	beq.n	8000df8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000df8:	4a12      	ldr	r2, [pc, #72]	; (8000e44 <HAL_GPIO_Init+0x334>)
 8000dfa:	69bb      	ldr	r3, [r7, #24]
 8000dfc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3301      	adds	r3, #1
 8000e02:	61fb      	str	r3, [r7, #28]
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	2b0f      	cmp	r3, #15
 8000e08:	f67f ae90 	bls.w	8000b2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e0c:	bf00      	nop
 8000e0e:	bf00      	nop
 8000e10:	3724      	adds	r7, #36	; 0x24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40013800 	.word	0x40013800
 8000e24:	40020000 	.word	0x40020000
 8000e28:	40020400 	.word	0x40020400
 8000e2c:	40020800 	.word	0x40020800
 8000e30:	40020c00 	.word	0x40020c00
 8000e34:	40021000 	.word	0x40021000
 8000e38:	40021400 	.word	0x40021400
 8000e3c:	40021800 	.word	0x40021800
 8000e40:	40021c00 	.word	0x40021c00
 8000e44:	40013c00 	.word	0x40013c00

08000e48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000e52:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e54:	695a      	ldr	r2, [r3, #20]
 8000e56:	88fb      	ldrh	r3, [r7, #6]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d006      	beq.n	8000e6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e5e:	4a05      	ldr	r2, [pc, #20]	; (8000e74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e60:	88fb      	ldrh	r3, [r7, #6]
 8000e62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e64:	88fb      	ldrh	r3, [r7, #6]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fbec 	bl	8000644 <HAL_GPIO_EXTI_Callback>
  }
}
 8000e6c:	bf00      	nop
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40013c00 	.word	0x40013c00

08000e78 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7a:	b08f      	sub	sp, #60	; 0x3c
 8000e7c:	af0a      	add	r7, sp, #40	; 0x28
 8000e7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d101      	bne.n	8000e8a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e10f      	b.n	80010aa <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d106      	bne.n	8000eaa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f004 fd71 	bl	800598c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2203      	movs	r2, #3
 8000eae:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d102      	bne.n	8000ec4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f001 fea2 	bl	8002c12 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	603b      	str	r3, [r7, #0]
 8000ed4:	687e      	ldr	r6, [r7, #4]
 8000ed6:	466d      	mov	r5, sp
 8000ed8:	f106 0410 	add.w	r4, r6, #16
 8000edc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ede:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ee0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ee2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ee4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ee8:	e885 0003 	stmia.w	r5, {r0, r1}
 8000eec:	1d33      	adds	r3, r6, #4
 8000eee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ef0:	6838      	ldr	r0, [r7, #0]
 8000ef2:	f001 fd79 	bl	80029e8 <USB_CoreInit>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d005      	beq.n	8000f08 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2202      	movs	r2, #2
 8000f00:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	e0d0      	b.n	80010aa <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f001 fe90 	bl	8002c34 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f14:	2300      	movs	r3, #0
 8000f16:	73fb      	strb	r3, [r7, #15]
 8000f18:	e04a      	b.n	8000fb0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f1a:	7bfa      	ldrb	r2, [r7, #15]
 8000f1c:	6879      	ldr	r1, [r7, #4]
 8000f1e:	4613      	mov	r3, r2
 8000f20:	00db      	lsls	r3, r3, #3
 8000f22:	1a9b      	subs	r3, r3, r2
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	440b      	add	r3, r1
 8000f28:	333d      	adds	r3, #61	; 0x3d
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f2e:	7bfa      	ldrb	r2, [r7, #15]
 8000f30:	6879      	ldr	r1, [r7, #4]
 8000f32:	4613      	mov	r3, r2
 8000f34:	00db      	lsls	r3, r3, #3
 8000f36:	1a9b      	subs	r3, r3, r2
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	440b      	add	r3, r1
 8000f3c:	333c      	adds	r3, #60	; 0x3c
 8000f3e:	7bfa      	ldrb	r2, [r7, #15]
 8000f40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000f42:	7bfa      	ldrb	r2, [r7, #15]
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
 8000f46:	b298      	uxth	r0, r3
 8000f48:	6879      	ldr	r1, [r7, #4]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	00db      	lsls	r3, r3, #3
 8000f4e:	1a9b      	subs	r3, r3, r2
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	440b      	add	r3, r1
 8000f54:	3342      	adds	r3, #66	; 0x42
 8000f56:	4602      	mov	r2, r0
 8000f58:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f5a:	7bfa      	ldrb	r2, [r7, #15]
 8000f5c:	6879      	ldr	r1, [r7, #4]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	00db      	lsls	r3, r3, #3
 8000f62:	1a9b      	subs	r3, r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	440b      	add	r3, r1
 8000f68:	333f      	adds	r3, #63	; 0x3f
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f6e:	7bfa      	ldrb	r2, [r7, #15]
 8000f70:	6879      	ldr	r1, [r7, #4]
 8000f72:	4613      	mov	r3, r2
 8000f74:	00db      	lsls	r3, r3, #3
 8000f76:	1a9b      	subs	r3, r3, r2
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	440b      	add	r3, r1
 8000f7c:	3344      	adds	r3, #68	; 0x44
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f82:	7bfa      	ldrb	r2, [r7, #15]
 8000f84:	6879      	ldr	r1, [r7, #4]
 8000f86:	4613      	mov	r3, r2
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	1a9b      	subs	r3, r3, r2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	440b      	add	r3, r1
 8000f90:	3348      	adds	r3, #72	; 0x48
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f96:	7bfa      	ldrb	r2, [r7, #15]
 8000f98:	6879      	ldr	r1, [r7, #4]
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	00db      	lsls	r3, r3, #3
 8000f9e:	1a9b      	subs	r3, r3, r2
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	440b      	add	r3, r1
 8000fa4:	3350      	adds	r3, #80	; 0x50
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
 8000fac:	3301      	adds	r3, #1
 8000fae:	73fb      	strb	r3, [r7, #15]
 8000fb0:	7bfa      	ldrb	r2, [r7, #15]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d3af      	bcc.n	8000f1a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fba:	2300      	movs	r3, #0
 8000fbc:	73fb      	strb	r3, [r7, #15]
 8000fbe:	e044      	b.n	800104a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000fc0:	7bfa      	ldrb	r2, [r7, #15]
 8000fc2:	6879      	ldr	r1, [r7, #4]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	1a9b      	subs	r3, r3, r2
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	440b      	add	r3, r1
 8000fce:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000fd6:	7bfa      	ldrb	r2, [r7, #15]
 8000fd8:	6879      	ldr	r1, [r7, #4]
 8000fda:	4613      	mov	r3, r2
 8000fdc:	00db      	lsls	r3, r3, #3
 8000fde:	1a9b      	subs	r3, r3, r2
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	440b      	add	r3, r1
 8000fe4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000fe8:	7bfa      	ldrb	r2, [r7, #15]
 8000fea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000fec:	7bfa      	ldrb	r2, [r7, #15]
 8000fee:	6879      	ldr	r1, [r7, #4]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	00db      	lsls	r3, r3, #3
 8000ff4:	1a9b      	subs	r3, r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	440b      	add	r3, r1
 8000ffa:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000ffe:	2200      	movs	r2, #0
 8001000:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001002:	7bfa      	ldrb	r2, [r7, #15]
 8001004:	6879      	ldr	r1, [r7, #4]
 8001006:	4613      	mov	r3, r2
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	1a9b      	subs	r3, r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	440b      	add	r3, r1
 8001010:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001018:	7bfa      	ldrb	r2, [r7, #15]
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	4613      	mov	r3, r2
 800101e:	00db      	lsls	r3, r3, #3
 8001020:	1a9b      	subs	r3, r3, r2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	440b      	add	r3, r1
 8001026:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800102e:	7bfa      	ldrb	r2, [r7, #15]
 8001030:	6879      	ldr	r1, [r7, #4]
 8001032:	4613      	mov	r3, r2
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	1a9b      	subs	r3, r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	440b      	add	r3, r1
 800103c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001044:	7bfb      	ldrb	r3, [r7, #15]
 8001046:	3301      	adds	r3, #1
 8001048:	73fb      	strb	r3, [r7, #15]
 800104a:	7bfa      	ldrb	r2, [r7, #15]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	429a      	cmp	r2, r3
 8001052:	d3b5      	bcc.n	8000fc0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	603b      	str	r3, [r7, #0]
 800105a:	687e      	ldr	r6, [r7, #4]
 800105c:	466d      	mov	r5, sp
 800105e:	f106 0410 	add.w	r4, r6, #16
 8001062:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001064:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001066:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001068:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800106a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800106e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001072:	1d33      	adds	r3, r6, #4
 8001074:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001076:	6838      	ldr	r0, [r7, #0]
 8001078:	f001 fe28 	bl	8002ccc <USB_DevInit>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d005      	beq.n	800108e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2202      	movs	r2, #2
 8001086:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e00d      	b.n	80010aa <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2201      	movs	r2, #1
 800109a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f002 fea4 	bl	8003df0 <USB_DevDisconnect>

  return HAL_OK;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3714      	adds	r7, #20
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010b2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b084      	sub	sp, #16
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d101      	bne.n	80010ce <HAL_PCD_Start+0x1c>
 80010ca:	2302      	movs	r3, #2
 80010cc:	e020      	b.n	8001110 <HAL_PCD_Start+0x5e>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2201      	movs	r2, #1
 80010d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d109      	bne.n	80010f2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d005      	beq.n	80010f2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f001 fd7a 	bl	8002bf0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f002 fe54 	bl	8003dae <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800110e:	2300      	movs	r3, #0
}
 8001110:	4618      	mov	r0, r3
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001118:	b590      	push	{r4, r7, lr}
 800111a:	b08d      	sub	sp, #52	; 0x34
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001126:	6a3b      	ldr	r3, [r7, #32]
 8001128:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4618      	mov	r0, r3
 8001130:	f002 ff12 	bl	8003f58 <USB_GetMode>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	f040 839d 	bne.w	8001876 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f002 fe76 	bl	8003e32 <USB_ReadInterrupts>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	f000 8393 	beq.w	8001874 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4618      	mov	r0, r3
 8001154:	f002 fe6d 	bl	8003e32 <USB_ReadInterrupts>
 8001158:	4603      	mov	r3, r0
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	2b02      	cmp	r3, #2
 8001160:	d107      	bne.n	8001172 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	695a      	ldr	r2, [r3, #20]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f002 0202 	and.w	r2, r2, #2
 8001170:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4618      	mov	r0, r3
 8001178:	f002 fe5b 	bl	8003e32 <USB_ReadInterrupts>
 800117c:	4603      	mov	r3, r0
 800117e:	f003 0310 	and.w	r3, r3, #16
 8001182:	2b10      	cmp	r3, #16
 8001184:	d161      	bne.n	800124a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	699a      	ldr	r2, [r3, #24]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f022 0210 	bic.w	r2, r2, #16
 8001194:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001196:	6a3b      	ldr	r3, [r7, #32]
 8001198:	6a1b      	ldr	r3, [r3, #32]
 800119a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	f003 020f 	and.w	r2, r3, #15
 80011a2:	4613      	mov	r3, r2
 80011a4:	00db      	lsls	r3, r3, #3
 80011a6:	1a9b      	subs	r3, r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	4413      	add	r3, r2
 80011b2:	3304      	adds	r3, #4
 80011b4:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	0c5b      	lsrs	r3, r3, #17
 80011ba:	f003 030f 	and.w	r3, r3, #15
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d124      	bne.n	800120c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80011c8:	4013      	ands	r3, r2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d035      	beq.n	800123a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	091b      	lsrs	r3, r3, #4
 80011d6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011dc:	b29b      	uxth	r3, r3
 80011de:	461a      	mov	r2, r3
 80011e0:	6a38      	ldr	r0, [r7, #32]
 80011e2:	f002 fc92 	bl	8003b0a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	68da      	ldr	r2, [r3, #12]
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	091b      	lsrs	r3, r3, #4
 80011ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011f2:	441a      	add	r2, r3
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	699a      	ldr	r2, [r3, #24]
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	091b      	lsrs	r3, r3, #4
 8001200:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001204:	441a      	add	r2, r3
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	619a      	str	r2, [r3, #24]
 800120a:	e016      	b.n	800123a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	0c5b      	lsrs	r3, r3, #17
 8001210:	f003 030f 	and.w	r3, r3, #15
 8001214:	2b06      	cmp	r3, #6
 8001216:	d110      	bne.n	800123a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800121e:	2208      	movs	r2, #8
 8001220:	4619      	mov	r1, r3
 8001222:	6a38      	ldr	r0, [r7, #32]
 8001224:	f002 fc71 	bl	8003b0a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	699a      	ldr	r2, [r3, #24]
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	091b      	lsrs	r3, r3, #4
 8001230:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001234:	441a      	add	r2, r3
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	699a      	ldr	r2, [r3, #24]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f042 0210 	orr.w	r2, r2, #16
 8001248:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f002 fdef 	bl	8003e32 <USB_ReadInterrupts>
 8001254:	4603      	mov	r3, r0
 8001256:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800125a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800125e:	d16e      	bne.n	800133e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001260:	2300      	movs	r3, #0
 8001262:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4618      	mov	r0, r3
 800126a:	f002 fdf5 	bl	8003e58 <USB_ReadDevAllOutEpInterrupt>
 800126e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001270:	e062      	b.n	8001338 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	2b00      	cmp	r3, #0
 800127a:	d057      	beq.n	800132c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	4611      	mov	r1, r2
 8001286:	4618      	mov	r0, r3
 8001288:	f002 fe1a 	bl	8003ec0 <USB_ReadDevOutEPInterrupt>
 800128c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	f003 0301 	and.w	r3, r3, #1
 8001294:	2b00      	cmp	r3, #0
 8001296:	d00c      	beq.n	80012b2 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129a:	015a      	lsls	r2, r3, #5
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	4413      	add	r3, r2
 80012a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012a4:	461a      	mov	r2, r3
 80012a6:	2301      	movs	r3, #1
 80012a8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80012aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f000 fd99 	bl	8001de4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	f003 0308 	and.w	r3, r3, #8
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d00c      	beq.n	80012d6 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80012bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012be:	015a      	lsls	r2, r3, #5
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	4413      	add	r3, r2
 80012c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012c8:	461a      	mov	r2, r3
 80012ca:	2308      	movs	r3, #8
 80012cc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80012ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f000 fe93 	bl	8001ffc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	f003 0310 	and.w	r3, r3, #16
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d008      	beq.n	80012f2 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80012e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e2:	015a      	lsls	r2, r3, #5
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	4413      	add	r3, r2
 80012e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012ec:	461a      	mov	r2, r3
 80012ee:	2310      	movs	r3, #16
 80012f0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	f003 0320 	and.w	r3, r3, #32
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d008      	beq.n	800130e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80012fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fe:	015a      	lsls	r2, r3, #5
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	4413      	add	r3, r2
 8001304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001308:	461a      	mov	r2, r3
 800130a:	2320      	movs	r3, #32
 800130c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d009      	beq.n	800132c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131a:	015a      	lsls	r2, r3, #5
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	4413      	add	r3, r2
 8001320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001324:	461a      	mov	r2, r3
 8001326:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800132a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800132c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132e:	3301      	adds	r3, #1
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001334:	085b      	lsrs	r3, r3, #1
 8001336:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800133a:	2b00      	cmp	r3, #0
 800133c:	d199      	bne.n	8001272 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f002 fd75 	bl	8003e32 <USB_ReadInterrupts>
 8001348:	4603      	mov	r3, r0
 800134a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800134e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001352:	f040 80c0 	bne.w	80014d6 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4618      	mov	r0, r3
 800135c:	f002 fd96 	bl	8003e8c <USB_ReadDevAllInEpInterrupt>
 8001360:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001362:	2300      	movs	r3, #0
 8001364:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001366:	e0b2      	b.n	80014ce <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	2b00      	cmp	r3, #0
 8001370:	f000 80a7 	beq.w	80014c2 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800137a:	b2d2      	uxtb	r2, r2
 800137c:	4611      	mov	r1, r2
 800137e:	4618      	mov	r0, r3
 8001380:	f002 fdbc 	bl	8003efc <USB_ReadDevInEPInterrupt>
 8001384:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	2b00      	cmp	r3, #0
 800138e:	d057      	beq.n	8001440 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001392:	f003 030f 	and.w	r3, r3, #15
 8001396:	2201      	movs	r2, #1
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	43db      	mvns	r3, r3
 80013aa:	69f9      	ldr	r1, [r7, #28]
 80013ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80013b0:	4013      	ands	r3, r2
 80013b2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80013b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b6:	015a      	lsls	r2, r3, #5
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	4413      	add	r3, r2
 80013bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013c0:	461a      	mov	r2, r3
 80013c2:	2301      	movs	r3, #1
 80013c4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	691b      	ldr	r3, [r3, #16]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d132      	bne.n	8001434 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013d2:	4613      	mov	r3, r2
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	1a9b      	subs	r3, r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	440b      	add	r3, r1
 80013dc:	3348      	adds	r3, #72	; 0x48
 80013de:	6819      	ldr	r1, [r3, #0]
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013e4:	4613      	mov	r3, r2
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	1a9b      	subs	r3, r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	4403      	add	r3, r0
 80013ee:	3344      	adds	r3, #68	; 0x44
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4419      	add	r1, r3
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013f8:	4613      	mov	r3, r2
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	1a9b      	subs	r3, r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4403      	add	r3, r0
 8001402:	3348      	adds	r3, #72	; 0x48
 8001404:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001408:	2b00      	cmp	r3, #0
 800140a:	d113      	bne.n	8001434 <HAL_PCD_IRQHandler+0x31c>
 800140c:	6879      	ldr	r1, [r7, #4]
 800140e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001410:	4613      	mov	r3, r2
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	1a9b      	subs	r3, r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	440b      	add	r3, r1
 800141a:	3350      	adds	r3, #80	; 0x50
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d108      	bne.n	8001434 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6818      	ldr	r0, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800142c:	461a      	mov	r2, r3
 800142e:	2101      	movs	r1, #1
 8001430:	f002 fdc4 	bl	8003fbc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001436:	b2db      	uxtb	r3, r3
 8001438:	4619      	mov	r1, r3
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f004 fb27 	bl	8005a8e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	f003 0308 	and.w	r3, r3, #8
 8001446:	2b00      	cmp	r3, #0
 8001448:	d008      	beq.n	800145c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800144a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144c:	015a      	lsls	r2, r3, #5
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	4413      	add	r3, r2
 8001452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001456:	461a      	mov	r2, r3
 8001458:	2308      	movs	r3, #8
 800145a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	f003 0310 	and.w	r3, r3, #16
 8001462:	2b00      	cmp	r3, #0
 8001464:	d008      	beq.n	8001478 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001468:	015a      	lsls	r2, r3, #5
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	4413      	add	r3, r2
 800146e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001472:	461a      	mov	r2, r3
 8001474:	2310      	movs	r3, #16
 8001476:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800147e:	2b00      	cmp	r3, #0
 8001480:	d008      	beq.n	8001494 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001484:	015a      	lsls	r2, r3, #5
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	4413      	add	r3, r2
 800148a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800148e:	461a      	mov	r2, r3
 8001490:	2340      	movs	r3, #64	; 0x40
 8001492:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d008      	beq.n	80014b0 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800149e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a0:	015a      	lsls	r2, r3, #5
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	4413      	add	r3, r2
 80014a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014aa:	461a      	mov	r2, r3
 80014ac:	2302      	movs	r3, #2
 80014ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80014ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f000 fc03 	bl	8001cc8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80014c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c4:	3301      	adds	r3, #1
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80014c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ca:	085b      	lsrs	r3, r3, #1
 80014cc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80014ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	f47f af49 	bne.w	8001368 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f002 fca9 	bl	8003e32 <USB_ReadInterrupts>
 80014e0:	4603      	mov	r3, r0
 80014e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80014e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80014ea:	d122      	bne.n	8001532 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	69fa      	ldr	r2, [r7, #28]
 80014f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80014fa:	f023 0301 	bic.w	r3, r3, #1
 80014fe:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001506:	2b01      	cmp	r3, #1
 8001508:	d108      	bne.n	800151c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001512:	2100      	movs	r1, #0
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f000 fe0f 	bl	8002138 <HAL_PCDEx_LPM_Callback>
 800151a:	e002      	b.n	8001522 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f004 fb2d 	bl	8005b7c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	695a      	ldr	r2, [r3, #20]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001530:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f002 fc7b 	bl	8003e32 <USB_ReadInterrupts>
 800153c:	4603      	mov	r3, r0
 800153e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001542:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001546:	d112      	bne.n	800156e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	2b01      	cmp	r3, #1
 8001556:	d102      	bne.n	800155e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f004 fae9 	bl	8005b30 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	695a      	ldr	r2, [r3, #20]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800156c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f002 fc5d 	bl	8003e32 <USB_ReadInterrupts>
 8001578:	4603      	mov	r3, r0
 800157a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800157e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001582:	f040 80c7 	bne.w	8001714 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	69fa      	ldr	r2, [r7, #28]
 8001590:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001594:	f023 0301 	bic.w	r3, r3, #1
 8001598:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2110      	movs	r1, #16
 80015a0:	4618      	mov	r0, r3
 80015a2:	f001 fcf7 	bl	8002f94 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015a6:	2300      	movs	r3, #0
 80015a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015aa:	e056      	b.n	800165a <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80015ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ae:	015a      	lsls	r2, r3, #5
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	4413      	add	r3, r2
 80015b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015b8:	461a      	mov	r2, r3
 80015ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80015be:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80015c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c2:	015a      	lsls	r2, r3, #5
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	4413      	add	r3, r2
 80015c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015d0:	0151      	lsls	r1, r2, #5
 80015d2:	69fa      	ldr	r2, [r7, #28]
 80015d4:	440a      	add	r2, r1
 80015d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80015da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80015de:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80015e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e2:	015a      	lsls	r2, r3, #5
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	4413      	add	r3, r2
 80015e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015f0:	0151      	lsls	r1, r2, #5
 80015f2:	69fa      	ldr	r2, [r7, #28]
 80015f4:	440a      	add	r2, r1
 80015f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80015fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80015fe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001602:	015a      	lsls	r2, r3, #5
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	4413      	add	r3, r2
 8001608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800160c:	461a      	mov	r2, r3
 800160e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001612:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001616:	015a      	lsls	r2, r3, #5
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	4413      	add	r3, r2
 800161c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001624:	0151      	lsls	r1, r2, #5
 8001626:	69fa      	ldr	r2, [r7, #28]
 8001628:	440a      	add	r2, r1
 800162a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800162e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001632:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001636:	015a      	lsls	r2, r3, #5
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	4413      	add	r3, r2
 800163c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001644:	0151      	lsls	r1, r2, #5
 8001646:	69fa      	ldr	r2, [r7, #28]
 8001648:	440a      	add	r2, r1
 800164a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800164e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001652:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001656:	3301      	adds	r3, #1
 8001658:	62fb      	str	r3, [r7, #44]	; 0x2c
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001660:	429a      	cmp	r2, r3
 8001662:	d3a3      	bcc.n	80015ac <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800166a:	69db      	ldr	r3, [r3, #28]
 800166c:	69fa      	ldr	r2, [r7, #28]
 800166e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001672:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001676:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167c:	2b00      	cmp	r3, #0
 800167e:	d016      	beq.n	80016ae <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001686:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800168a:	69fa      	ldr	r2, [r7, #28]
 800168c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001690:	f043 030b 	orr.w	r3, r3, #11
 8001694:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800169e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a0:	69fa      	ldr	r2, [r7, #28]
 80016a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016a6:	f043 030b 	orr.w	r3, r3, #11
 80016aa:	6453      	str	r3, [r2, #68]	; 0x44
 80016ac:	e015      	b.n	80016da <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	69fa      	ldr	r2, [r7, #28]
 80016b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016c0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80016c4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	69fa      	ldr	r2, [r7, #28]
 80016d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016d4:	f043 030b 	orr.w	r3, r3, #11
 80016d8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	69fa      	ldr	r2, [r7, #28]
 80016e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016e8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80016ec:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6818      	ldr	r0, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80016fe:	461a      	mov	r2, r3
 8001700:	f002 fc5c 	bl	8003fbc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	695a      	ldr	r2, [r3, #20]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001712:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f002 fb8a 	bl	8003e32 <USB_ReadInterrupts>
 800171e:	4603      	mov	r3, r0
 8001720:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001724:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001728:	d124      	bne.n	8001774 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f002 fc20 	bl	8003f74 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f001 fc88 	bl	800304e <USB_GetDevSpeed>
 800173e:	4603      	mov	r3, r0
 8001740:	461a      	mov	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681c      	ldr	r4, [r3, #0]
 800174a:	f001 f941 	bl	80029d0 <HAL_RCC_GetHCLKFreq>
 800174e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001754:	b2db      	uxtb	r3, r3
 8001756:	461a      	mov	r2, r3
 8001758:	4620      	mov	r0, r4
 800175a:	f001 f9a7 	bl	8002aac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f004 f9bd 	bl	8005ade <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	695a      	ldr	r2, [r3, #20]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001772:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4618      	mov	r0, r3
 800177a:	f002 fb5a 	bl	8003e32 <USB_ReadInterrupts>
 800177e:	4603      	mov	r3, r0
 8001780:	f003 0308 	and.w	r3, r3, #8
 8001784:	2b08      	cmp	r3, #8
 8001786:	d10a      	bne.n	800179e <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f004 f99a 	bl	8005ac2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	695a      	ldr	r2, [r3, #20]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f002 0208 	and.w	r2, r2, #8
 800179c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f002 fb45 	bl	8003e32 <USB_ReadInterrupts>
 80017a8:	4603      	mov	r3, r0
 80017aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80017b2:	d10f      	bne.n	80017d4 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80017b4:	2300      	movs	r3, #0
 80017b6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80017b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	4619      	mov	r1, r3
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f004 f9fc 	bl	8005bbc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	695a      	ldr	r2, [r3, #20]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80017d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f002 fb2a 	bl	8003e32 <USB_ReadInterrupts>
 80017de:	4603      	mov	r3, r0
 80017e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80017e8:	d10f      	bne.n	800180a <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80017ea:	2300      	movs	r3, #0
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	4619      	mov	r1, r3
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f004 f9cf 	bl	8005b98 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	695a      	ldr	r2, [r3, #20]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001808:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f002 fb0f 	bl	8003e32 <USB_ReadInterrupts>
 8001814:	4603      	mov	r3, r0
 8001816:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800181a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800181e:	d10a      	bne.n	8001836 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f004 f9dd 	bl	8005be0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	695a      	ldr	r2, [r3, #20]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001834:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f002 faf9 	bl	8003e32 <USB_ReadInterrupts>
 8001840:	4603      	mov	r3, r0
 8001842:	f003 0304 	and.w	r3, r3, #4
 8001846:	2b04      	cmp	r3, #4
 8001848:	d115      	bne.n	8001876 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	2b00      	cmp	r3, #0
 800185a:	d002      	beq.n	8001862 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f004 f9cd 	bl	8005bfc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6859      	ldr	r1, [r3, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	430a      	orrs	r2, r1
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	e000      	b.n	8001876 <HAL_PCD_IRQHandler+0x75e>
      return;
 8001874:	bf00      	nop
    }
  }
}
 8001876:	3734      	adds	r7, #52	; 0x34
 8001878:	46bd      	mov	sp, r7
 800187a:	bd90      	pop	{r4, r7, pc}

0800187c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	460b      	mov	r3, r1
 8001886:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800188e:	2b01      	cmp	r3, #1
 8001890:	d101      	bne.n	8001896 <HAL_PCD_SetAddress+0x1a>
 8001892:	2302      	movs	r3, #2
 8001894:	e013      	b.n	80018be <HAL_PCD_SetAddress+0x42>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2201      	movs	r2, #1
 800189a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	78fa      	ldrb	r2, [r7, #3]
 80018a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	78fa      	ldrb	r2, [r7, #3]
 80018ac:	4611      	mov	r1, r2
 80018ae:	4618      	mov	r0, r3
 80018b0:	f002 fa57 	bl	8003d62 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b084      	sub	sp, #16
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
 80018ce:	4608      	mov	r0, r1
 80018d0:	4611      	mov	r1, r2
 80018d2:	461a      	mov	r2, r3
 80018d4:	4603      	mov	r3, r0
 80018d6:	70fb      	strb	r3, [r7, #3]
 80018d8:	460b      	mov	r3, r1
 80018da:	803b      	strh	r3, [r7, #0]
 80018dc:	4613      	mov	r3, r2
 80018de:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80018e0:	2300      	movs	r3, #0
 80018e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80018e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	da0f      	bge.n	800190c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018ec:	78fb      	ldrb	r3, [r7, #3]
 80018ee:	f003 020f 	and.w	r2, r3, #15
 80018f2:	4613      	mov	r3, r2
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	1a9b      	subs	r3, r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	3338      	adds	r3, #56	; 0x38
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	4413      	add	r3, r2
 8001900:	3304      	adds	r3, #4
 8001902:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2201      	movs	r2, #1
 8001908:	705a      	strb	r2, [r3, #1]
 800190a:	e00f      	b.n	800192c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800190c:	78fb      	ldrb	r3, [r7, #3]
 800190e:	f003 020f 	and.w	r2, r3, #15
 8001912:	4613      	mov	r3, r2
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	1a9b      	subs	r3, r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	4413      	add	r3, r2
 8001922:	3304      	adds	r3, #4
 8001924:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2200      	movs	r2, #0
 800192a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800192c:	78fb      	ldrb	r3, [r7, #3]
 800192e:	f003 030f 	and.w	r3, r3, #15
 8001932:	b2da      	uxtb	r2, r3
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001938:	883a      	ldrh	r2, [r7, #0]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	78ba      	ldrb	r2, [r7, #2]
 8001942:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	785b      	ldrb	r3, [r3, #1]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d004      	beq.n	8001956 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	b29a      	uxth	r2, r3
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001956:	78bb      	ldrb	r3, [r7, #2]
 8001958:	2b02      	cmp	r3, #2
 800195a:	d102      	bne.n	8001962 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2200      	movs	r2, #0
 8001960:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001968:	2b01      	cmp	r3, #1
 800196a:	d101      	bne.n	8001970 <HAL_PCD_EP_Open+0xaa>
 800196c:	2302      	movs	r3, #2
 800196e:	e00e      	b.n	800198e <HAL_PCD_EP_Open+0xc8>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2201      	movs	r2, #1
 8001974:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	68f9      	ldr	r1, [r7, #12]
 800197e:	4618      	mov	r0, r3
 8001980:	f001 fb8a 	bl	8003098 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800198c:	7afb      	ldrb	r3, [r7, #11]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b084      	sub	sp, #16
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
 800199e:	460b      	mov	r3, r1
 80019a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80019a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	da0f      	bge.n	80019ca <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019aa:	78fb      	ldrb	r3, [r7, #3]
 80019ac:	f003 020f 	and.w	r2, r3, #15
 80019b0:	4613      	mov	r3, r2
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	1a9b      	subs	r3, r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	3338      	adds	r3, #56	; 0x38
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	4413      	add	r3, r2
 80019be:	3304      	adds	r3, #4
 80019c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2201      	movs	r2, #1
 80019c6:	705a      	strb	r2, [r3, #1]
 80019c8:	e00f      	b.n	80019ea <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019ca:	78fb      	ldrb	r3, [r7, #3]
 80019cc:	f003 020f 	and.w	r2, r3, #15
 80019d0:	4613      	mov	r3, r2
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	1a9b      	subs	r3, r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	4413      	add	r3, r2
 80019e0:	3304      	adds	r3, #4
 80019e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2200      	movs	r2, #0
 80019e8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80019ea:	78fb      	ldrb	r3, [r7, #3]
 80019ec:	f003 030f 	and.w	r3, r3, #15
 80019f0:	b2da      	uxtb	r2, r3
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d101      	bne.n	8001a04 <HAL_PCD_EP_Close+0x6e>
 8001a00:	2302      	movs	r3, #2
 8001a02:	e00e      	b.n	8001a22 <HAL_PCD_EP_Close+0x8c>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	68f9      	ldr	r1, [r7, #12]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f001 fbc8 	bl	80031a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b086      	sub	sp, #24
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	60f8      	str	r0, [r7, #12]
 8001a32:	607a      	str	r2, [r7, #4]
 8001a34:	603b      	str	r3, [r7, #0]
 8001a36:	460b      	mov	r3, r1
 8001a38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a3a:	7afb      	ldrb	r3, [r7, #11]
 8001a3c:	f003 020f 	and.w	r2, r3, #15
 8001a40:	4613      	mov	r3, r2
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	1a9b      	subs	r3, r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a4c:	68fa      	ldr	r2, [r7, #12]
 8001a4e:	4413      	add	r3, r2
 8001a50:	3304      	adds	r3, #4
 8001a52:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	2200      	movs	r2, #0
 8001a64:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a6c:	7afb      	ldrb	r3, [r7, #11]
 8001a6e:	f003 030f 	and.w	r3, r3, #15
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	691b      	ldr	r3, [r3, #16]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d102      	bne.n	8001a86 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a86:	7afb      	ldrb	r3, [r7, #11]
 8001a88:	f003 030f 	and.w	r3, r3, #15
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d109      	bne.n	8001aa4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6818      	ldr	r0, [r3, #0]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	6979      	ldr	r1, [r7, #20]
 8001a9e:	f001 fea3 	bl	80037e8 <USB_EP0StartXfer>
 8001aa2:	e008      	b.n	8001ab6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6818      	ldr	r0, [r3, #0]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	461a      	mov	r2, r3
 8001ab0:	6979      	ldr	r1, [r7, #20]
 8001ab2:	f001 fc55 	bl	8003360 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3718      	adds	r7, #24
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	607a      	str	r2, [r7, #4]
 8001aca:	603b      	str	r3, [r7, #0]
 8001acc:	460b      	mov	r3, r1
 8001ace:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ad0:	7afb      	ldrb	r3, [r7, #11]
 8001ad2:	f003 020f 	and.w	r2, r3, #15
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	1a9b      	subs	r3, r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	3338      	adds	r3, #56	; 0x38
 8001ae0:	68fa      	ldr	r2, [r7, #12]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	3304      	adds	r3, #4
 8001ae6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	683a      	ldr	r2, [r7, #0]
 8001af2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	2200      	movs	r2, #0
 8001af8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	2201      	movs	r2, #1
 8001afe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b00:	7afb      	ldrb	r3, [r7, #11]
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	b2da      	uxtb	r2, r3
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d102      	bne.n	8001b1a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b1a:	7afb      	ldrb	r3, [r7, #11]
 8001b1c:	f003 030f 	and.w	r3, r3, #15
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d109      	bne.n	8001b38 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6818      	ldr	r0, [r3, #0]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	461a      	mov	r2, r3
 8001b30:	6979      	ldr	r1, [r7, #20]
 8001b32:	f001 fe59 	bl	80037e8 <USB_EP0StartXfer>
 8001b36:	e008      	b.n	8001b4a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6818      	ldr	r0, [r3, #0]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	691b      	ldr	r3, [r3, #16]
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	461a      	mov	r2, r3
 8001b44:	6979      	ldr	r1, [r7, #20]
 8001b46:	f001 fc0b 	bl	8003360 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3718      	adds	r7, #24
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001b60:	78fb      	ldrb	r3, [r7, #3]
 8001b62:	f003 020f 	and.w	r2, r3, #15
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d901      	bls.n	8001b72 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e050      	b.n	8001c14 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	da0f      	bge.n	8001b9a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b7a:	78fb      	ldrb	r3, [r7, #3]
 8001b7c:	f003 020f 	and.w	r2, r3, #15
 8001b80:	4613      	mov	r3, r2
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	1a9b      	subs	r3, r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	3338      	adds	r3, #56	; 0x38
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	3304      	adds	r3, #4
 8001b90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2201      	movs	r2, #1
 8001b96:	705a      	strb	r2, [r3, #1]
 8001b98:	e00d      	b.n	8001bb6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001b9a:	78fa      	ldrb	r2, [r7, #3]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	1a9b      	subs	r3, r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	4413      	add	r3, r2
 8001bac:	3304      	adds	r3, #4
 8001bae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bbc:	78fb      	ldrb	r3, [r7, #3]
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	b2da      	uxtb	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d101      	bne.n	8001bd6 <HAL_PCD_EP_SetStall+0x82>
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	e01e      	b.n	8001c14 <HAL_PCD_EP_SetStall+0xc0>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68f9      	ldr	r1, [r7, #12]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f001 ffe8 	bl	8003bba <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bea:	78fb      	ldrb	r3, [r7, #3]
 8001bec:	f003 030f 	and.w	r3, r3, #15
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d10a      	bne.n	8001c0a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6818      	ldr	r0, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	b2d9      	uxtb	r1, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001c04:	461a      	mov	r2, r3
 8001c06:	f002 f9d9 	bl	8003fbc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3710      	adds	r7, #16
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	460b      	mov	r3, r1
 8001c26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001c28:	78fb      	ldrb	r3, [r7, #3]
 8001c2a:	f003 020f 	and.w	r2, r3, #15
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d901      	bls.n	8001c3a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e042      	b.n	8001cc0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	da0f      	bge.n	8001c62 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c42:	78fb      	ldrb	r3, [r7, #3]
 8001c44:	f003 020f 	and.w	r2, r3, #15
 8001c48:	4613      	mov	r3, r2
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	1a9b      	subs	r3, r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	3338      	adds	r3, #56	; 0x38
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	3304      	adds	r3, #4
 8001c58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	705a      	strb	r2, [r3, #1]
 8001c60:	e00f      	b.n	8001c82 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c62:	78fb      	ldrb	r3, [r7, #3]
 8001c64:	f003 020f 	and.w	r2, r3, #15
 8001c68:	4613      	mov	r3, r2
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	1a9b      	subs	r3, r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	4413      	add	r3, r2
 8001c78:	3304      	adds	r3, #4
 8001c7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2200      	movs	r2, #0
 8001c86:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c88:	78fb      	ldrb	r3, [r7, #3]
 8001c8a:	f003 030f 	and.w	r3, r3, #15
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d101      	bne.n	8001ca2 <HAL_PCD_EP_ClrStall+0x86>
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	e00e      	b.n	8001cc0 <HAL_PCD_EP_ClrStall+0xa4>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68f9      	ldr	r1, [r7, #12]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f001 fff0 	bl	8003c96 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3710      	adds	r7, #16
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08a      	sub	sp, #40	; 0x28
 8001ccc:	af02      	add	r7, sp, #8
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	1a9b      	subs	r3, r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	3338      	adds	r3, #56	; 0x38
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	4413      	add	r3, r2
 8001cec:	3304      	adds	r3, #4
 8001cee:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	699a      	ldr	r2, [r3, #24]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	695b      	ldr	r3, [r3, #20]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d901      	bls.n	8001d00 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e06c      	b.n	8001dda <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	695a      	ldr	r2, [r3, #20]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	69fa      	ldr	r2, [r7, #28]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d902      	bls.n	8001d1c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	3303      	adds	r3, #3
 8001d20:	089b      	lsrs	r3, r3, #2
 8001d22:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d24:	e02b      	b.n	8001d7e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	695a      	ldr	r2, [r3, #20]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	69fa      	ldr	r2, [r7, #28]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d902      	bls.n	8001d42 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	3303      	adds	r3, #3
 8001d46:	089b      	lsrs	r3, r3, #2
 8001d48:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	68d9      	ldr	r1, [r3, #12]
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	b2da      	uxtb	r2, r3
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	9300      	str	r3, [sp, #0]
 8001d5e:	4603      	mov	r3, r0
 8001d60:	6978      	ldr	r0, [r7, #20]
 8001d62:	f001 fe94 	bl	8003a8e <USB_WritePacket>

    ep->xfer_buff  += len;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	68da      	ldr	r2, [r3, #12]
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	441a      	add	r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	699a      	ldr	r2, [r3, #24]
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	441a      	add	r2, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	015a      	lsls	r2, r3, #5
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	4413      	add	r3, r2
 8001d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d809      	bhi.n	8001da8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	699a      	ldr	r2, [r3, #24]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d203      	bcs.n	8001da8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	695b      	ldr	r3, [r3, #20]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1be      	bne.n	8001d26 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	695a      	ldr	r2, [r3, #20]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d811      	bhi.n	8001dd8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	2201      	movs	r2, #1
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	6939      	ldr	r1, [r7, #16]
 8001dd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3720      	adds	r7, #32
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
	...

08001de4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	333c      	adds	r3, #60	; 0x3c
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	015a      	lsls	r2, r3, #5
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	4413      	add	r3, r2
 8001e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	f040 80a0 	bne.w	8001f5c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	f003 0308 	and.w	r3, r3, #8
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d015      	beq.n	8001e52 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	4a72      	ldr	r2, [pc, #456]	; (8001ff4 <PCD_EP_OutXfrComplete_int+0x210>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	f240 80dd 	bls.w	8001fea <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f000 80d7 	beq.w	8001fea <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	015a      	lsls	r2, r3, #5
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	4413      	add	r3, r2
 8001e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e48:	461a      	mov	r2, r3
 8001e4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e4e:	6093      	str	r3, [r2, #8]
 8001e50:	e0cb      	b.n	8001fea <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	f003 0320 	and.w	r3, r3, #32
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d009      	beq.n	8001e70 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	015a      	lsls	r2, r3, #5
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	4413      	add	r3, r2
 8001e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e68:	461a      	mov	r2, r3
 8001e6a:	2320      	movs	r3, #32
 8001e6c:	6093      	str	r3, [r2, #8]
 8001e6e:	e0bc      	b.n	8001fea <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f040 80b7 	bne.w	8001fea <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	4a5d      	ldr	r2, [pc, #372]	; (8001ff4 <PCD_EP_OutXfrComplete_int+0x210>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d90f      	bls.n	8001ea4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d00a      	beq.n	8001ea4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	015a      	lsls	r2, r3, #5
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	4413      	add	r3, r2
 8001e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ea0:	6093      	str	r3, [r2, #8]
 8001ea2:	e0a2      	b.n	8001fea <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001ea4:	6879      	ldr	r1, [r7, #4]
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	1a9b      	subs	r3, r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001eb6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	0159      	lsls	r1, r3, #5
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	440b      	add	r3, r1
 8001ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001eca:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	1a9b      	subs	r3, r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4403      	add	r3, r0
 8001eda:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001ede:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001ee0:	6879      	ldr	r1, [r7, #4]
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	1a9b      	subs	r3, r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	440b      	add	r3, r1
 8001eee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ef2:	6819      	ldr	r1, [r3, #0]
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	1a9b      	subs	r3, r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4403      	add	r3, r0
 8001f02:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4419      	add	r1, r3
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	1a9b      	subs	r3, r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4403      	add	r3, r0
 8001f18:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f1c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d114      	bne.n	8001f4e <PCD_EP_OutXfrComplete_int+0x16a>
 8001f24:	6879      	ldr	r1, [r7, #4]
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	1a9b      	subs	r3, r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	440b      	add	r3, r1
 8001f32:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d108      	bne.n	8001f4e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6818      	ldr	r0, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f46:	461a      	mov	r2, r3
 8001f48:	2101      	movs	r1, #1
 8001f4a:	f002 f837 	bl	8003fbc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	4619      	mov	r1, r3
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f003 fd7f 	bl	8005a58 <HAL_PCD_DataOutStageCallback>
 8001f5a:	e046      	b.n	8001fea <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	4a26      	ldr	r2, [pc, #152]	; (8001ff8 <PCD_EP_OutXfrComplete_int+0x214>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d124      	bne.n	8001fae <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00a      	beq.n	8001f84 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	015a      	lsls	r2, r3, #5
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	4413      	add	r3, r2
 8001f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f80:	6093      	str	r3, [r2, #8]
 8001f82:	e032      	b.n	8001fea <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	f003 0320 	and.w	r3, r3, #32
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d008      	beq.n	8001fa0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	015a      	lsls	r2, r3, #5
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	4413      	add	r3, r2
 8001f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	2320      	movs	r3, #32
 8001f9e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f003 fd56 	bl	8005a58 <HAL_PCD_DataOutStageCallback>
 8001fac:	e01d      	b.n	8001fea <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d114      	bne.n	8001fde <PCD_EP_OutXfrComplete_int+0x1fa>
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	1a9b      	subs	r3, r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	440b      	add	r3, r1
 8001fc2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d108      	bne.n	8001fde <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6818      	ldr	r0, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	2100      	movs	r1, #0
 8001fda:	f001 ffef 	bl	8003fbc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f003 fd37 	bl	8005a58 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	4f54300a 	.word	0x4f54300a
 8001ff8:	4f54310a 	.word	0x4f54310a

08001ffc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	333c      	adds	r3, #60	; 0x3c
 8002014:	3304      	adds	r3, #4
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	015a      	lsls	r2, r3, #5
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	4413      	add	r3, r2
 8002022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	4a15      	ldr	r2, [pc, #84]	; (8002084 <PCD_EP_OutSetupPacket_int+0x88>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d90e      	bls.n	8002050 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002038:	2b00      	cmp	r3, #0
 800203a:	d009      	beq.n	8002050 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	015a      	lsls	r2, r3, #5
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	4413      	add	r3, r2
 8002044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002048:	461a      	mov	r2, r3
 800204a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800204e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f003 fcef 	bl	8005a34 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	4a0a      	ldr	r2, [pc, #40]	; (8002084 <PCD_EP_OutSetupPacket_int+0x88>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d90c      	bls.n	8002078 <PCD_EP_OutSetupPacket_int+0x7c>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d108      	bne.n	8002078 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6818      	ldr	r0, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002070:	461a      	mov	r2, r3
 8002072:	2101      	movs	r1, #1
 8002074:	f001 ffa2 	bl	8003fbc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	4f54300a 	.word	0x4f54300a

08002088 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	460b      	mov	r3, r1
 8002092:	70fb      	strb	r3, [r7, #3]
 8002094:	4613      	mov	r3, r2
 8002096:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80020a0:	78fb      	ldrb	r3, [r7, #3]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d107      	bne.n	80020b6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80020a6:	883b      	ldrh	r3, [r7, #0]
 80020a8:	0419      	lsls	r1, r3, #16
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	430a      	orrs	r2, r1
 80020b2:	629a      	str	r2, [r3, #40]	; 0x28
 80020b4:	e028      	b.n	8002108 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020bc:	0c1b      	lsrs	r3, r3, #16
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	4413      	add	r3, r2
 80020c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80020c4:	2300      	movs	r3, #0
 80020c6:	73fb      	strb	r3, [r7, #15]
 80020c8:	e00d      	b.n	80020e6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	7bfb      	ldrb	r3, [r7, #15]
 80020d0:	3340      	adds	r3, #64	; 0x40
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	4413      	add	r3, r2
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	0c1b      	lsrs	r3, r3, #16
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	4413      	add	r3, r2
 80020de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80020e0:	7bfb      	ldrb	r3, [r7, #15]
 80020e2:	3301      	adds	r3, #1
 80020e4:	73fb      	strb	r3, [r7, #15]
 80020e6:	7bfa      	ldrb	r2, [r7, #15]
 80020e8:	78fb      	ldrb	r3, [r7, #3]
 80020ea:	3b01      	subs	r3, #1
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d3ec      	bcc.n	80020ca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80020f0:	883b      	ldrh	r3, [r7, #0]
 80020f2:	0418      	lsls	r0, r3, #16
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6819      	ldr	r1, [r3, #0]
 80020f8:	78fb      	ldrb	r3, [r7, #3]
 80020fa:	3b01      	subs	r3, #1
 80020fc:	68ba      	ldr	r2, [r7, #8]
 80020fe:	4302      	orrs	r2, r0
 8002100:	3340      	adds	r3, #64	; 0x40
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	440b      	add	r3, r1
 8002106:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002116:	b480      	push	{r7}
 8002118:	b083      	sub	sp, #12
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
 800211e:	460b      	mov	r3, r1
 8002120:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	887a      	ldrh	r2, [r7, #2]
 8002128:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	460b      	mov	r3, r1
 8002142:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e264      	b.n	800262c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b00      	cmp	r3, #0
 800216c:	d075      	beq.n	800225a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800216e:	4ba3      	ldr	r3, [pc, #652]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 030c 	and.w	r3, r3, #12
 8002176:	2b04      	cmp	r3, #4
 8002178:	d00c      	beq.n	8002194 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800217a:	4ba0      	ldr	r3, [pc, #640]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002182:	2b08      	cmp	r3, #8
 8002184:	d112      	bne.n	80021ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002186:	4b9d      	ldr	r3, [pc, #628]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800218e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002192:	d10b      	bne.n	80021ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002194:	4b99      	ldr	r3, [pc, #612]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d05b      	beq.n	8002258 <HAL_RCC_OscConfig+0x108>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d157      	bne.n	8002258 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e23f      	b.n	800262c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021b4:	d106      	bne.n	80021c4 <HAL_RCC_OscConfig+0x74>
 80021b6:	4b91      	ldr	r3, [pc, #580]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a90      	ldr	r2, [pc, #576]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80021bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	e01d      	b.n	8002200 <HAL_RCC_OscConfig+0xb0>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021cc:	d10c      	bne.n	80021e8 <HAL_RCC_OscConfig+0x98>
 80021ce:	4b8b      	ldr	r3, [pc, #556]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a8a      	ldr	r2, [pc, #552]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80021d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	4b88      	ldr	r3, [pc, #544]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a87      	ldr	r2, [pc, #540]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80021e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e4:	6013      	str	r3, [r2, #0]
 80021e6:	e00b      	b.n	8002200 <HAL_RCC_OscConfig+0xb0>
 80021e8:	4b84      	ldr	r3, [pc, #528]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a83      	ldr	r2, [pc, #524]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80021ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021f2:	6013      	str	r3, [r2, #0]
 80021f4:	4b81      	ldr	r3, [pc, #516]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a80      	ldr	r2, [pc, #512]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80021fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d013      	beq.n	8002230 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002208:	f7fe fb40 	bl	800088c <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002210:	f7fe fb3c 	bl	800088c <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b64      	cmp	r3, #100	; 0x64
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e204      	b.n	800262c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002222:	4b76      	ldr	r3, [pc, #472]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d0f0      	beq.n	8002210 <HAL_RCC_OscConfig+0xc0>
 800222e:	e014      	b.n	800225a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002230:	f7fe fb2c 	bl	800088c <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002238:	f7fe fb28 	bl	800088c <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b64      	cmp	r3, #100	; 0x64
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e1f0      	b.n	800262c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800224a:	4b6c      	ldr	r3, [pc, #432]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f0      	bne.n	8002238 <HAL_RCC_OscConfig+0xe8>
 8002256:	e000      	b.n	800225a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002258:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d063      	beq.n	800232e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002266:	4b65      	ldr	r3, [pc, #404]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f003 030c 	and.w	r3, r3, #12
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00b      	beq.n	800228a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002272:	4b62      	ldr	r3, [pc, #392]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800227a:	2b08      	cmp	r3, #8
 800227c:	d11c      	bne.n	80022b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800227e:	4b5f      	ldr	r3, [pc, #380]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d116      	bne.n	80022b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800228a:	4b5c      	ldr	r3, [pc, #368]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d005      	beq.n	80022a2 <HAL_RCC_OscConfig+0x152>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d001      	beq.n	80022a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e1c4      	b.n	800262c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a2:	4b56      	ldr	r3, [pc, #344]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	4952      	ldr	r1, [pc, #328]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022b6:	e03a      	b.n	800232e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d020      	beq.n	8002302 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022c0:	4b4f      	ldr	r3, [pc, #316]	; (8002400 <HAL_RCC_OscConfig+0x2b0>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c6:	f7fe fae1 	bl	800088c <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022ce:	f7fe fadd 	bl	800088c <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e1a5      	b.n	800262c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e0:	4b46      	ldr	r3, [pc, #280]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0f0      	beq.n	80022ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ec:	4b43      	ldr	r3, [pc, #268]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4940      	ldr	r1, [pc, #256]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	600b      	str	r3, [r1, #0]
 8002300:	e015      	b.n	800232e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002302:	4b3f      	ldr	r3, [pc, #252]	; (8002400 <HAL_RCC_OscConfig+0x2b0>)
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002308:	f7fe fac0 	bl	800088c <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002310:	f7fe fabc 	bl	800088c <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e184      	b.n	800262c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002322:	4b36      	ldr	r3, [pc, #216]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f0      	bne.n	8002310 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0308 	and.w	r3, r3, #8
 8002336:	2b00      	cmp	r3, #0
 8002338:	d030      	beq.n	800239c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d016      	beq.n	8002370 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002342:	4b30      	ldr	r3, [pc, #192]	; (8002404 <HAL_RCC_OscConfig+0x2b4>)
 8002344:	2201      	movs	r2, #1
 8002346:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002348:	f7fe faa0 	bl	800088c <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002350:	f7fe fa9c 	bl	800088c <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e164      	b.n	800262c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002362:	4b26      	ldr	r3, [pc, #152]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 8002364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCC_OscConfig+0x200>
 800236e:	e015      	b.n	800239c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002370:	4b24      	ldr	r3, [pc, #144]	; (8002404 <HAL_RCC_OscConfig+0x2b4>)
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002376:	f7fe fa89 	bl	800088c <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800237e:	f7fe fa85 	bl	800088c <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e14d      	b.n	800262c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002390:	4b1a      	ldr	r3, [pc, #104]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 8002392:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1f0      	bne.n	800237e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 80a0 	beq.w	80024ea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023aa:	2300      	movs	r3, #0
 80023ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ae:	4b13      	ldr	r3, [pc, #76]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10f      	bne.n	80023da <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	60bb      	str	r3, [r7, #8]
 80023be:	4b0f      	ldr	r3, [pc, #60]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	4a0e      	ldr	r2, [pc, #56]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80023c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023c8:	6413      	str	r3, [r2, #64]	; 0x40
 80023ca:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d2:	60bb      	str	r3, [r7, #8]
 80023d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023d6:	2301      	movs	r3, #1
 80023d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023da:	4b0b      	ldr	r3, [pc, #44]	; (8002408 <HAL_RCC_OscConfig+0x2b8>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d121      	bne.n	800242a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023e6:	4b08      	ldr	r3, [pc, #32]	; (8002408 <HAL_RCC_OscConfig+0x2b8>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a07      	ldr	r2, [pc, #28]	; (8002408 <HAL_RCC_OscConfig+0x2b8>)
 80023ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023f2:	f7fe fa4b 	bl	800088c <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f8:	e011      	b.n	800241e <HAL_RCC_OscConfig+0x2ce>
 80023fa:	bf00      	nop
 80023fc:	40023800 	.word	0x40023800
 8002400:	42470000 	.word	0x42470000
 8002404:	42470e80 	.word	0x42470e80
 8002408:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800240c:	f7fe fa3e 	bl	800088c <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e106      	b.n	800262c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800241e:	4b85      	ldr	r3, [pc, #532]	; (8002634 <HAL_RCC_OscConfig+0x4e4>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002426:	2b00      	cmp	r3, #0
 8002428:	d0f0      	beq.n	800240c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d106      	bne.n	8002440 <HAL_RCC_OscConfig+0x2f0>
 8002432:	4b81      	ldr	r3, [pc, #516]	; (8002638 <HAL_RCC_OscConfig+0x4e8>)
 8002434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002436:	4a80      	ldr	r2, [pc, #512]	; (8002638 <HAL_RCC_OscConfig+0x4e8>)
 8002438:	f043 0301 	orr.w	r3, r3, #1
 800243c:	6713      	str	r3, [r2, #112]	; 0x70
 800243e:	e01c      	b.n	800247a <HAL_RCC_OscConfig+0x32a>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	2b05      	cmp	r3, #5
 8002446:	d10c      	bne.n	8002462 <HAL_RCC_OscConfig+0x312>
 8002448:	4b7b      	ldr	r3, [pc, #492]	; (8002638 <HAL_RCC_OscConfig+0x4e8>)
 800244a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244c:	4a7a      	ldr	r2, [pc, #488]	; (8002638 <HAL_RCC_OscConfig+0x4e8>)
 800244e:	f043 0304 	orr.w	r3, r3, #4
 8002452:	6713      	str	r3, [r2, #112]	; 0x70
 8002454:	4b78      	ldr	r3, [pc, #480]	; (8002638 <HAL_RCC_OscConfig+0x4e8>)
 8002456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002458:	4a77      	ldr	r2, [pc, #476]	; (8002638 <HAL_RCC_OscConfig+0x4e8>)
 800245a:	f043 0301 	orr.w	r3, r3, #1
 800245e:	6713      	str	r3, [r2, #112]	; 0x70
 8002460:	e00b      	b.n	800247a <HAL_RCC_OscConfig+0x32a>
 8002462:	4b75      	ldr	r3, [pc, #468]	; (8002638 <HAL_RCC_OscConfig+0x4e8>)
 8002464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002466:	4a74      	ldr	r2, [pc, #464]	; (8002638 <HAL_RCC_OscConfig+0x4e8>)
 8002468:	f023 0301 	bic.w	r3, r3, #1
 800246c:	6713      	str	r3, [r2, #112]	; 0x70
 800246e:	4b72      	ldr	r3, [pc, #456]	; (8002638 <HAL_RCC_OscConfig+0x4e8>)
 8002470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002472:	4a71      	ldr	r2, [pc, #452]	; (8002638 <HAL_RCC_OscConfig+0x4e8>)
 8002474:	f023 0304 	bic.w	r3, r3, #4
 8002478:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d015      	beq.n	80024ae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002482:	f7fe fa03 	bl	800088c <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002488:	e00a      	b.n	80024a0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800248a:	f7fe f9ff 	bl	800088c <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	f241 3288 	movw	r2, #5000	; 0x1388
 8002498:	4293      	cmp	r3, r2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e0c5      	b.n	800262c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a0:	4b65      	ldr	r3, [pc, #404]	; (8002638 <HAL_RCC_OscConfig+0x4e8>)
 80024a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d0ee      	beq.n	800248a <HAL_RCC_OscConfig+0x33a>
 80024ac:	e014      	b.n	80024d8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ae:	f7fe f9ed 	bl	800088c <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024b4:	e00a      	b.n	80024cc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024b6:	f7fe f9e9 	bl	800088c <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e0af      	b.n	800262c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024cc:	4b5a      	ldr	r3, [pc, #360]	; (8002638 <HAL_RCC_OscConfig+0x4e8>)
 80024ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1ee      	bne.n	80024b6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024d8:	7dfb      	ldrb	r3, [r7, #23]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d105      	bne.n	80024ea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024de:	4b56      	ldr	r3, [pc, #344]	; (8002638 <HAL_RCC_OscConfig+0x4e8>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	4a55      	ldr	r2, [pc, #340]	; (8002638 <HAL_RCC_OscConfig+0x4e8>)
 80024e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 809b 	beq.w	800262a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024f4:	4b50      	ldr	r3, [pc, #320]	; (8002638 <HAL_RCC_OscConfig+0x4e8>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f003 030c 	and.w	r3, r3, #12
 80024fc:	2b08      	cmp	r3, #8
 80024fe:	d05c      	beq.n	80025ba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	2b02      	cmp	r3, #2
 8002506:	d141      	bne.n	800258c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002508:	4b4c      	ldr	r3, [pc, #304]	; (800263c <HAL_RCC_OscConfig+0x4ec>)
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250e:	f7fe f9bd 	bl	800088c <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002514:	e008      	b.n	8002528 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002516:	f7fe f9b9 	bl	800088c <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e081      	b.n	800262c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002528:	4b43      	ldr	r3, [pc, #268]	; (8002638 <HAL_RCC_OscConfig+0x4e8>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1f0      	bne.n	8002516 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	69da      	ldr	r2, [r3, #28]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	431a      	orrs	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002542:	019b      	lsls	r3, r3, #6
 8002544:	431a      	orrs	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254a:	085b      	lsrs	r3, r3, #1
 800254c:	3b01      	subs	r3, #1
 800254e:	041b      	lsls	r3, r3, #16
 8002550:	431a      	orrs	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002556:	061b      	lsls	r3, r3, #24
 8002558:	4937      	ldr	r1, [pc, #220]	; (8002638 <HAL_RCC_OscConfig+0x4e8>)
 800255a:	4313      	orrs	r3, r2
 800255c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800255e:	4b37      	ldr	r3, [pc, #220]	; (800263c <HAL_RCC_OscConfig+0x4ec>)
 8002560:	2201      	movs	r2, #1
 8002562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002564:	f7fe f992 	bl	800088c <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800256c:	f7fe f98e 	bl	800088c <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e056      	b.n	800262c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800257e:	4b2e      	ldr	r3, [pc, #184]	; (8002638 <HAL_RCC_OscConfig+0x4e8>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0f0      	beq.n	800256c <HAL_RCC_OscConfig+0x41c>
 800258a:	e04e      	b.n	800262a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800258c:	4b2b      	ldr	r3, [pc, #172]	; (800263c <HAL_RCC_OscConfig+0x4ec>)
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002592:	f7fe f97b 	bl	800088c <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800259a:	f7fe f977 	bl	800088c <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e03f      	b.n	800262c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ac:	4b22      	ldr	r3, [pc, #136]	; (8002638 <HAL_RCC_OscConfig+0x4e8>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1f0      	bne.n	800259a <HAL_RCC_OscConfig+0x44a>
 80025b8:	e037      	b.n	800262a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d101      	bne.n	80025c6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e032      	b.n	800262c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025c6:	4b1c      	ldr	r3, [pc, #112]	; (8002638 <HAL_RCC_OscConfig+0x4e8>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d028      	beq.n	8002626 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025de:	429a      	cmp	r2, r3
 80025e0:	d121      	bne.n	8002626 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d11a      	bne.n	8002626 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025f6:	4013      	ands	r3, r2
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025fc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025fe:	4293      	cmp	r3, r2
 8002600:	d111      	bne.n	8002626 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260c:	085b      	lsrs	r3, r3, #1
 800260e:	3b01      	subs	r3, #1
 8002610:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002612:	429a      	cmp	r2, r3
 8002614:	d107      	bne.n	8002626 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002620:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002622:	429a      	cmp	r2, r3
 8002624:	d001      	beq.n	800262a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e000      	b.n	800262c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3718      	adds	r7, #24
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40007000 	.word	0x40007000
 8002638:	40023800 	.word	0x40023800
 800263c:	42470060 	.word	0x42470060

08002640 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e0cc      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002654:	4b68      	ldr	r3, [pc, #416]	; (80027f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	429a      	cmp	r2, r3
 8002660:	d90c      	bls.n	800267c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002662:	4b65      	ldr	r3, [pc, #404]	; (80027f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800266a:	4b63      	ldr	r3, [pc, #396]	; (80027f8 <HAL_RCC_ClockConfig+0x1b8>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	429a      	cmp	r2, r3
 8002676:	d001      	beq.n	800267c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e0b8      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d020      	beq.n	80026ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	2b00      	cmp	r3, #0
 8002692:	d005      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002694:	4b59      	ldr	r3, [pc, #356]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	4a58      	ldr	r2, [pc, #352]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 800269a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800269e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0308 	and.w	r3, r3, #8
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d005      	beq.n	80026b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026ac:	4b53      	ldr	r3, [pc, #332]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	4a52      	ldr	r2, [pc, #328]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80026b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026b8:	4b50      	ldr	r3, [pc, #320]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	494d      	ldr	r1, [pc, #308]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d044      	beq.n	8002760 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d107      	bne.n	80026ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026de:	4b47      	ldr	r3, [pc, #284]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d119      	bne.n	800271e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e07f      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d003      	beq.n	80026fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026fa:	2b03      	cmp	r3, #3
 80026fc:	d107      	bne.n	800270e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026fe:	4b3f      	ldr	r3, [pc, #252]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d109      	bne.n	800271e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e06f      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800270e:	4b3b      	ldr	r3, [pc, #236]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e067      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800271e:	4b37      	ldr	r3, [pc, #220]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f023 0203 	bic.w	r2, r3, #3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	4934      	ldr	r1, [pc, #208]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 800272c:	4313      	orrs	r3, r2
 800272e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002730:	f7fe f8ac 	bl	800088c <HAL_GetTick>
 8002734:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002736:	e00a      	b.n	800274e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002738:	f7fe f8a8 	bl	800088c <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	f241 3288 	movw	r2, #5000	; 0x1388
 8002746:	4293      	cmp	r3, r2
 8002748:	d901      	bls.n	800274e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e04f      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800274e:	4b2b      	ldr	r3, [pc, #172]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 020c 	and.w	r2, r3, #12
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	429a      	cmp	r2, r3
 800275e:	d1eb      	bne.n	8002738 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002760:	4b25      	ldr	r3, [pc, #148]	; (80027f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	429a      	cmp	r2, r3
 800276c:	d20c      	bcs.n	8002788 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800276e:	4b22      	ldr	r3, [pc, #136]	; (80027f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002776:	4b20      	ldr	r3, [pc, #128]	; (80027f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	429a      	cmp	r2, r3
 8002782:	d001      	beq.n	8002788 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e032      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	2b00      	cmp	r3, #0
 8002792:	d008      	beq.n	80027a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002794:	4b19      	ldr	r3, [pc, #100]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	4916      	ldr	r1, [pc, #88]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0308 	and.w	r3, r3, #8
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d009      	beq.n	80027c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027b2:	4b12      	ldr	r3, [pc, #72]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	490e      	ldr	r1, [pc, #56]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027c6:	f000 f821 	bl	800280c <HAL_RCC_GetSysClockFreq>
 80027ca:	4602      	mov	r2, r0
 80027cc:	4b0b      	ldr	r3, [pc, #44]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	091b      	lsrs	r3, r3, #4
 80027d2:	f003 030f 	and.w	r3, r3, #15
 80027d6:	490a      	ldr	r1, [pc, #40]	; (8002800 <HAL_RCC_ClockConfig+0x1c0>)
 80027d8:	5ccb      	ldrb	r3, [r1, r3]
 80027da:	fa22 f303 	lsr.w	r3, r2, r3
 80027de:	4a09      	ldr	r2, [pc, #36]	; (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 80027e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027e2:	4b09      	ldr	r3, [pc, #36]	; (8002808 <HAL_RCC_ClockConfig+0x1c8>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7fe f80c 	bl	8000804 <HAL_InitTick>

  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	40023c00 	.word	0x40023c00
 80027fc:	40023800 	.word	0x40023800
 8002800:	08006040 	.word	0x08006040
 8002804:	20000000 	.word	0x20000000
 8002808:	20000004 	.word	0x20000004

0800280c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800280c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002810:	b084      	sub	sp, #16
 8002812:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002814:	2300      	movs	r3, #0
 8002816:	607b      	str	r3, [r7, #4]
 8002818:	2300      	movs	r3, #0
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	2300      	movs	r3, #0
 800281e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002820:	2300      	movs	r3, #0
 8002822:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002824:	4b67      	ldr	r3, [pc, #412]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 030c 	and.w	r3, r3, #12
 800282c:	2b08      	cmp	r3, #8
 800282e:	d00d      	beq.n	800284c <HAL_RCC_GetSysClockFreq+0x40>
 8002830:	2b08      	cmp	r3, #8
 8002832:	f200 80bd 	bhi.w	80029b0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002836:	2b00      	cmp	r3, #0
 8002838:	d002      	beq.n	8002840 <HAL_RCC_GetSysClockFreq+0x34>
 800283a:	2b04      	cmp	r3, #4
 800283c:	d003      	beq.n	8002846 <HAL_RCC_GetSysClockFreq+0x3a>
 800283e:	e0b7      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002840:	4b61      	ldr	r3, [pc, #388]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002842:	60bb      	str	r3, [r7, #8]
       break;
 8002844:	e0b7      	b.n	80029b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002846:	4b61      	ldr	r3, [pc, #388]	; (80029cc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002848:	60bb      	str	r3, [r7, #8]
      break;
 800284a:	e0b4      	b.n	80029b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800284c:	4b5d      	ldr	r3, [pc, #372]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002854:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002856:	4b5b      	ldr	r3, [pc, #364]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d04d      	beq.n	80028fe <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002862:	4b58      	ldr	r3, [pc, #352]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	099b      	lsrs	r3, r3, #6
 8002868:	461a      	mov	r2, r3
 800286a:	f04f 0300 	mov.w	r3, #0
 800286e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002872:	f04f 0100 	mov.w	r1, #0
 8002876:	ea02 0800 	and.w	r8, r2, r0
 800287a:	ea03 0901 	and.w	r9, r3, r1
 800287e:	4640      	mov	r0, r8
 8002880:	4649      	mov	r1, r9
 8002882:	f04f 0200 	mov.w	r2, #0
 8002886:	f04f 0300 	mov.w	r3, #0
 800288a:	014b      	lsls	r3, r1, #5
 800288c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002890:	0142      	lsls	r2, r0, #5
 8002892:	4610      	mov	r0, r2
 8002894:	4619      	mov	r1, r3
 8002896:	ebb0 0008 	subs.w	r0, r0, r8
 800289a:	eb61 0109 	sbc.w	r1, r1, r9
 800289e:	f04f 0200 	mov.w	r2, #0
 80028a2:	f04f 0300 	mov.w	r3, #0
 80028a6:	018b      	lsls	r3, r1, #6
 80028a8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80028ac:	0182      	lsls	r2, r0, #6
 80028ae:	1a12      	subs	r2, r2, r0
 80028b0:	eb63 0301 	sbc.w	r3, r3, r1
 80028b4:	f04f 0000 	mov.w	r0, #0
 80028b8:	f04f 0100 	mov.w	r1, #0
 80028bc:	00d9      	lsls	r1, r3, #3
 80028be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028c2:	00d0      	lsls	r0, r2, #3
 80028c4:	4602      	mov	r2, r0
 80028c6:	460b      	mov	r3, r1
 80028c8:	eb12 0208 	adds.w	r2, r2, r8
 80028cc:	eb43 0309 	adc.w	r3, r3, r9
 80028d0:	f04f 0000 	mov.w	r0, #0
 80028d4:	f04f 0100 	mov.w	r1, #0
 80028d8:	0259      	lsls	r1, r3, #9
 80028da:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80028de:	0250      	lsls	r0, r2, #9
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	4610      	mov	r0, r2
 80028e6:	4619      	mov	r1, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	461a      	mov	r2, r3
 80028ec:	f04f 0300 	mov.w	r3, #0
 80028f0:	f7fd fc6a 	bl	80001c8 <__aeabi_uldivmod>
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	4613      	mov	r3, r2
 80028fa:	60fb      	str	r3, [r7, #12]
 80028fc:	e04a      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028fe:	4b31      	ldr	r3, [pc, #196]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	099b      	lsrs	r3, r3, #6
 8002904:	461a      	mov	r2, r3
 8002906:	f04f 0300 	mov.w	r3, #0
 800290a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800290e:	f04f 0100 	mov.w	r1, #0
 8002912:	ea02 0400 	and.w	r4, r2, r0
 8002916:	ea03 0501 	and.w	r5, r3, r1
 800291a:	4620      	mov	r0, r4
 800291c:	4629      	mov	r1, r5
 800291e:	f04f 0200 	mov.w	r2, #0
 8002922:	f04f 0300 	mov.w	r3, #0
 8002926:	014b      	lsls	r3, r1, #5
 8002928:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800292c:	0142      	lsls	r2, r0, #5
 800292e:	4610      	mov	r0, r2
 8002930:	4619      	mov	r1, r3
 8002932:	1b00      	subs	r0, r0, r4
 8002934:	eb61 0105 	sbc.w	r1, r1, r5
 8002938:	f04f 0200 	mov.w	r2, #0
 800293c:	f04f 0300 	mov.w	r3, #0
 8002940:	018b      	lsls	r3, r1, #6
 8002942:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002946:	0182      	lsls	r2, r0, #6
 8002948:	1a12      	subs	r2, r2, r0
 800294a:	eb63 0301 	sbc.w	r3, r3, r1
 800294e:	f04f 0000 	mov.w	r0, #0
 8002952:	f04f 0100 	mov.w	r1, #0
 8002956:	00d9      	lsls	r1, r3, #3
 8002958:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800295c:	00d0      	lsls	r0, r2, #3
 800295e:	4602      	mov	r2, r0
 8002960:	460b      	mov	r3, r1
 8002962:	1912      	adds	r2, r2, r4
 8002964:	eb45 0303 	adc.w	r3, r5, r3
 8002968:	f04f 0000 	mov.w	r0, #0
 800296c:	f04f 0100 	mov.w	r1, #0
 8002970:	0299      	lsls	r1, r3, #10
 8002972:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002976:	0290      	lsls	r0, r2, #10
 8002978:	4602      	mov	r2, r0
 800297a:	460b      	mov	r3, r1
 800297c:	4610      	mov	r0, r2
 800297e:	4619      	mov	r1, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	461a      	mov	r2, r3
 8002984:	f04f 0300 	mov.w	r3, #0
 8002988:	f7fd fc1e 	bl	80001c8 <__aeabi_uldivmod>
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	4613      	mov	r3, r2
 8002992:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002994:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	0c1b      	lsrs	r3, r3, #16
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	3301      	adds	r3, #1
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ac:	60bb      	str	r3, [r7, #8]
      break;
 80029ae:	e002      	b.n	80029b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029b0:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80029b2:	60bb      	str	r3, [r7, #8]
      break;
 80029b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029b6:	68bb      	ldr	r3, [r7, #8]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80029c2:	bf00      	nop
 80029c4:	40023800 	.word	0x40023800
 80029c8:	00f42400 	.word	0x00f42400
 80029cc:	007a1200 	.word	0x007a1200

080029d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029d4:	4b03      	ldr	r3, [pc, #12]	; (80029e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80029d6:	681b      	ldr	r3, [r3, #0]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	20000000 	.word	0x20000000

080029e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80029e8:	b084      	sub	sp, #16
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b084      	sub	sp, #16
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
 80029f2:	f107 001c 	add.w	r0, r7, #28
 80029f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80029fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d122      	bne.n	8002a46 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002a14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002a28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d105      	bne.n	8002a3a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f001 fb1c 	bl	8004078 <USB_CoreReset>
 8002a40:	4603      	mov	r3, r0
 8002a42:	73fb      	strb	r3, [r7, #15]
 8002a44:	e01a      	b.n	8002a7c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f001 fb10 	bl	8004078 <USB_CoreReset>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002a5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d106      	bne.n	8002a70 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a66:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	639a      	str	r2, [r3, #56]	; 0x38
 8002a6e:	e005      	b.n	8002a7c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d10b      	bne.n	8002a9a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f043 0206 	orr.w	r2, r3, #6
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f043 0220 	orr.w	r2, r3, #32
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002aa6:	b004      	add	sp, #16
 8002aa8:	4770      	bx	lr
	...

08002aac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b087      	sub	sp, #28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002aba:	79fb      	ldrb	r3, [r7, #7]
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d165      	bne.n	8002b8c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	4a41      	ldr	r2, [pc, #260]	; (8002bc8 <USB_SetTurnaroundTime+0x11c>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d906      	bls.n	8002ad6 <USB_SetTurnaroundTime+0x2a>
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	4a40      	ldr	r2, [pc, #256]	; (8002bcc <USB_SetTurnaroundTime+0x120>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d202      	bcs.n	8002ad6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002ad0:	230f      	movs	r3, #15
 8002ad2:	617b      	str	r3, [r7, #20]
 8002ad4:	e062      	b.n	8002b9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	4a3c      	ldr	r2, [pc, #240]	; (8002bcc <USB_SetTurnaroundTime+0x120>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d306      	bcc.n	8002aec <USB_SetTurnaroundTime+0x40>
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	4a3b      	ldr	r2, [pc, #236]	; (8002bd0 <USB_SetTurnaroundTime+0x124>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d202      	bcs.n	8002aec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002ae6:	230e      	movs	r3, #14
 8002ae8:	617b      	str	r3, [r7, #20]
 8002aea:	e057      	b.n	8002b9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	4a38      	ldr	r2, [pc, #224]	; (8002bd0 <USB_SetTurnaroundTime+0x124>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d306      	bcc.n	8002b02 <USB_SetTurnaroundTime+0x56>
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	4a37      	ldr	r2, [pc, #220]	; (8002bd4 <USB_SetTurnaroundTime+0x128>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d202      	bcs.n	8002b02 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002afc:	230d      	movs	r3, #13
 8002afe:	617b      	str	r3, [r7, #20]
 8002b00:	e04c      	b.n	8002b9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	4a33      	ldr	r2, [pc, #204]	; (8002bd4 <USB_SetTurnaroundTime+0x128>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d306      	bcc.n	8002b18 <USB_SetTurnaroundTime+0x6c>
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	4a32      	ldr	r2, [pc, #200]	; (8002bd8 <USB_SetTurnaroundTime+0x12c>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d802      	bhi.n	8002b18 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002b12:	230c      	movs	r3, #12
 8002b14:	617b      	str	r3, [r7, #20]
 8002b16:	e041      	b.n	8002b9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	4a2f      	ldr	r2, [pc, #188]	; (8002bd8 <USB_SetTurnaroundTime+0x12c>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d906      	bls.n	8002b2e <USB_SetTurnaroundTime+0x82>
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	4a2e      	ldr	r2, [pc, #184]	; (8002bdc <USB_SetTurnaroundTime+0x130>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d802      	bhi.n	8002b2e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002b28:	230b      	movs	r3, #11
 8002b2a:	617b      	str	r3, [r7, #20]
 8002b2c:	e036      	b.n	8002b9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	4a2a      	ldr	r2, [pc, #168]	; (8002bdc <USB_SetTurnaroundTime+0x130>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d906      	bls.n	8002b44 <USB_SetTurnaroundTime+0x98>
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	4a29      	ldr	r2, [pc, #164]	; (8002be0 <USB_SetTurnaroundTime+0x134>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d802      	bhi.n	8002b44 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002b3e:	230a      	movs	r3, #10
 8002b40:	617b      	str	r3, [r7, #20]
 8002b42:	e02b      	b.n	8002b9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	4a26      	ldr	r2, [pc, #152]	; (8002be0 <USB_SetTurnaroundTime+0x134>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d906      	bls.n	8002b5a <USB_SetTurnaroundTime+0xae>
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	4a25      	ldr	r2, [pc, #148]	; (8002be4 <USB_SetTurnaroundTime+0x138>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d202      	bcs.n	8002b5a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002b54:	2309      	movs	r3, #9
 8002b56:	617b      	str	r3, [r7, #20]
 8002b58:	e020      	b.n	8002b9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	4a21      	ldr	r2, [pc, #132]	; (8002be4 <USB_SetTurnaroundTime+0x138>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d306      	bcc.n	8002b70 <USB_SetTurnaroundTime+0xc4>
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	4a20      	ldr	r2, [pc, #128]	; (8002be8 <USB_SetTurnaroundTime+0x13c>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d802      	bhi.n	8002b70 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002b6a:	2308      	movs	r3, #8
 8002b6c:	617b      	str	r3, [r7, #20]
 8002b6e:	e015      	b.n	8002b9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	4a1d      	ldr	r2, [pc, #116]	; (8002be8 <USB_SetTurnaroundTime+0x13c>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d906      	bls.n	8002b86 <USB_SetTurnaroundTime+0xda>
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	4a1c      	ldr	r2, [pc, #112]	; (8002bec <USB_SetTurnaroundTime+0x140>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d202      	bcs.n	8002b86 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002b80:	2307      	movs	r3, #7
 8002b82:	617b      	str	r3, [r7, #20]
 8002b84:	e00a      	b.n	8002b9c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002b86:	2306      	movs	r3, #6
 8002b88:	617b      	str	r3, [r7, #20]
 8002b8a:	e007      	b.n	8002b9c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002b8c:	79fb      	ldrb	r3, [r7, #7]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d102      	bne.n	8002b98 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002b92:	2309      	movs	r3, #9
 8002b94:	617b      	str	r3, [r7, #20]
 8002b96:	e001      	b.n	8002b9c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002b98:	2309      	movs	r3, #9
 8002b9a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	68da      	ldr	r2, [r3, #12]
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	029b      	lsls	r3, r3, #10
 8002bb0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	371c      	adds	r7, #28
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	00d8acbf 	.word	0x00d8acbf
 8002bcc:	00e4e1c0 	.word	0x00e4e1c0
 8002bd0:	00f42400 	.word	0x00f42400
 8002bd4:	01067380 	.word	0x01067380
 8002bd8:	011a499f 	.word	0x011a499f
 8002bdc:	01312cff 	.word	0x01312cff
 8002be0:	014ca43f 	.word	0x014ca43f
 8002be4:	016e3600 	.word	0x016e3600
 8002be8:	01a6ab1f 	.word	0x01a6ab1f
 8002bec:	01e84800 	.word	0x01e84800

08002bf0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f043 0201 	orr.w	r2, r3, #1
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr

08002c12 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002c12:	b480      	push	{r7}
 8002c14:	b083      	sub	sp, #12
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f023 0201 	bic.w	r2, r3, #1
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002c50:	78fb      	ldrb	r3, [r7, #3]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d115      	bne.n	8002c82 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002c62:	2001      	movs	r0, #1
 8002c64:	f7fd fe1e 	bl	80008a4 <HAL_Delay>
      ms++;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f001 f972 	bl	8003f58 <USB_GetMode>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d01e      	beq.n	8002cb8 <USB_SetCurrentMode+0x84>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2b31      	cmp	r3, #49	; 0x31
 8002c7e:	d9f0      	bls.n	8002c62 <USB_SetCurrentMode+0x2e>
 8002c80:	e01a      	b.n	8002cb8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002c82:	78fb      	ldrb	r3, [r7, #3]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d115      	bne.n	8002cb4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002c94:	2001      	movs	r0, #1
 8002c96:	f7fd fe05 	bl	80008a4 <HAL_Delay>
      ms++;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f001 f959 	bl	8003f58 <USB_GetMode>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d005      	beq.n	8002cb8 <USB_SetCurrentMode+0x84>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2b31      	cmp	r3, #49	; 0x31
 8002cb0:	d9f0      	bls.n	8002c94 <USB_SetCurrentMode+0x60>
 8002cb2:	e001      	b.n	8002cb8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e005      	b.n	8002cc4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2b32      	cmp	r3, #50	; 0x32
 8002cbc:	d101      	bne.n	8002cc2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002ccc:	b084      	sub	sp, #16
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b086      	sub	sp, #24
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
 8002cd6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002cda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	613b      	str	r3, [r7, #16]
 8002cea:	e009      	b.n	8002d00 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	3340      	adds	r3, #64	; 0x40
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4413      	add	r3, r2
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	613b      	str	r3, [r7, #16]
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	2b0e      	cmp	r3, #14
 8002d04:	d9f2      	bls.n	8002cec <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002d06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d11c      	bne.n	8002d46 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d1a:	f043 0302 	orr.w	r3, r3, #2
 8002d1e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d24:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d30:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	639a      	str	r2, [r3, #56]	; 0x38
 8002d44:	e00b      	b.n	8002d5e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d56:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002d64:	461a      	mov	r2, r3
 8002d66:	2300      	movs	r3, #0
 8002d68:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d70:	4619      	mov	r1, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d78:	461a      	mov	r2, r3
 8002d7a:	680b      	ldr	r3, [r1, #0]
 8002d7c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d10c      	bne.n	8002d9e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d104      	bne.n	8002d94 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 f945 	bl	800301c <USB_SetDevSpeed>
 8002d92:	e008      	b.n	8002da6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002d94:	2101      	movs	r1, #1
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 f940 	bl	800301c <USB_SetDevSpeed>
 8002d9c:	e003      	b.n	8002da6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002d9e:	2103      	movs	r1, #3
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 f93b 	bl	800301c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002da6:	2110      	movs	r1, #16
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 f8f3 	bl	8002f94 <USB_FlushTxFifo>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 f90f 	bl	8002fdc <USB_FlushRxFifo>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dce:	461a      	mov	r2, r3
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dda:	461a      	mov	r2, r3
 8002ddc:	2300      	movs	r3, #0
 8002dde:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002de6:	461a      	mov	r2, r3
 8002de8:	2300      	movs	r3, #0
 8002dea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002dec:	2300      	movs	r3, #0
 8002dee:	613b      	str	r3, [r7, #16]
 8002df0:	e043      	b.n	8002e7a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	015a      	lsls	r2, r3, #5
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	4413      	add	r3, r2
 8002dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e08:	d118      	bne.n	8002e3c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10a      	bne.n	8002e26 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	015a      	lsls	r2, r3, #5
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	4413      	add	r3, r2
 8002e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e22:	6013      	str	r3, [r2, #0]
 8002e24:	e013      	b.n	8002e4e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	015a      	lsls	r2, r3, #5
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e32:	461a      	mov	r2, r3
 8002e34:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002e38:	6013      	str	r3, [r2, #0]
 8002e3a:	e008      	b.n	8002e4e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	015a      	lsls	r2, r3, #5
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4413      	add	r3, r2
 8002e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e48:	461a      	mov	r2, r3
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	015a      	lsls	r2, r3, #5
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	4413      	add	r3, r2
 8002e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	015a      	lsls	r2, r3, #5
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	4413      	add	r3, r2
 8002e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e72:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	3301      	adds	r3, #1
 8002e78:	613b      	str	r3, [r7, #16]
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d3b7      	bcc.n	8002df2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e82:	2300      	movs	r3, #0
 8002e84:	613b      	str	r3, [r7, #16]
 8002e86:	e043      	b.n	8002f10 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	015a      	lsls	r2, r3, #5
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	4413      	add	r3, r2
 8002e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e9e:	d118      	bne.n	8002ed2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d10a      	bne.n	8002ebc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	015a      	lsls	r2, r3, #5
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	4413      	add	r3, r2
 8002eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002eb8:	6013      	str	r3, [r2, #0]
 8002eba:	e013      	b.n	8002ee4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	015a      	lsls	r2, r3, #5
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ec8:	461a      	mov	r2, r3
 8002eca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002ece:	6013      	str	r3, [r2, #0]
 8002ed0:	e008      	b.n	8002ee4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	015a      	lsls	r2, r3, #5
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	4413      	add	r3, r2
 8002eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ede:	461a      	mov	r2, r3
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	015a      	lsls	r2, r3, #5
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	4413      	add	r3, r2
 8002eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	015a      	lsls	r2, r3, #5
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	4413      	add	r3, r2
 8002efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f02:	461a      	mov	r2, r3
 8002f04:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f08:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	613b      	str	r3, [r7, #16]
 8002f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d3b7      	bcc.n	8002e88 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f2a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002f38:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d105      	bne.n	8002f4c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	f043 0210 	orr.w	r2, r3, #16
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	699a      	ldr	r2, [r3, #24]
 8002f50:	4b0f      	ldr	r3, [pc, #60]	; (8002f90 <USB_DevInit+0x2c4>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d005      	beq.n	8002f6a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	f043 0208 	orr.w	r2, r3, #8
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d107      	bne.n	8002f80 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002f78:	f043 0304 	orr.w	r3, r3, #4
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002f80:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3718      	adds	r7, #24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f8c:	b004      	add	sp, #16
 8002f8e:	4770      	bx	lr
 8002f90:	803c3800 	.word	0x803c3800

08002f94 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	019b      	lsls	r3, r3, #6
 8002fa6:	f043 0220 	orr.w	r2, r3, #32
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	4a08      	ldr	r2, [pc, #32]	; (8002fd8 <USB_FlushTxFifo+0x44>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d901      	bls.n	8002fbe <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e006      	b.n	8002fcc <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	f003 0320 	and.w	r3, r3, #32
 8002fc6:	2b20      	cmp	r3, #32
 8002fc8:	d0f1      	beq.n	8002fae <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3714      	adds	r7, #20
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	00030d40 	.word	0x00030d40

08002fdc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2210      	movs	r2, #16
 8002fec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	60fb      	str	r3, [r7, #12]
 8002ff4:	4a08      	ldr	r2, [pc, #32]	; (8003018 <USB_FlushRxFifo+0x3c>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d901      	bls.n	8002ffe <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e006      	b.n	800300c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	f003 0310 	and.w	r3, r3, #16
 8003006:	2b10      	cmp	r3, #16
 8003008:	d0f1      	beq.n	8002fee <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	3714      	adds	r7, #20
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr
 8003018:	00030d40 	.word	0x00030d40

0800301c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	460b      	mov	r3, r1
 8003026:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	78fb      	ldrb	r3, [r7, #3]
 8003036:	68f9      	ldr	r1, [r7, #12]
 8003038:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800303c:	4313      	orrs	r3, r2
 800303e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3714      	adds	r7, #20
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr

0800304e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800304e:	b480      	push	{r7}
 8003050:	b087      	sub	sp, #28
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 0306 	and.w	r3, r3, #6
 8003066:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d102      	bne.n	8003074 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800306e:	2300      	movs	r3, #0
 8003070:	75fb      	strb	r3, [r7, #23]
 8003072:	e00a      	b.n	800308a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2b02      	cmp	r3, #2
 8003078:	d002      	beq.n	8003080 <USB_GetDevSpeed+0x32>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2b06      	cmp	r3, #6
 800307e:	d102      	bne.n	8003086 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003080:	2302      	movs	r3, #2
 8003082:	75fb      	strb	r3, [r7, #23]
 8003084:	e001      	b.n	800308a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003086:	230f      	movs	r3, #15
 8003088:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800308a:	7dfb      	ldrb	r3, [r7, #23]
}
 800308c:	4618      	mov	r0, r3
 800308e:	371c      	adds	r7, #28
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	785b      	ldrb	r3, [r3, #1]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d13a      	bne.n	800312a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ba:	69da      	ldr	r2, [r3, #28]
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	f003 030f 	and.w	r3, r3, #15
 80030c4:	2101      	movs	r1, #1
 80030c6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	68f9      	ldr	r1, [r7, #12]
 80030ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030d2:	4313      	orrs	r3, r2
 80030d4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	015a      	lsls	r2, r3, #5
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	4413      	add	r3, r2
 80030de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d155      	bne.n	8003198 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	015a      	lsls	r2, r3, #5
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	4413      	add	r3, r2
 80030f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	78db      	ldrb	r3, [r3, #3]
 8003106:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003108:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	059b      	lsls	r3, r3, #22
 800310e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003110:	4313      	orrs	r3, r2
 8003112:	68ba      	ldr	r2, [r7, #8]
 8003114:	0151      	lsls	r1, r2, #5
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	440a      	add	r2, r1
 800311a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800311e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003122:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003126:	6013      	str	r3, [r2, #0]
 8003128:	e036      	b.n	8003198 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003130:	69da      	ldr	r2, [r3, #28]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	f003 030f 	and.w	r3, r3, #15
 800313a:	2101      	movs	r1, #1
 800313c:	fa01 f303 	lsl.w	r3, r1, r3
 8003140:	041b      	lsls	r3, r3, #16
 8003142:	68f9      	ldr	r1, [r7, #12]
 8003144:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003148:	4313      	orrs	r3, r2
 800314a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	015a      	lsls	r2, r3, #5
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4413      	add	r3, r2
 8003154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d11a      	bne.n	8003198 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	015a      	lsls	r2, r3, #5
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	4413      	add	r3, r2
 800316a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	78db      	ldrb	r3, [r3, #3]
 800317c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800317e:	430b      	orrs	r3, r1
 8003180:	4313      	orrs	r3, r2
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	0151      	lsls	r1, r2, #5
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	440a      	add	r2, r1
 800318a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800318e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003196:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3714      	adds	r7, #20
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
	...

080031a8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	785b      	ldrb	r3, [r3, #1]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d161      	bne.n	8003288 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	015a      	lsls	r2, r3, #5
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	4413      	add	r3, r2
 80031cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031da:	d11f      	bne.n	800321c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	015a      	lsls	r2, r3, #5
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	4413      	add	r3, r2
 80031e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	0151      	lsls	r1, r2, #5
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	440a      	add	r2, r1
 80031f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80031f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80031fa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	015a      	lsls	r2, r3, #5
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	4413      	add	r3, r2
 8003204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	0151      	lsls	r1, r2, #5
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	440a      	add	r2, r1
 8003212:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003216:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800321a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003222:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	f003 030f 	and.w	r3, r3, #15
 800322c:	2101      	movs	r1, #1
 800322e:	fa01 f303 	lsl.w	r3, r1, r3
 8003232:	b29b      	uxth	r3, r3
 8003234:	43db      	mvns	r3, r3
 8003236:	68f9      	ldr	r1, [r7, #12]
 8003238:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800323c:	4013      	ands	r3, r2
 800323e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003246:	69da      	ldr	r2, [r3, #28]
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	f003 030f 	and.w	r3, r3, #15
 8003250:	2101      	movs	r1, #1
 8003252:	fa01 f303 	lsl.w	r3, r1, r3
 8003256:	b29b      	uxth	r3, r3
 8003258:	43db      	mvns	r3, r3
 800325a:	68f9      	ldr	r1, [r7, #12]
 800325c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003260:	4013      	ands	r3, r2
 8003262:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	015a      	lsls	r2, r3, #5
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	4413      	add	r3, r2
 800326c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	0159      	lsls	r1, r3, #5
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	440b      	add	r3, r1
 800327a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800327e:	4619      	mov	r1, r3
 8003280:	4b35      	ldr	r3, [pc, #212]	; (8003358 <USB_DeactivateEndpoint+0x1b0>)
 8003282:	4013      	ands	r3, r2
 8003284:	600b      	str	r3, [r1, #0]
 8003286:	e060      	b.n	800334a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	015a      	lsls	r2, r3, #5
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	4413      	add	r3, r2
 8003290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800329a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800329e:	d11f      	bne.n	80032e0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	015a      	lsls	r2, r3, #5
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4413      	add	r3, r2
 80032a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68ba      	ldr	r2, [r7, #8]
 80032b0:	0151      	lsls	r1, r2, #5
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	440a      	add	r2, r1
 80032b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80032ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80032be:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	015a      	lsls	r2, r3, #5
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	4413      	add	r3, r2
 80032c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	0151      	lsls	r1, r2, #5
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	440a      	add	r2, r1
 80032d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80032da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80032de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	f003 030f 	and.w	r3, r3, #15
 80032f0:	2101      	movs	r1, #1
 80032f2:	fa01 f303 	lsl.w	r3, r1, r3
 80032f6:	041b      	lsls	r3, r3, #16
 80032f8:	43db      	mvns	r3, r3
 80032fa:	68f9      	ldr	r1, [r7, #12]
 80032fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003300:	4013      	ands	r3, r2
 8003302:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800330a:	69da      	ldr	r2, [r3, #28]
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	f003 030f 	and.w	r3, r3, #15
 8003314:	2101      	movs	r1, #1
 8003316:	fa01 f303 	lsl.w	r3, r1, r3
 800331a:	041b      	lsls	r3, r3, #16
 800331c:	43db      	mvns	r3, r3
 800331e:	68f9      	ldr	r1, [r7, #12]
 8003320:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003324:	4013      	ands	r3, r2
 8003326:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	015a      	lsls	r2, r3, #5
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	4413      	add	r3, r2
 8003330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	0159      	lsls	r1, r3, #5
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	440b      	add	r3, r1
 800333e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003342:	4619      	mov	r1, r3
 8003344:	4b05      	ldr	r3, [pc, #20]	; (800335c <USB_DeactivateEndpoint+0x1b4>)
 8003346:	4013      	ands	r3, r2
 8003348:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3714      	adds	r7, #20
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	ec337800 	.word	0xec337800
 800335c:	eff37800 	.word	0xeff37800

08003360 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b08a      	sub	sp, #40	; 0x28
 8003364:	af02      	add	r7, sp, #8
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	4613      	mov	r3, r2
 800336c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	785b      	ldrb	r3, [r3, #1]
 800337c:	2b01      	cmp	r3, #1
 800337e:	f040 815c 	bne.w	800363a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d132      	bne.n	80033f0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	015a      	lsls	r2, r3, #5
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	4413      	add	r3, r2
 8003392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	0151      	lsls	r1, r2, #5
 800339c:	69fa      	ldr	r2, [r7, #28]
 800339e:	440a      	add	r2, r1
 80033a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80033a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80033ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	015a      	lsls	r2, r3, #5
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	4413      	add	r3, r2
 80033b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	0151      	lsls	r1, r2, #5
 80033c0:	69fa      	ldr	r2, [r7, #28]
 80033c2:	440a      	add	r2, r1
 80033c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80033cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	015a      	lsls	r2, r3, #5
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	4413      	add	r3, r2
 80033d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	0151      	lsls	r1, r2, #5
 80033e0:	69fa      	ldr	r2, [r7, #28]
 80033e2:	440a      	add	r2, r1
 80033e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033e8:	0cdb      	lsrs	r3, r3, #19
 80033ea:	04db      	lsls	r3, r3, #19
 80033ec:	6113      	str	r3, [r2, #16]
 80033ee:	e074      	b.n	80034da <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	015a      	lsls	r2, r3, #5
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	4413      	add	r3, r2
 80033f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	0151      	lsls	r1, r2, #5
 8003402:	69fa      	ldr	r2, [r7, #28]
 8003404:	440a      	add	r2, r1
 8003406:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800340a:	0cdb      	lsrs	r3, r3, #19
 800340c:	04db      	lsls	r3, r3, #19
 800340e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	015a      	lsls	r2, r3, #5
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	4413      	add	r3, r2
 8003418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	0151      	lsls	r1, r2, #5
 8003422:	69fa      	ldr	r2, [r7, #28]
 8003424:	440a      	add	r2, r1
 8003426:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800342a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800342e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003432:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	015a      	lsls	r2, r3, #5
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	4413      	add	r3, r2
 800343c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003440:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	6959      	ldr	r1, [r3, #20]
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	440b      	add	r3, r1
 800344c:	1e59      	subs	r1, r3, #1
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	fbb1 f3f3 	udiv	r3, r1, r3
 8003456:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003458:	4b9d      	ldr	r3, [pc, #628]	; (80036d0 <USB_EPStartXfer+0x370>)
 800345a:	400b      	ands	r3, r1
 800345c:	69b9      	ldr	r1, [r7, #24]
 800345e:	0148      	lsls	r0, r1, #5
 8003460:	69f9      	ldr	r1, [r7, #28]
 8003462:	4401      	add	r1, r0
 8003464:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003468:	4313      	orrs	r3, r2
 800346a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	015a      	lsls	r2, r3, #5
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	4413      	add	r3, r2
 8003474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003478:	691a      	ldr	r2, [r3, #16]
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003482:	69b9      	ldr	r1, [r7, #24]
 8003484:	0148      	lsls	r0, r1, #5
 8003486:	69f9      	ldr	r1, [r7, #28]
 8003488:	4401      	add	r1, r0
 800348a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800348e:	4313      	orrs	r3, r2
 8003490:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	78db      	ldrb	r3, [r3, #3]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d11f      	bne.n	80034da <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	015a      	lsls	r2, r3, #5
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	4413      	add	r3, r2
 80034a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	0151      	lsls	r1, r2, #5
 80034ac:	69fa      	ldr	r2, [r7, #28]
 80034ae:	440a      	add	r2, r1
 80034b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034b4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80034b8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	015a      	lsls	r2, r3, #5
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	4413      	add	r3, r2
 80034c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	0151      	lsls	r1, r2, #5
 80034cc:	69fa      	ldr	r2, [r7, #28]
 80034ce:	440a      	add	r2, r1
 80034d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80034d8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80034da:	79fb      	ldrb	r3, [r7, #7]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d14b      	bne.n	8003578 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d009      	beq.n	80034fc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	015a      	lsls	r2, r3, #5
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	4413      	add	r3, r2
 80034f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034f4:	461a      	mov	r2, r3
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	78db      	ldrb	r3, [r3, #3]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d128      	bne.n	8003556 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003510:	2b00      	cmp	r3, #0
 8003512:	d110      	bne.n	8003536 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	015a      	lsls	r2, r3, #5
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	4413      	add	r3, r2
 800351c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	0151      	lsls	r1, r2, #5
 8003526:	69fa      	ldr	r2, [r7, #28]
 8003528:	440a      	add	r2, r1
 800352a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800352e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003532:	6013      	str	r3, [r2, #0]
 8003534:	e00f      	b.n	8003556 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	015a      	lsls	r2, r3, #5
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	4413      	add	r3, r2
 800353e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	0151      	lsls	r1, r2, #5
 8003548:	69fa      	ldr	r2, [r7, #28]
 800354a:	440a      	add	r2, r1
 800354c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003554:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	015a      	lsls	r2, r3, #5
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	4413      	add	r3, r2
 800355e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	0151      	lsls	r1, r2, #5
 8003568:	69fa      	ldr	r2, [r7, #28]
 800356a:	440a      	add	r2, r1
 800356c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003570:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003574:	6013      	str	r3, [r2, #0]
 8003576:	e12f      	b.n	80037d8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	015a      	lsls	r2, r3, #5
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	4413      	add	r3, r2
 8003580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	0151      	lsls	r1, r2, #5
 800358a:	69fa      	ldr	r2, [r7, #28]
 800358c:	440a      	add	r2, r1
 800358e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003592:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003596:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	78db      	ldrb	r3, [r3, #3]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d015      	beq.n	80035cc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 8117 	beq.w	80037d8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	f003 030f 	and.w	r3, r3, #15
 80035ba:	2101      	movs	r1, #1
 80035bc:	fa01 f303 	lsl.w	r3, r1, r3
 80035c0:	69f9      	ldr	r1, [r7, #28]
 80035c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035c6:	4313      	orrs	r3, r2
 80035c8:	634b      	str	r3, [r1, #52]	; 0x34
 80035ca:	e105      	b.n	80037d8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d110      	bne.n	80035fe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	015a      	lsls	r2, r3, #5
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	4413      	add	r3, r2
 80035e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	0151      	lsls	r1, r2, #5
 80035ee:	69fa      	ldr	r2, [r7, #28]
 80035f0:	440a      	add	r2, r1
 80035f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80035fa:	6013      	str	r3, [r2, #0]
 80035fc:	e00f      	b.n	800361e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	015a      	lsls	r2, r3, #5
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	4413      	add	r3, r2
 8003606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	0151      	lsls	r1, r2, #5
 8003610:	69fa      	ldr	r2, [r7, #28]
 8003612:	440a      	add	r2, r1
 8003614:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800361c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	68d9      	ldr	r1, [r3, #12]
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	781a      	ldrb	r2, [r3, #0]
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	b298      	uxth	r0, r3
 800362c:	79fb      	ldrb	r3, [r7, #7]
 800362e:	9300      	str	r3, [sp, #0]
 8003630:	4603      	mov	r3, r0
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f000 fa2b 	bl	8003a8e <USB_WritePacket>
 8003638:	e0ce      	b.n	80037d8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	015a      	lsls	r2, r3, #5
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	4413      	add	r3, r2
 8003642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	0151      	lsls	r1, r2, #5
 800364c:	69fa      	ldr	r2, [r7, #28]
 800364e:	440a      	add	r2, r1
 8003650:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003654:	0cdb      	lsrs	r3, r3, #19
 8003656:	04db      	lsls	r3, r3, #19
 8003658:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	015a      	lsls	r2, r3, #5
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	4413      	add	r3, r2
 8003662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	0151      	lsls	r1, r2, #5
 800366c:	69fa      	ldr	r2, [r7, #28]
 800366e:	440a      	add	r2, r1
 8003670:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003674:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003678:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800367c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d126      	bne.n	80036d4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	015a      	lsls	r2, r3, #5
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	4413      	add	r3, r2
 800368e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003692:	691a      	ldr	r2, [r3, #16]
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800369c:	69b9      	ldr	r1, [r7, #24]
 800369e:	0148      	lsls	r0, r1, #5
 80036a0:	69f9      	ldr	r1, [r7, #28]
 80036a2:	4401      	add	r1, r0
 80036a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80036a8:	4313      	orrs	r3, r2
 80036aa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	015a      	lsls	r2, r3, #5
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	4413      	add	r3, r2
 80036b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	0151      	lsls	r1, r2, #5
 80036be:	69fa      	ldr	r2, [r7, #28]
 80036c0:	440a      	add	r2, r1
 80036c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80036c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80036ca:	6113      	str	r3, [r2, #16]
 80036cc:	e036      	b.n	800373c <USB_EPStartXfer+0x3dc>
 80036ce:	bf00      	nop
 80036d0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	695a      	ldr	r2, [r3, #20]
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	4413      	add	r3, r2
 80036de:	1e5a      	subs	r2, r3, #1
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	015a      	lsls	r2, r3, #5
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	4413      	add	r3, r2
 80036f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036f6:	691a      	ldr	r2, [r3, #16]
 80036f8:	8afb      	ldrh	r3, [r7, #22]
 80036fa:	04d9      	lsls	r1, r3, #19
 80036fc:	4b39      	ldr	r3, [pc, #228]	; (80037e4 <USB_EPStartXfer+0x484>)
 80036fe:	400b      	ands	r3, r1
 8003700:	69b9      	ldr	r1, [r7, #24]
 8003702:	0148      	lsls	r0, r1, #5
 8003704:	69f9      	ldr	r1, [r7, #28]
 8003706:	4401      	add	r1, r0
 8003708:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800370c:	4313      	orrs	r3, r2
 800370e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	015a      	lsls	r2, r3, #5
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	4413      	add	r3, r2
 8003718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800371c:	691a      	ldr	r2, [r3, #16]
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	8af9      	ldrh	r1, [r7, #22]
 8003724:	fb01 f303 	mul.w	r3, r1, r3
 8003728:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800372c:	69b9      	ldr	r1, [r7, #24]
 800372e:	0148      	lsls	r0, r1, #5
 8003730:	69f9      	ldr	r1, [r7, #28]
 8003732:	4401      	add	r1, r0
 8003734:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003738:	4313      	orrs	r3, r2
 800373a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800373c:	79fb      	ldrb	r3, [r7, #7]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d10d      	bne.n	800375e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d009      	beq.n	800375e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	68d9      	ldr	r1, [r3, #12]
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	015a      	lsls	r2, r3, #5
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	4413      	add	r3, r2
 8003756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800375a:	460a      	mov	r2, r1
 800375c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	78db      	ldrb	r3, [r3, #3]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d128      	bne.n	80037b8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003772:	2b00      	cmp	r3, #0
 8003774:	d110      	bne.n	8003798 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	015a      	lsls	r2, r3, #5
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	4413      	add	r3, r2
 800377e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	0151      	lsls	r1, r2, #5
 8003788:	69fa      	ldr	r2, [r7, #28]
 800378a:	440a      	add	r2, r1
 800378c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003790:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003794:	6013      	str	r3, [r2, #0]
 8003796:	e00f      	b.n	80037b8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	015a      	lsls	r2, r3, #5
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	4413      	add	r3, r2
 80037a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	0151      	lsls	r1, r2, #5
 80037aa:	69fa      	ldr	r2, [r7, #28]
 80037ac:	440a      	add	r2, r1
 80037ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037b6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	015a      	lsls	r2, r3, #5
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	4413      	add	r3, r2
 80037c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	0151      	lsls	r1, r2, #5
 80037ca:	69fa      	ldr	r2, [r7, #28]
 80037cc:	440a      	add	r2, r1
 80037ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80037d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3720      	adds	r7, #32
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	1ff80000 	.word	0x1ff80000

080037e8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b087      	sub	sp, #28
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	4613      	mov	r3, r2
 80037f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	785b      	ldrb	r3, [r3, #1]
 8003804:	2b01      	cmp	r3, #1
 8003806:	f040 80cd 	bne.w	80039a4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d132      	bne.n	8003878 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	015a      	lsls	r2, r3, #5
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	4413      	add	r3, r2
 800381a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	0151      	lsls	r1, r2, #5
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	440a      	add	r2, r1
 8003828:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800382c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003830:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003834:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	015a      	lsls	r2, r3, #5
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	4413      	add	r3, r2
 800383e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	0151      	lsls	r1, r2, #5
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	440a      	add	r2, r1
 800384c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003850:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003854:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	015a      	lsls	r2, r3, #5
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	4413      	add	r3, r2
 800385e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	0151      	lsls	r1, r2, #5
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	440a      	add	r2, r1
 800386c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003870:	0cdb      	lsrs	r3, r3, #19
 8003872:	04db      	lsls	r3, r3, #19
 8003874:	6113      	str	r3, [r2, #16]
 8003876:	e04e      	b.n	8003916 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	015a      	lsls	r2, r3, #5
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	4413      	add	r3, r2
 8003880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	0151      	lsls	r1, r2, #5
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	440a      	add	r2, r1
 800388e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003892:	0cdb      	lsrs	r3, r3, #19
 8003894:	04db      	lsls	r3, r3, #19
 8003896:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	015a      	lsls	r2, r3, #5
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	4413      	add	r3, r2
 80038a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	0151      	lsls	r1, r2, #5
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	440a      	add	r2, r1
 80038ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80038b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80038ba:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	695a      	ldr	r2, [r3, #20]
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d903      	bls.n	80038d0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	015a      	lsls	r2, r3, #5
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	4413      	add	r3, r2
 80038d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	0151      	lsls	r1, r2, #5
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	440a      	add	r2, r1
 80038e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80038ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	015a      	lsls	r2, r3, #5
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	4413      	add	r3, r2
 80038f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038fc:	691a      	ldr	r2, [r3, #16]
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003906:	6939      	ldr	r1, [r7, #16]
 8003908:	0148      	lsls	r0, r1, #5
 800390a:	6979      	ldr	r1, [r7, #20]
 800390c:	4401      	add	r1, r0
 800390e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003912:	4313      	orrs	r3, r2
 8003914:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003916:	79fb      	ldrb	r3, [r7, #7]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d11e      	bne.n	800395a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d009      	beq.n	8003938 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	015a      	lsls	r2, r3, #5
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	4413      	add	r3, r2
 800392c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003930:	461a      	mov	r2, r3
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	015a      	lsls	r2, r3, #5
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	4413      	add	r3, r2
 8003940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	0151      	lsls	r1, r2, #5
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	440a      	add	r2, r1
 800394e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003952:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003956:	6013      	str	r3, [r2, #0]
 8003958:	e092      	b.n	8003a80 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	015a      	lsls	r2, r3, #5
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	4413      	add	r3, r2
 8003962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	0151      	lsls	r1, r2, #5
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	440a      	add	r2, r1
 8003970:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003974:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003978:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d07e      	beq.n	8003a80 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003988:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	f003 030f 	and.w	r3, r3, #15
 8003992:	2101      	movs	r1, #1
 8003994:	fa01 f303 	lsl.w	r3, r1, r3
 8003998:	6979      	ldr	r1, [r7, #20]
 800399a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800399e:	4313      	orrs	r3, r2
 80039a0:	634b      	str	r3, [r1, #52]	; 0x34
 80039a2:	e06d      	b.n	8003a80 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	015a      	lsls	r2, r3, #5
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	4413      	add	r3, r2
 80039ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	0151      	lsls	r1, r2, #5
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	440a      	add	r2, r1
 80039ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039be:	0cdb      	lsrs	r3, r3, #19
 80039c0:	04db      	lsls	r3, r3, #19
 80039c2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	015a      	lsls	r2, r3, #5
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	4413      	add	r3, r2
 80039cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	0151      	lsls	r1, r2, #5
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	440a      	add	r2, r1
 80039da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039de:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80039e2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80039e6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d003      	beq.n	80039f8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	689a      	ldr	r2, [r3, #8]
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	015a      	lsls	r2, r3, #5
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	4413      	add	r3, r2
 8003a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	0151      	lsls	r1, r2, #5
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	440a      	add	r2, r1
 8003a0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a16:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	015a      	lsls	r2, r3, #5
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	4413      	add	r3, r2
 8003a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a24:	691a      	ldr	r2, [r3, #16]
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a2e:	6939      	ldr	r1, [r7, #16]
 8003a30:	0148      	lsls	r0, r1, #5
 8003a32:	6979      	ldr	r1, [r7, #20]
 8003a34:	4401      	add	r1, r0
 8003a36:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003a3e:	79fb      	ldrb	r3, [r7, #7]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d10d      	bne.n	8003a60 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d009      	beq.n	8003a60 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	68d9      	ldr	r1, [r3, #12]
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	015a      	lsls	r2, r3, #5
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	4413      	add	r3, r2
 8003a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a5c:	460a      	mov	r2, r1
 8003a5e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	015a      	lsls	r2, r3, #5
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	4413      	add	r3, r2
 8003a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	0151      	lsls	r1, r2, #5
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	440a      	add	r2, r1
 8003a76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a7a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a7e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	371c      	adds	r7, #28
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr

08003a8e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003a8e:	b480      	push	{r7}
 8003a90:	b089      	sub	sp, #36	; 0x24
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	60f8      	str	r0, [r7, #12]
 8003a96:	60b9      	str	r1, [r7, #8]
 8003a98:	4611      	mov	r1, r2
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	71fb      	strb	r3, [r7, #7]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003aac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d123      	bne.n	8003afc <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003ab4:	88bb      	ldrh	r3, [r7, #4]
 8003ab6:	3303      	adds	r3, #3
 8003ab8:	089b      	lsrs	r3, r3, #2
 8003aba:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003abc:	2300      	movs	r3, #0
 8003abe:	61bb      	str	r3, [r7, #24]
 8003ac0:	e018      	b.n	8003af4 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003ac2:	79fb      	ldrb	r3, [r7, #7]
 8003ac4:	031a      	lsls	r2, r3, #12
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	4413      	add	r3, r2
 8003aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ace:	461a      	mov	r2, r3
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	3301      	adds	r3, #1
 8003ae0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	3301      	adds	r3, #1
 8003aec:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	3301      	adds	r3, #1
 8003af2:	61bb      	str	r3, [r7, #24]
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d3e2      	bcc.n	8003ac2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3724      	adds	r7, #36	; 0x24
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b08b      	sub	sp, #44	; 0x2c
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	60f8      	str	r0, [r7, #12]
 8003b12:	60b9      	str	r1, [r7, #8]
 8003b14:	4613      	mov	r3, r2
 8003b16:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003b20:	88fb      	ldrh	r3, [r7, #6]
 8003b22:	089b      	lsrs	r3, r3, #2
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003b28:	88fb      	ldrh	r3, [r7, #6]
 8003b2a:	f003 0303 	and.w	r3, r3, #3
 8003b2e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003b30:	2300      	movs	r3, #0
 8003b32:	623b      	str	r3, [r7, #32]
 8003b34:	e014      	b.n	8003b60 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b40:	601a      	str	r2, [r3, #0]
    pDest++;
 8003b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b44:	3301      	adds	r3, #1
 8003b46:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b50:	3301      	adds	r3, #1
 8003b52:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b56:	3301      	adds	r3, #1
 8003b58:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003b5a:	6a3b      	ldr	r3, [r7, #32]
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	623b      	str	r3, [r7, #32]
 8003b60:	6a3a      	ldr	r2, [r7, #32]
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d3e6      	bcc.n	8003b36 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003b68:	8bfb      	ldrh	r3, [r7, #30]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d01e      	beq.n	8003bac <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b78:	461a      	mov	r2, r3
 8003b7a:	f107 0310 	add.w	r3, r7, #16
 8003b7e:	6812      	ldr	r2, [r2, #0]
 8003b80:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	6a3b      	ldr	r3, [r7, #32]
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	00db      	lsls	r3, r3, #3
 8003b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b8e:	b2da      	uxtb	r2, r3
 8003b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b92:	701a      	strb	r2, [r3, #0]
      i++;
 8003b94:	6a3b      	ldr	r3, [r7, #32]
 8003b96:	3301      	adds	r3, #1
 8003b98:	623b      	str	r3, [r7, #32]
      pDest++;
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003ba0:	8bfb      	ldrh	r3, [r7, #30]
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003ba6:	8bfb      	ldrh	r3, [r7, #30]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1ea      	bne.n	8003b82 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	372c      	adds	r7, #44	; 0x2c
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b085      	sub	sp, #20
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
 8003bc2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	785b      	ldrb	r3, [r3, #1]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d12c      	bne.n	8003c30 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	015a      	lsls	r2, r3, #5
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	4413      	add	r3, r2
 8003bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	db12      	blt.n	8003c0e <USB_EPSetStall+0x54>
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00f      	beq.n	8003c0e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	015a      	lsls	r2, r3, #5
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	0151      	lsls	r1, r2, #5
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	440a      	add	r2, r1
 8003c04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c08:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c0c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	015a      	lsls	r2, r3, #5
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	4413      	add	r3, r2
 8003c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68ba      	ldr	r2, [r7, #8]
 8003c1e:	0151      	lsls	r1, r2, #5
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	440a      	add	r2, r1
 8003c24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c2c:	6013      	str	r3, [r2, #0]
 8003c2e:	e02b      	b.n	8003c88 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	015a      	lsls	r2, r3, #5
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	4413      	add	r3, r2
 8003c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	db12      	blt.n	8003c68 <USB_EPSetStall+0xae>
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00f      	beq.n	8003c68 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	015a      	lsls	r2, r3, #5
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	4413      	add	r3, r2
 8003c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68ba      	ldr	r2, [r7, #8]
 8003c58:	0151      	lsls	r1, r2, #5
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	440a      	add	r2, r1
 8003c5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c62:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c66:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	015a      	lsls	r2, r3, #5
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	4413      	add	r3, r2
 8003c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	0151      	lsls	r1, r2, #5
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	440a      	add	r2, r1
 8003c7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3714      	adds	r7, #20
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b085      	sub	sp, #20
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
 8003c9e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	785b      	ldrb	r3, [r3, #1]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d128      	bne.n	8003d04 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	015a      	lsls	r2, r3, #5
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	4413      	add	r3, r2
 8003cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68ba      	ldr	r2, [r7, #8]
 8003cc2:	0151      	lsls	r1, r2, #5
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	440a      	add	r2, r1
 8003cc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ccc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003cd0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	78db      	ldrb	r3, [r3, #3]
 8003cd6:	2b03      	cmp	r3, #3
 8003cd8:	d003      	beq.n	8003ce2 <USB_EPClearStall+0x4c>
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	78db      	ldrb	r3, [r3, #3]
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d138      	bne.n	8003d54 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	015a      	lsls	r2, r3, #5
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	4413      	add	r3, r2
 8003cea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68ba      	ldr	r2, [r7, #8]
 8003cf2:	0151      	lsls	r1, r2, #5
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	440a      	add	r2, r1
 8003cf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d00:	6013      	str	r3, [r2, #0]
 8003d02:	e027      	b.n	8003d54 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	015a      	lsls	r2, r3, #5
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68ba      	ldr	r2, [r7, #8]
 8003d14:	0151      	lsls	r1, r2, #5
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	440a      	add	r2, r1
 8003d1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d22:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	78db      	ldrb	r3, [r3, #3]
 8003d28:	2b03      	cmp	r3, #3
 8003d2a:	d003      	beq.n	8003d34 <USB_EPClearStall+0x9e>
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	78db      	ldrb	r3, [r3, #3]
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d10f      	bne.n	8003d54 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	015a      	lsls	r2, r3, #5
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	0151      	lsls	r1, r2, #5
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	440a      	add	r2, r1
 8003d4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d52:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3714      	adds	r7, #20
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr

08003d62 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003d62:	b480      	push	{r7}
 8003d64:	b085      	sub	sp, #20
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d80:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003d84:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	78fb      	ldrb	r3, [r7, #3]
 8003d90:	011b      	lsls	r3, r3, #4
 8003d92:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003d96:	68f9      	ldr	r1, [r7, #12]
 8003d98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3714      	adds	r7, #20
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr

08003dae <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003dae:	b480      	push	{r7}
 8003db0:	b085      	sub	sp, #20
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003dc8:	f023 0303 	bic.w	r3, r3, #3
 8003dcc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ddc:	f023 0302 	bic.w	r3, r3, #2
 8003de0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3714      	adds	r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003e0a:	f023 0303 	bic.w	r3, r3, #3
 8003e0e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e1e:	f043 0302 	orr.w	r3, r3, #2
 8003e22:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3714      	adds	r7, #20
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003e32:	b480      	push	{r7}
 8003e34:	b085      	sub	sp, #20
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	4013      	ands	r3, r2
 8003e48:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3714      	adds	r7, #20
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	4013      	ands	r3, r2
 8003e7a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	0c1b      	lsrs	r3, r3, #16
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3714      	adds	r7, #20
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	68ba      	ldr	r2, [r7, #8]
 8003eac:	4013      	ands	r3, r2
 8003eae:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	b29b      	uxth	r3, r3
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	460b      	mov	r3, r1
 8003eca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003ed0:	78fb      	ldrb	r3, [r7, #3]
 8003ed2:	015a      	lsls	r2, r3, #5
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	4013      	ands	r3, r2
 8003eec:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003eee:	68bb      	ldr	r3, [r7, #8]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3714      	adds	r7, #20
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b087      	sub	sp, #28
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	460b      	mov	r3, r1
 8003f06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f1e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003f20:	78fb      	ldrb	r3, [r7, #3]
 8003f22:	f003 030f 	and.w	r3, r3, #15
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	fa22 f303 	lsr.w	r3, r2, r3
 8003f2c:	01db      	lsls	r3, r3, #7
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003f36:	78fb      	ldrb	r3, [r7, #3]
 8003f38:	015a      	lsls	r2, r3, #5
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	4013      	ands	r3, r2
 8003f48:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003f4a:	68bb      	ldr	r3, [r7, #8]
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	371c      	adds	r7, #28
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	695b      	ldr	r3, [r3, #20]
 8003f64:	f003 0301 	and.w	r3, r3, #1
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f8e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003f92:	f023 0307 	bic.w	r3, r3, #7
 8003f96:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003faa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3714      	adds	r7, #20
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
	...

08003fbc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b087      	sub	sp, #28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	607a      	str	r2, [r7, #4]
 8003fc8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	333c      	adds	r3, #60	; 0x3c
 8003fd2:	3304      	adds	r3, #4
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	4a26      	ldr	r2, [pc, #152]	; (8004074 <USB_EP0_OutStart+0xb8>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d90a      	bls.n	8003ff6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ff0:	d101      	bne.n	8003ff6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	e037      	b.n	8004066 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	2300      	movs	r3, #0
 8004000:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004010:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004014:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004024:	f043 0318 	orr.w	r3, r3, #24
 8004028:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004038:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800403c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800403e:	7afb      	ldrb	r3, [r7, #11]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d10f      	bne.n	8004064 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800404a:	461a      	mov	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800405e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004062:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	371c      	adds	r7, #28
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	4f54300a 	.word	0x4f54300a

08004078 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004080:	2300      	movs	r3, #0
 8004082:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	3301      	adds	r3, #1
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	4a13      	ldr	r2, [pc, #76]	; (80040d8 <USB_CoreReset+0x60>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d901      	bls.n	8004094 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e01a      	b.n	80040ca <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	2b00      	cmp	r3, #0
 800409a:	daf3      	bge.n	8004084 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800409c:	2300      	movs	r3, #0
 800409e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	f043 0201 	orr.w	r2, r3, #1
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	3301      	adds	r3, #1
 80040b0:	60fb      	str	r3, [r7, #12]
 80040b2:	4a09      	ldr	r2, [pc, #36]	; (80040d8 <USB_CoreReset+0x60>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d901      	bls.n	80040bc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e006      	b.n	80040ca <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d0f1      	beq.n	80040ac <USB_CoreReset+0x34>

  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3714      	adds	r7, #20
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	00030d40 	.word	0x00030d40

080040dc <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	460b      	mov	r3, r1
 80040e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80040e8:	2010      	movs	r0, #16
 80040ea:	f001 ff0d 	bl	8005f08 <USBD_static_malloc>
 80040ee:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d105      	bne.n	8004102 <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80040fe:	2302      	movs	r3, #2
 8004100:	e01b      	b.n	800413a <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	7c1b      	ldrb	r3, [r3, #16]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d103      	bne.n	800411a <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2207      	movs	r2, #7
 8004116:	875a      	strh	r2, [r3, #58]	; 0x3a
 8004118:	e002      	b.n	8004120 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	220a      	movs	r2, #10
 800411e:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8004120:	2304      	movs	r3, #4
 8004122:	2203      	movs	r2, #3
 8004124:	2181      	movs	r1, #129	; 0x81
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f001 fddd 	bl	8005ce6 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b082      	sub	sp, #8
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
 800414a:	460b      	mov	r3, r1
 800414c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800414e:	2181      	movs	r1, #129	; 0x81
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f001 fdee 	bl	8005d32 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004168:	2b00      	cmp	r3, #0
 800416a:	d009      	beq.n	8004180 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004172:	4618      	mov	r0, r3
 8004174:	f001 fed6 	bl	8005f24 <USBD_static_free>
    pdev->pClassData = NULL;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3708      	adds	r7, #8
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
	...

0800418c <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b086      	sub	sp, #24
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800419c:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800419e:	2300      	movs	r3, #0
 80041a0:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80041a2:	2300      	movs	r3, #0
 80041a4:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d101      	bne.n	80041b0 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e0e8      	b.n	8004382 <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d046      	beq.n	800424a <USBD_HID_Setup+0xbe>
 80041bc:	2b20      	cmp	r3, #32
 80041be:	f040 80d8 	bne.w	8004372 <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	785b      	ldrb	r3, [r3, #1]
 80041c6:	3b02      	subs	r3, #2
 80041c8:	2b09      	cmp	r3, #9
 80041ca:	d836      	bhi.n	800423a <USBD_HID_Setup+0xae>
 80041cc:	a201      	add	r2, pc, #4	; (adr r2, 80041d4 <USBD_HID_Setup+0x48>)
 80041ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d2:	bf00      	nop
 80041d4:	0800422b 	.word	0x0800422b
 80041d8:	0800420b 	.word	0x0800420b
 80041dc:	0800423b 	.word	0x0800423b
 80041e0:	0800423b 	.word	0x0800423b
 80041e4:	0800423b 	.word	0x0800423b
 80041e8:	0800423b 	.word	0x0800423b
 80041ec:	0800423b 	.word	0x0800423b
 80041f0:	0800423b 	.word	0x0800423b
 80041f4:	08004219 	.word	0x08004219
 80041f8:	080041fd 	.word	0x080041fd
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	885b      	ldrh	r3, [r3, #2]
 8004200:	b2db      	uxtb	r3, r3
 8004202:	461a      	mov	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	601a      	str	r2, [r3, #0]
          break;
 8004208:	e01e      	b.n	8004248 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2201      	movs	r2, #1
 800420e:	4619      	mov	r1, r3
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f001 fa22 	bl	800565a <USBD_CtlSendData>
          break;
 8004216:	e017      	b.n	8004248 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	885b      	ldrh	r3, [r3, #2]
 800421c:	0a1b      	lsrs	r3, r3, #8
 800421e:	b29b      	uxth	r3, r3
 8004220:	b2db      	uxtb	r3, r3
 8004222:	461a      	mov	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	605a      	str	r2, [r3, #4]
          break;
 8004228:	e00e      	b.n	8004248 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	3304      	adds	r3, #4
 800422e:	2201      	movs	r2, #1
 8004230:	4619      	mov	r1, r3
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f001 fa11 	bl	800565a <USBD_CtlSendData>
          break;
 8004238:	e006      	b.n	8004248 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800423a:	6839      	ldr	r1, [r7, #0]
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f001 f99b 	bl	8005578 <USBD_CtlError>
          ret = USBD_FAIL;
 8004242:	2303      	movs	r3, #3
 8004244:	75fb      	strb	r3, [r7, #23]
          break;
 8004246:	bf00      	nop
      }
      break;
 8004248:	e09a      	b.n	8004380 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	785b      	ldrb	r3, [r3, #1]
 800424e:	2b0b      	cmp	r3, #11
 8004250:	f200 8086 	bhi.w	8004360 <USBD_HID_Setup+0x1d4>
 8004254:	a201      	add	r2, pc, #4	; (adr r2, 800425c <USBD_HID_Setup+0xd0>)
 8004256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800425a:	bf00      	nop
 800425c:	0800428d 	.word	0x0800428d
 8004260:	0800436f 	.word	0x0800436f
 8004264:	08004361 	.word	0x08004361
 8004268:	08004361 	.word	0x08004361
 800426c:	08004361 	.word	0x08004361
 8004270:	08004361 	.word	0x08004361
 8004274:	080042b7 	.word	0x080042b7
 8004278:	08004361 	.word	0x08004361
 800427c:	08004361 	.word	0x08004361
 8004280:	08004361 	.word	0x08004361
 8004284:	0800430f 	.word	0x0800430f
 8004288:	08004339 	.word	0x08004339
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b03      	cmp	r3, #3
 8004296:	d107      	bne.n	80042a8 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004298:	f107 030a 	add.w	r3, r7, #10
 800429c:	2202      	movs	r2, #2
 800429e:	4619      	mov	r1, r3
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f001 f9da 	bl	800565a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80042a6:	e063      	b.n	8004370 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 80042a8:	6839      	ldr	r1, [r7, #0]
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f001 f964 	bl	8005578 <USBD_CtlError>
            ret = USBD_FAIL;
 80042b0:	2303      	movs	r3, #3
 80042b2:	75fb      	strb	r3, [r7, #23]
          break;
 80042b4:	e05c      	b.n	8004370 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	885b      	ldrh	r3, [r3, #2]
 80042ba:	0a1b      	lsrs	r3, r3, #8
 80042bc:	b29b      	uxth	r3, r3
 80042be:	2b22      	cmp	r3, #34	; 0x22
 80042c0:	d108      	bne.n	80042d4 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	88db      	ldrh	r3, [r3, #6]
 80042c6:	2b4a      	cmp	r3, #74	; 0x4a
 80042c8:	bf28      	it	cs
 80042ca:	234a      	movcs	r3, #74	; 0x4a
 80042cc:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 80042ce:	4b2f      	ldr	r3, [pc, #188]	; (800438c <USBD_HID_Setup+0x200>)
 80042d0:	613b      	str	r3, [r7, #16]
 80042d2:	e015      	b.n	8004300 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	885b      	ldrh	r3, [r3, #2]
 80042d8:	0a1b      	lsrs	r3, r3, #8
 80042da:	b29b      	uxth	r3, r3
 80042dc:	2b21      	cmp	r3, #33	; 0x21
 80042de:	d108      	bne.n	80042f2 <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 80042e0:	4b2b      	ldr	r3, [pc, #172]	; (8004390 <USBD_HID_Setup+0x204>)
 80042e2:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	88db      	ldrh	r3, [r3, #6]
 80042e8:	2b09      	cmp	r3, #9
 80042ea:	bf28      	it	cs
 80042ec:	2309      	movcs	r3, #9
 80042ee:	82bb      	strh	r3, [r7, #20]
 80042f0:	e006      	b.n	8004300 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80042f2:	6839      	ldr	r1, [r7, #0]
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f001 f93f 	bl	8005578 <USBD_CtlError>
            ret = USBD_FAIL;
 80042fa:	2303      	movs	r3, #3
 80042fc:	75fb      	strb	r3, [r7, #23]
            break;
 80042fe:	e037      	b.n	8004370 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8004300:	8abb      	ldrh	r3, [r7, #20]
 8004302:	461a      	mov	r2, r3
 8004304:	6939      	ldr	r1, [r7, #16]
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f001 f9a7 	bl	800565a <USBD_CtlSendData>
          break;
 800430c:	e030      	b.n	8004370 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b03      	cmp	r3, #3
 8004318:	d107      	bne.n	800432a <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	3308      	adds	r3, #8
 800431e:	2201      	movs	r2, #1
 8004320:	4619      	mov	r1, r3
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f001 f999 	bl	800565a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004328:	e022      	b.n	8004370 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800432a:	6839      	ldr	r1, [r7, #0]
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f001 f923 	bl	8005578 <USBD_CtlError>
            ret = USBD_FAIL;
 8004332:	2303      	movs	r3, #3
 8004334:	75fb      	strb	r3, [r7, #23]
          break;
 8004336:	e01b      	b.n	8004370 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b03      	cmp	r3, #3
 8004342:	d106      	bne.n	8004352 <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	885b      	ldrh	r3, [r3, #2]
 8004348:	b2db      	uxtb	r3, r3
 800434a:	461a      	mov	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004350:	e00e      	b.n	8004370 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8004352:	6839      	ldr	r1, [r7, #0]
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f001 f90f 	bl	8005578 <USBD_CtlError>
            ret = USBD_FAIL;
 800435a:	2303      	movs	r3, #3
 800435c:	75fb      	strb	r3, [r7, #23]
          break;
 800435e:	e007      	b.n	8004370 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004360:	6839      	ldr	r1, [r7, #0]
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f001 f908 	bl	8005578 <USBD_CtlError>
          ret = USBD_FAIL;
 8004368:	2303      	movs	r3, #3
 800436a:	75fb      	strb	r3, [r7, #23]
          break;
 800436c:	e000      	b.n	8004370 <USBD_HID_Setup+0x1e4>
          break;
 800436e:	bf00      	nop
      }
      break;
 8004370:	e006      	b.n	8004380 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 8004372:	6839      	ldr	r1, [r7, #0]
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f001 f8ff 	bl	8005578 <USBD_CtlError>
      ret = USBD_FAIL;
 800437a:	2303      	movs	r3, #3
 800437c:	75fb      	strb	r3, [r7, #23]
      break;
 800437e:	bf00      	nop
  }

  return (uint8_t)ret;
 8004380:	7dfb      	ldrb	r3, [r7, #23]
}
 8004382:	4618      	mov	r0, r3
 8004384:	3718      	adds	r7, #24
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	200000c8 	.word	0x200000c8
 8004390:	200000b0 	.word	0x200000b0

08004394 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b086      	sub	sp, #24
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	4613      	mov	r3, r2
 80043a0:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80043a8:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d101      	bne.n	80043b4 <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e013      	b.n	80043dc <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b03      	cmp	r3, #3
 80043be:	d10c      	bne.n	80043da <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	7b1b      	ldrb	r3, [r3, #12]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d108      	bne.n	80043da <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	2201      	movs	r2, #1
 80043cc:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 80043ce:	88fb      	ldrh	r3, [r7, #6]
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	2181      	movs	r1, #129	; 0x81
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f001 fd54 	bl	8005e82 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3718      	adds	r7, #24
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2222      	movs	r2, #34	; 0x22
 80043f0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 80043f2:	4b03      	ldr	r3, [pc, #12]	; (8004400 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr
 8004400:	20000044 	.word	0x20000044

08004404 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2222      	movs	r2, #34	; 0x22
 8004410:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8004412:	4b03      	ldr	r3, [pc, #12]	; (8004420 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8004414:	4618      	mov	r0, r3
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	20000068 	.word	0x20000068

08004424 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2222      	movs	r2, #34	; 0x22
 8004430:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8004432:	4b03      	ldr	r3, [pc, #12]	; (8004440 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8004434:	4618      	mov	r0, r3
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr
 8004440:	2000008c 	.word	0x2000008c

08004444 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	460b      	mov	r3, r1
 800444e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004456:	2200      	movs	r2, #0
 8004458:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	220a      	movs	r2, #10
 8004474:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8004476:	4b03      	ldr	r3, [pc, #12]	; (8004484 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8004478:	4618      	mov	r0, r3
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr
 8004484:	200000bc 	.word	0x200000bc

08004488 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	4613      	mov	r3, r2
 8004494:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d101      	bne.n	80044a0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800449c:	2303      	movs	r3, #3
 800449e:	e01f      	b.n	80044e0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	68ba      	ldr	r2, [r7, #8]
 80044c2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	79fa      	ldrb	r2, [r7, #7]
 80044d2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f001 fb9f 	bl	8005c18 <USBD_LL_Init>
 80044da:	4603      	mov	r3, r0
 80044dc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80044de:	7dfb      	ldrb	r3, [r7, #23]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3718      	adds	r7, #24
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80044f2:	2300      	movs	r3, #0
 80044f4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d101      	bne.n	8004500 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e016      	b.n	800452e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	683a      	ldr	r2, [r7, #0]
 8004504:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800450e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00b      	beq.n	800452c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800451a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451c:	f107 020e 	add.w	r2, r7, #14
 8004520:	4610      	mov	r0, r2
 8004522:	4798      	blx	r3
 8004524:	4602      	mov	r2, r0
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b082      	sub	sp, #8
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f001 fbb6 	bl	8005cb0 <USBD_LL_Start>
 8004544:	4603      	mov	r3, r0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3708      	adds	r7, #8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800454e:	b480      	push	{r7}
 8004550:	b083      	sub	sp, #12
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	460b      	mov	r3, r1
 800456e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004570:	2303      	movs	r3, #3
 8004572:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800457a:	2b00      	cmp	r3, #0
 800457c:	d009      	beq.n	8004592 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	78fa      	ldrb	r2, [r7, #3]
 8004588:	4611      	mov	r1, r2
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	4798      	blx	r3
 800458e:	4603      	mov	r3, r0
 8004590:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004592:	7bfb      	ldrb	r3, [r7, #15]
}
 8004594:	4618      	mov	r0, r3
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	460b      	mov	r3, r1
 80045a6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d007      	beq.n	80045c2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	78fa      	ldrb	r2, [r7, #3]
 80045bc:	4611      	mov	r1, r2
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	4798      	blx	r3
  }

  return USBD_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3708      	adds	r7, #8
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80045dc:	6839      	ldr	r1, [r7, #0]
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 ff90 	bl	8005504 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80045f2:	461a      	mov	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004600:	f003 031f 	and.w	r3, r3, #31
 8004604:	2b02      	cmp	r3, #2
 8004606:	d01a      	beq.n	800463e <USBD_LL_SetupStage+0x72>
 8004608:	2b02      	cmp	r3, #2
 800460a:	d822      	bhi.n	8004652 <USBD_LL_SetupStage+0x86>
 800460c:	2b00      	cmp	r3, #0
 800460e:	d002      	beq.n	8004616 <USBD_LL_SetupStage+0x4a>
 8004610:	2b01      	cmp	r3, #1
 8004612:	d00a      	beq.n	800462a <USBD_LL_SetupStage+0x5e>
 8004614:	e01d      	b.n	8004652 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800461c:	4619      	mov	r1, r3
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 fa62 	bl	8004ae8 <USBD_StdDevReq>
 8004624:	4603      	mov	r3, r0
 8004626:	73fb      	strb	r3, [r7, #15]
      break;
 8004628:	e020      	b.n	800466c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004630:	4619      	mov	r1, r3
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 fac6 	bl	8004bc4 <USBD_StdItfReq>
 8004638:	4603      	mov	r3, r0
 800463a:	73fb      	strb	r3, [r7, #15]
      break;
 800463c:	e016      	b.n	800466c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004644:	4619      	mov	r1, r3
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 fb05 	bl	8004c56 <USBD_StdEPReq>
 800464c:	4603      	mov	r3, r0
 800464e:	73fb      	strb	r3, [r7, #15]
      break;
 8004650:	e00c      	b.n	800466c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004658:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800465c:	b2db      	uxtb	r3, r3
 800465e:	4619      	mov	r1, r3
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f001 fb85 	bl	8005d70 <USBD_LL_StallEP>
 8004666:	4603      	mov	r3, r0
 8004668:	73fb      	strb	r3, [r7, #15]
      break;
 800466a:	bf00      	nop
  }

  return ret;
 800466c:	7bfb      	ldrb	r3, [r7, #15]
}
 800466e:	4618      	mov	r0, r3
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b086      	sub	sp, #24
 800467a:	af00      	add	r7, sp, #0
 800467c:	60f8      	str	r0, [r7, #12]
 800467e:	460b      	mov	r3, r1
 8004680:	607a      	str	r2, [r7, #4]
 8004682:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004684:	7afb      	ldrb	r3, [r7, #11]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d138      	bne.n	80046fc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004690:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004698:	2b03      	cmp	r3, #3
 800469a:	d14a      	bne.n	8004732 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	689a      	ldr	r2, [r3, #8]
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d913      	bls.n	80046d0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	689a      	ldr	r2, [r3, #8]
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	1ad2      	subs	r2, r2, r3
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	68da      	ldr	r2, [r3, #12]
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	4293      	cmp	r3, r2
 80046c0:	bf28      	it	cs
 80046c2:	4613      	movcs	r3, r2
 80046c4:	461a      	mov	r2, r3
 80046c6:	6879      	ldr	r1, [r7, #4]
 80046c8:	68f8      	ldr	r0, [r7, #12]
 80046ca:	f000 fff2 	bl	80056b2 <USBD_CtlContinueRx>
 80046ce:	e030      	b.n	8004732 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	2b03      	cmp	r3, #3
 80046da:	d10b      	bne.n	80046f4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d005      	beq.n	80046f4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f000 ffed 	bl	80056d4 <USBD_CtlSendStatus>
 80046fa:	e01a      	b.n	8004732 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b03      	cmp	r3, #3
 8004706:	d114      	bne.n	8004732 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00e      	beq.n	8004732 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	7afa      	ldrb	r2, [r7, #11]
 800471e:	4611      	mov	r1, r2
 8004720:	68f8      	ldr	r0, [r7, #12]
 8004722:	4798      	blx	r3
 8004724:	4603      	mov	r3, r0
 8004726:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004728:	7dfb      	ldrb	r3, [r7, #23]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d001      	beq.n	8004732 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800472e:	7dfb      	ldrb	r3, [r7, #23]
 8004730:	e000      	b.n	8004734 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3718      	adds	r7, #24
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	460b      	mov	r3, r1
 8004746:	607a      	str	r2, [r7, #4]
 8004748:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800474a:	7afb      	ldrb	r3, [r7, #11]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d16b      	bne.n	8004828 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	3314      	adds	r3, #20
 8004754:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800475c:	2b02      	cmp	r3, #2
 800475e:	d156      	bne.n	800480e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	689a      	ldr	r2, [r3, #8]
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	429a      	cmp	r2, r3
 800476a:	d914      	bls.n	8004796 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	689a      	ldr	r2, [r3, #8]
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	1ad2      	subs	r2, r2, r3
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	461a      	mov	r2, r3
 8004780:	6879      	ldr	r1, [r7, #4]
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f000 ff84 	bl	8005690 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004788:	2300      	movs	r3, #0
 800478a:	2200      	movs	r2, #0
 800478c:	2100      	movs	r1, #0
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f001 fb98 	bl	8005ec4 <USBD_LL_PrepareReceive>
 8004794:	e03b      	b.n	800480e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	68da      	ldr	r2, [r3, #12]
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d11c      	bne.n	80047dc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d316      	bcc.n	80047dc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	685a      	ldr	r2, [r3, #4]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d20f      	bcs.n	80047dc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80047bc:	2200      	movs	r2, #0
 80047be:	2100      	movs	r1, #0
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f000 ff65 	bl	8005690 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80047ce:	2300      	movs	r3, #0
 80047d0:	2200      	movs	r2, #0
 80047d2:	2100      	movs	r1, #0
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f001 fb75 	bl	8005ec4 <USBD_LL_PrepareReceive>
 80047da:	e018      	b.n	800480e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	2b03      	cmp	r3, #3
 80047e6:	d10b      	bne.n	8004800 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d005      	beq.n	8004800 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004800:	2180      	movs	r1, #128	; 0x80
 8004802:	68f8      	ldr	r0, [r7, #12]
 8004804:	f001 fab4 	bl	8005d70 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f000 ff76 	bl	80056fa <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004814:	2b01      	cmp	r3, #1
 8004816:	d122      	bne.n	800485e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f7ff fe98 	bl	800454e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004826:	e01a      	b.n	800485e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800482e:	b2db      	uxtb	r3, r3
 8004830:	2b03      	cmp	r3, #3
 8004832:	d114      	bne.n	800485e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800483a:	695b      	ldr	r3, [r3, #20]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00e      	beq.n	800485e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004846:	695b      	ldr	r3, [r3, #20]
 8004848:	7afa      	ldrb	r2, [r7, #11]
 800484a:	4611      	mov	r1, r2
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	4798      	blx	r3
 8004850:	4603      	mov	r3, r0
 8004852:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004854:	7dfb      	ldrb	r3, [r7, #23]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d001      	beq.n	800485e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800485a:	7dfb      	ldrb	r3, [r7, #23]
 800485c:	e000      	b.n	8004860 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3718      	adds	r7, #24
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004894:	2b00      	cmp	r3, #0
 8004896:	d101      	bne.n	800489c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8004898:	2303      	movs	r3, #3
 800489a:	e02f      	b.n	80048fc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00f      	beq.n	80048c6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d009      	beq.n	80048c6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	6852      	ldr	r2, [r2, #4]
 80048be:	b2d2      	uxtb	r2, r2
 80048c0:	4611      	mov	r1, r2
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80048c6:	2340      	movs	r3, #64	; 0x40
 80048c8:	2200      	movs	r2, #0
 80048ca:	2100      	movs	r1, #0
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f001 fa0a 	bl	8005ce6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2240      	movs	r2, #64	; 0x40
 80048de:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80048e2:	2340      	movs	r3, #64	; 0x40
 80048e4:	2200      	movs	r2, #0
 80048e6:	2180      	movs	r1, #128	; 0x80
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f001 f9fc 	bl	8005ce6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2240      	movs	r2, #64	; 0x40
 80048f8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3708      	adds	r7, #8
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	460b      	mov	r3, r1
 800490e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	78fa      	ldrb	r2, [r7, #3]
 8004914:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004932:	b2da      	uxtb	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2204      	movs	r2, #4
 800493e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b04      	cmp	r3, #4
 8004962:	d106      	bne.n	8004972 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800496a:	b2da      	uxtb	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800498e:	2b00      	cmp	r3, #0
 8004990:	d101      	bne.n	8004996 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8004992:	2303      	movs	r3, #3
 8004994:	e012      	b.n	80049bc <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b03      	cmp	r3, #3
 80049a0:	d10b      	bne.n	80049ba <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049a8:	69db      	ldr	r3, [r3, #28]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d005      	beq.n	80049ba <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3708      	adds	r7, #8
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	460b      	mov	r3, r1
 80049ce:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80049da:	2303      	movs	r3, #3
 80049dc:	e014      	b.n	8004a08 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b03      	cmp	r3, #3
 80049e8:	d10d      	bne.n	8004a06 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d007      	beq.n	8004a06 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	78fa      	ldrb	r2, [r7, #3]
 8004a00:	4611      	mov	r1, r2
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3708      	adds	r7, #8
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	460b      	mov	r3, r1
 8004a1a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e014      	b.n	8004a54 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b03      	cmp	r3, #3
 8004a34:	d10d      	bne.n	8004a52 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d007      	beq.n	8004a52 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4a:	78fa      	ldrb	r2, [r7, #3]
 8004a4c:	4611      	mov	r1, r2
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3708      	adds	r7, #8
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	370c      	adds	r7, #12
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr

08004a72 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004a72:	b580      	push	{r7, lr}
 8004a74:	b082      	sub	sp, #8
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d009      	beq.n	8004aa0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	6852      	ldr	r2, [r2, #4]
 8004a98:	b2d2      	uxtb	r2, r2
 8004a9a:	4611      	mov	r1, r2
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	4798      	blx	r3
  }

  return USBD_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3708      	adds	r7, #8
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8004aaa:	b480      	push	{r7}
 8004aac:	b087      	sub	sp, #28
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	3301      	adds	r3, #1
 8004ac0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004ac8:	8a3b      	ldrh	r3, [r7, #16]
 8004aca:	021b      	lsls	r3, r3, #8
 8004acc:	b21a      	sxth	r2, r3
 8004ace:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	b21b      	sxth	r3, r3
 8004ad6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8004ad8:	89fb      	ldrh	r3, [r7, #14]
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	371c      	adds	r7, #28
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
	...

08004ae8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004af2:	2300      	movs	r3, #0
 8004af4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004afe:	2b40      	cmp	r3, #64	; 0x40
 8004b00:	d005      	beq.n	8004b0e <USBD_StdDevReq+0x26>
 8004b02:	2b40      	cmp	r3, #64	; 0x40
 8004b04:	d853      	bhi.n	8004bae <USBD_StdDevReq+0xc6>
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00b      	beq.n	8004b22 <USBD_StdDevReq+0x3a>
 8004b0a:	2b20      	cmp	r3, #32
 8004b0c:	d14f      	bne.n	8004bae <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	6839      	ldr	r1, [r7, #0]
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	4798      	blx	r3
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b20:	e04a      	b.n	8004bb8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	785b      	ldrb	r3, [r3, #1]
 8004b26:	2b09      	cmp	r3, #9
 8004b28:	d83b      	bhi.n	8004ba2 <USBD_StdDevReq+0xba>
 8004b2a:	a201      	add	r2, pc, #4	; (adr r2, 8004b30 <USBD_StdDevReq+0x48>)
 8004b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b30:	08004b85 	.word	0x08004b85
 8004b34:	08004b99 	.word	0x08004b99
 8004b38:	08004ba3 	.word	0x08004ba3
 8004b3c:	08004b8f 	.word	0x08004b8f
 8004b40:	08004ba3 	.word	0x08004ba3
 8004b44:	08004b63 	.word	0x08004b63
 8004b48:	08004b59 	.word	0x08004b59
 8004b4c:	08004ba3 	.word	0x08004ba3
 8004b50:	08004b7b 	.word	0x08004b7b
 8004b54:	08004b6d 	.word	0x08004b6d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8004b58:	6839      	ldr	r1, [r7, #0]
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f9de 	bl	8004f1c <USBD_GetDescriptor>
          break;
 8004b60:	e024      	b.n	8004bac <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8004b62:	6839      	ldr	r1, [r7, #0]
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 fb43 	bl	80051f0 <USBD_SetAddress>
          break;
 8004b6a:	e01f      	b.n	8004bac <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8004b6c:	6839      	ldr	r1, [r7, #0]
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 fb82 	bl	8005278 <USBD_SetConfig>
 8004b74:	4603      	mov	r3, r0
 8004b76:	73fb      	strb	r3, [r7, #15]
          break;
 8004b78:	e018      	b.n	8004bac <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8004b7a:	6839      	ldr	r1, [r7, #0]
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 fc21 	bl	80053c4 <USBD_GetConfig>
          break;
 8004b82:	e013      	b.n	8004bac <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8004b84:	6839      	ldr	r1, [r7, #0]
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 fc52 	bl	8005430 <USBD_GetStatus>
          break;
 8004b8c:	e00e      	b.n	8004bac <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8004b8e:	6839      	ldr	r1, [r7, #0]
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 fc81 	bl	8005498 <USBD_SetFeature>
          break;
 8004b96:	e009      	b.n	8004bac <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8004b98:	6839      	ldr	r1, [r7, #0]
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 fc90 	bl	80054c0 <USBD_ClrFeature>
          break;
 8004ba0:	e004      	b.n	8004bac <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8004ba2:	6839      	ldr	r1, [r7, #0]
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 fce7 	bl	8005578 <USBD_CtlError>
          break;
 8004baa:	bf00      	nop
      }
      break;
 8004bac:	e004      	b.n	8004bb8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8004bae:	6839      	ldr	r1, [r7, #0]
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 fce1 	bl	8005578 <USBD_CtlError>
      break;
 8004bb6:	bf00      	nop
  }

  return ret;
 8004bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop

08004bc4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004bda:	2b40      	cmp	r3, #64	; 0x40
 8004bdc:	d005      	beq.n	8004bea <USBD_StdItfReq+0x26>
 8004bde:	2b40      	cmp	r3, #64	; 0x40
 8004be0:	d82f      	bhi.n	8004c42 <USBD_StdItfReq+0x7e>
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <USBD_StdItfReq+0x26>
 8004be6:	2b20      	cmp	r3, #32
 8004be8:	d12b      	bne.n	8004c42 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d81d      	bhi.n	8004c34 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	889b      	ldrh	r3, [r3, #4]
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d813      	bhi.n	8004c2a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	6839      	ldr	r1, [r7, #0]
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	4798      	blx	r3
 8004c10:	4603      	mov	r3, r0
 8004c12:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	88db      	ldrh	r3, [r3, #6]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d110      	bne.n	8004c3e <USBD_StdItfReq+0x7a>
 8004c1c:	7bfb      	ldrb	r3, [r7, #15]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10d      	bne.n	8004c3e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 fd56 	bl	80056d4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8004c28:	e009      	b.n	8004c3e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8004c2a:	6839      	ldr	r1, [r7, #0]
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 fca3 	bl	8005578 <USBD_CtlError>
          break;
 8004c32:	e004      	b.n	8004c3e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8004c34:	6839      	ldr	r1, [r7, #0]
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 fc9e 	bl	8005578 <USBD_CtlError>
          break;
 8004c3c:	e000      	b.n	8004c40 <USBD_StdItfReq+0x7c>
          break;
 8004c3e:	bf00      	nop
      }
      break;
 8004c40:	e004      	b.n	8004c4c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8004c42:	6839      	ldr	r1, [r7, #0]
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 fc97 	bl	8005578 <USBD_CtlError>
      break;
 8004c4a:	bf00      	nop
  }

  return ret;
 8004c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b084      	sub	sp, #16
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
 8004c5e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004c60:	2300      	movs	r3, #0
 8004c62:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	889b      	ldrh	r3, [r3, #4]
 8004c68:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004c72:	2b40      	cmp	r3, #64	; 0x40
 8004c74:	d007      	beq.n	8004c86 <USBD_StdEPReq+0x30>
 8004c76:	2b40      	cmp	r3, #64	; 0x40
 8004c78:	f200 8145 	bhi.w	8004f06 <USBD_StdEPReq+0x2b0>
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00c      	beq.n	8004c9a <USBD_StdEPReq+0x44>
 8004c80:	2b20      	cmp	r3, #32
 8004c82:	f040 8140 	bne.w	8004f06 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	6839      	ldr	r1, [r7, #0]
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	4798      	blx	r3
 8004c94:	4603      	mov	r3, r0
 8004c96:	73fb      	strb	r3, [r7, #15]
      break;
 8004c98:	e13a      	b.n	8004f10 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	785b      	ldrb	r3, [r3, #1]
 8004c9e:	2b03      	cmp	r3, #3
 8004ca0:	d007      	beq.n	8004cb2 <USBD_StdEPReq+0x5c>
 8004ca2:	2b03      	cmp	r3, #3
 8004ca4:	f300 8129 	bgt.w	8004efa <USBD_StdEPReq+0x2a4>
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d07f      	beq.n	8004dac <USBD_StdEPReq+0x156>
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d03c      	beq.n	8004d2a <USBD_StdEPReq+0xd4>
 8004cb0:	e123      	b.n	8004efa <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d002      	beq.n	8004cc4 <USBD_StdEPReq+0x6e>
 8004cbe:	2b03      	cmp	r3, #3
 8004cc0:	d016      	beq.n	8004cf0 <USBD_StdEPReq+0x9a>
 8004cc2:	e02c      	b.n	8004d1e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004cc4:	7bbb      	ldrb	r3, [r7, #14]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00d      	beq.n	8004ce6 <USBD_StdEPReq+0x90>
 8004cca:	7bbb      	ldrb	r3, [r7, #14]
 8004ccc:	2b80      	cmp	r3, #128	; 0x80
 8004cce:	d00a      	beq.n	8004ce6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004cd0:	7bbb      	ldrb	r3, [r7, #14]
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f001 f84b 	bl	8005d70 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004cda:	2180      	movs	r1, #128	; 0x80
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f001 f847 	bl	8005d70 <USBD_LL_StallEP>
 8004ce2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004ce4:	e020      	b.n	8004d28 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8004ce6:	6839      	ldr	r1, [r7, #0]
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 fc45 	bl	8005578 <USBD_CtlError>
              break;
 8004cee:	e01b      	b.n	8004d28 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	885b      	ldrh	r3, [r3, #2]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10e      	bne.n	8004d16 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004cf8:	7bbb      	ldrb	r3, [r7, #14]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00b      	beq.n	8004d16 <USBD_StdEPReq+0xc0>
 8004cfe:	7bbb      	ldrb	r3, [r7, #14]
 8004d00:	2b80      	cmp	r3, #128	; 0x80
 8004d02:	d008      	beq.n	8004d16 <USBD_StdEPReq+0xc0>
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	88db      	ldrh	r3, [r3, #6]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d104      	bne.n	8004d16 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8004d0c:	7bbb      	ldrb	r3, [r7, #14]
 8004d0e:	4619      	mov	r1, r3
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f001 f82d 	bl	8005d70 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 fcdc 	bl	80056d4 <USBD_CtlSendStatus>

              break;
 8004d1c:	e004      	b.n	8004d28 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8004d1e:	6839      	ldr	r1, [r7, #0]
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 fc29 	bl	8005578 <USBD_CtlError>
              break;
 8004d26:	bf00      	nop
          }
          break;
 8004d28:	e0ec      	b.n	8004f04 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d002      	beq.n	8004d3c <USBD_StdEPReq+0xe6>
 8004d36:	2b03      	cmp	r3, #3
 8004d38:	d016      	beq.n	8004d68 <USBD_StdEPReq+0x112>
 8004d3a:	e030      	b.n	8004d9e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004d3c:	7bbb      	ldrb	r3, [r7, #14]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00d      	beq.n	8004d5e <USBD_StdEPReq+0x108>
 8004d42:	7bbb      	ldrb	r3, [r7, #14]
 8004d44:	2b80      	cmp	r3, #128	; 0x80
 8004d46:	d00a      	beq.n	8004d5e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004d48:	7bbb      	ldrb	r3, [r7, #14]
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f001 f80f 	bl	8005d70 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004d52:	2180      	movs	r1, #128	; 0x80
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f001 f80b 	bl	8005d70 <USBD_LL_StallEP>
 8004d5a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004d5c:	e025      	b.n	8004daa <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8004d5e:	6839      	ldr	r1, [r7, #0]
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 fc09 	bl	8005578 <USBD_CtlError>
              break;
 8004d66:	e020      	b.n	8004daa <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	885b      	ldrh	r3, [r3, #2]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d11b      	bne.n	8004da8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8004d70:	7bbb      	ldrb	r3, [r7, #14]
 8004d72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d004      	beq.n	8004d84 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8004d7a:	7bbb      	ldrb	r3, [r7, #14]
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f001 f815 	bl	8005dae <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 fca5 	bl	80056d4 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	6839      	ldr	r1, [r7, #0]
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	4798      	blx	r3
 8004d98:	4603      	mov	r3, r0
 8004d9a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8004d9c:	e004      	b.n	8004da8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8004d9e:	6839      	ldr	r1, [r7, #0]
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 fbe9 	bl	8005578 <USBD_CtlError>
              break;
 8004da6:	e000      	b.n	8004daa <USBD_StdEPReq+0x154>
              break;
 8004da8:	bf00      	nop
          }
          break;
 8004daa:	e0ab      	b.n	8004f04 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d002      	beq.n	8004dbe <USBD_StdEPReq+0x168>
 8004db8:	2b03      	cmp	r3, #3
 8004dba:	d032      	beq.n	8004e22 <USBD_StdEPReq+0x1cc>
 8004dbc:	e097      	b.n	8004eee <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004dbe:	7bbb      	ldrb	r3, [r7, #14]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d007      	beq.n	8004dd4 <USBD_StdEPReq+0x17e>
 8004dc4:	7bbb      	ldrb	r3, [r7, #14]
 8004dc6:	2b80      	cmp	r3, #128	; 0x80
 8004dc8:	d004      	beq.n	8004dd4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8004dca:	6839      	ldr	r1, [r7, #0]
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 fbd3 	bl	8005578 <USBD_CtlError>
                break;
 8004dd2:	e091      	b.n	8004ef8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004dd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	da0b      	bge.n	8004df4 <USBD_StdEPReq+0x19e>
 8004ddc:	7bbb      	ldrb	r3, [r7, #14]
 8004dde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004de2:	4613      	mov	r3, r2
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	4413      	add	r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	3310      	adds	r3, #16
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	4413      	add	r3, r2
 8004df0:	3304      	adds	r3, #4
 8004df2:	e00b      	b.n	8004e0c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004df4:	7bbb      	ldrb	r3, [r7, #14]
 8004df6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	4413      	add	r3, r2
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	4413      	add	r3, r2
 8004e0a:	3304      	adds	r3, #4
 8004e0c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	2200      	movs	r2, #0
 8004e12:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	2202      	movs	r2, #2
 8004e18:	4619      	mov	r1, r3
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 fc1d 	bl	800565a <USBD_CtlSendData>
              break;
 8004e20:	e06a      	b.n	8004ef8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8004e22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	da11      	bge.n	8004e4e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004e2a:	7bbb      	ldrb	r3, [r7, #14]
 8004e2c:	f003 020f 	and.w	r2, r3, #15
 8004e30:	6879      	ldr	r1, [r7, #4]
 8004e32:	4613      	mov	r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	4413      	add	r3, r2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	440b      	add	r3, r1
 8004e3c:	3324      	adds	r3, #36	; 0x24
 8004e3e:	881b      	ldrh	r3, [r3, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d117      	bne.n	8004e74 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8004e44:	6839      	ldr	r1, [r7, #0]
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 fb96 	bl	8005578 <USBD_CtlError>
                  break;
 8004e4c:	e054      	b.n	8004ef8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004e4e:	7bbb      	ldrb	r3, [r7, #14]
 8004e50:	f003 020f 	and.w	r2, r3, #15
 8004e54:	6879      	ldr	r1, [r7, #4]
 8004e56:	4613      	mov	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	4413      	add	r3, r2
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	440b      	add	r3, r1
 8004e60:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004e64:	881b      	ldrh	r3, [r3, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d104      	bne.n	8004e74 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8004e6a:	6839      	ldr	r1, [r7, #0]
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 fb83 	bl	8005578 <USBD_CtlError>
                  break;
 8004e72:	e041      	b.n	8004ef8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004e74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	da0b      	bge.n	8004e94 <USBD_StdEPReq+0x23e>
 8004e7c:	7bbb      	ldrb	r3, [r7, #14]
 8004e7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004e82:	4613      	mov	r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4413      	add	r3, r2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	3310      	adds	r3, #16
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	4413      	add	r3, r2
 8004e90:	3304      	adds	r3, #4
 8004e92:	e00b      	b.n	8004eac <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004e94:	7bbb      	ldrb	r3, [r7, #14]
 8004e96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	4413      	add	r3, r2
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	3304      	adds	r3, #4
 8004eac:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004eae:	7bbb      	ldrb	r3, [r7, #14]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d002      	beq.n	8004eba <USBD_StdEPReq+0x264>
 8004eb4:	7bbb      	ldrb	r3, [r7, #14]
 8004eb6:	2b80      	cmp	r3, #128	; 0x80
 8004eb8:	d103      	bne.n	8004ec2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	601a      	str	r2, [r3, #0]
 8004ec0:	e00e      	b.n	8004ee0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8004ec2:	7bbb      	ldrb	r3, [r7, #14]
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 ff90 	bl	8005dec <USBD_LL_IsStallEP>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	601a      	str	r2, [r3, #0]
 8004ed8:	e002      	b.n	8004ee0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	2200      	movs	r2, #0
 8004ede:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 fbb7 	bl	800565a <USBD_CtlSendData>
              break;
 8004eec:	e004      	b.n	8004ef8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8004eee:	6839      	ldr	r1, [r7, #0]
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 fb41 	bl	8005578 <USBD_CtlError>
              break;
 8004ef6:	bf00      	nop
          }
          break;
 8004ef8:	e004      	b.n	8004f04 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8004efa:	6839      	ldr	r1, [r7, #0]
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 fb3b 	bl	8005578 <USBD_CtlError>
          break;
 8004f02:	bf00      	nop
      }
      break;
 8004f04:	e004      	b.n	8004f10 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8004f06:	6839      	ldr	r1, [r7, #0]
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 fb35 	bl	8005578 <USBD_CtlError>
      break;
 8004f0e:	bf00      	nop
  }

  return ret;
 8004f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3710      	adds	r7, #16
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
	...

08004f1c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004f26:	2300      	movs	r3, #0
 8004f28:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	885b      	ldrh	r3, [r3, #2]
 8004f36:	0a1b      	lsrs	r3, r3, #8
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	2b06      	cmp	r3, #6
 8004f3e:	f200 8128 	bhi.w	8005192 <USBD_GetDescriptor+0x276>
 8004f42:	a201      	add	r2, pc, #4	; (adr r2, 8004f48 <USBD_GetDescriptor+0x2c>)
 8004f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f48:	08004f65 	.word	0x08004f65
 8004f4c:	08004f7d 	.word	0x08004f7d
 8004f50:	08004fbd 	.word	0x08004fbd
 8004f54:	08005193 	.word	0x08005193
 8004f58:	08005193 	.word	0x08005193
 8004f5c:	08005133 	.word	0x08005133
 8004f60:	0800515f 	.word	0x0800515f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	7c12      	ldrb	r2, [r2, #16]
 8004f70:	f107 0108 	add.w	r1, r7, #8
 8004f74:	4610      	mov	r0, r2
 8004f76:	4798      	blx	r3
 8004f78:	60f8      	str	r0, [r7, #12]
      break;
 8004f7a:	e112      	b.n	80051a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	7c1b      	ldrb	r3, [r3, #16]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d10d      	bne.n	8004fa0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f8c:	f107 0208 	add.w	r2, r7, #8
 8004f90:	4610      	mov	r0, r2
 8004f92:	4798      	blx	r3
 8004f94:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	3301      	adds	r3, #1
 8004f9a:	2202      	movs	r2, #2
 8004f9c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8004f9e:	e100      	b.n	80051a2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa8:	f107 0208 	add.w	r2, r7, #8
 8004fac:	4610      	mov	r0, r2
 8004fae:	4798      	blx	r3
 8004fb0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	2202      	movs	r2, #2
 8004fb8:	701a      	strb	r2, [r3, #0]
      break;
 8004fba:	e0f2      	b.n	80051a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	885b      	ldrh	r3, [r3, #2]
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	2b05      	cmp	r3, #5
 8004fc4:	f200 80ac 	bhi.w	8005120 <USBD_GetDescriptor+0x204>
 8004fc8:	a201      	add	r2, pc, #4	; (adr r2, 8004fd0 <USBD_GetDescriptor+0xb4>)
 8004fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fce:	bf00      	nop
 8004fd0:	08004fe9 	.word	0x08004fe9
 8004fd4:	0800501d 	.word	0x0800501d
 8004fd8:	08005051 	.word	0x08005051
 8004fdc:	08005085 	.word	0x08005085
 8004fe0:	080050b9 	.word	0x080050b9
 8004fe4:	080050ed 	.word	0x080050ed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00b      	beq.n	800500c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	7c12      	ldrb	r2, [r2, #16]
 8005000:	f107 0108 	add.w	r1, r7, #8
 8005004:	4610      	mov	r0, r2
 8005006:	4798      	blx	r3
 8005008:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800500a:	e091      	b.n	8005130 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800500c:	6839      	ldr	r1, [r7, #0]
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 fab2 	bl	8005578 <USBD_CtlError>
            err++;
 8005014:	7afb      	ldrb	r3, [r7, #11]
 8005016:	3301      	adds	r3, #1
 8005018:	72fb      	strb	r3, [r7, #11]
          break;
 800501a:	e089      	b.n	8005130 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00b      	beq.n	8005040 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	7c12      	ldrb	r2, [r2, #16]
 8005034:	f107 0108 	add.w	r1, r7, #8
 8005038:	4610      	mov	r0, r2
 800503a:	4798      	blx	r3
 800503c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800503e:	e077      	b.n	8005130 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005040:	6839      	ldr	r1, [r7, #0]
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 fa98 	bl	8005578 <USBD_CtlError>
            err++;
 8005048:	7afb      	ldrb	r3, [r7, #11]
 800504a:	3301      	adds	r3, #1
 800504c:	72fb      	strb	r3, [r7, #11]
          break;
 800504e:	e06f      	b.n	8005130 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00b      	beq.n	8005074 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	7c12      	ldrb	r2, [r2, #16]
 8005068:	f107 0108 	add.w	r1, r7, #8
 800506c:	4610      	mov	r0, r2
 800506e:	4798      	blx	r3
 8005070:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005072:	e05d      	b.n	8005130 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005074:	6839      	ldr	r1, [r7, #0]
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 fa7e 	bl	8005578 <USBD_CtlError>
            err++;
 800507c:	7afb      	ldrb	r3, [r7, #11]
 800507e:	3301      	adds	r3, #1
 8005080:	72fb      	strb	r3, [r7, #11]
          break;
 8005082:	e055      	b.n	8005130 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00b      	beq.n	80050a8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	7c12      	ldrb	r2, [r2, #16]
 800509c:	f107 0108 	add.w	r1, r7, #8
 80050a0:	4610      	mov	r0, r2
 80050a2:	4798      	blx	r3
 80050a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80050a6:	e043      	b.n	8005130 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80050a8:	6839      	ldr	r1, [r7, #0]
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 fa64 	bl	8005578 <USBD_CtlError>
            err++;
 80050b0:	7afb      	ldrb	r3, [r7, #11]
 80050b2:	3301      	adds	r3, #1
 80050b4:	72fb      	strb	r3, [r7, #11]
          break;
 80050b6:	e03b      	b.n	8005130 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050be:	695b      	ldr	r3, [r3, #20]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00b      	beq.n	80050dc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050ca:	695b      	ldr	r3, [r3, #20]
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	7c12      	ldrb	r2, [r2, #16]
 80050d0:	f107 0108 	add.w	r1, r7, #8
 80050d4:	4610      	mov	r0, r2
 80050d6:	4798      	blx	r3
 80050d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80050da:	e029      	b.n	8005130 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80050dc:	6839      	ldr	r1, [r7, #0]
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 fa4a 	bl	8005578 <USBD_CtlError>
            err++;
 80050e4:	7afb      	ldrb	r3, [r7, #11]
 80050e6:	3301      	adds	r3, #1
 80050e8:	72fb      	strb	r3, [r7, #11]
          break;
 80050ea:	e021      	b.n	8005130 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00b      	beq.n	8005110 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	7c12      	ldrb	r2, [r2, #16]
 8005104:	f107 0108 	add.w	r1, r7, #8
 8005108:	4610      	mov	r0, r2
 800510a:	4798      	blx	r3
 800510c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800510e:	e00f      	b.n	8005130 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005110:	6839      	ldr	r1, [r7, #0]
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 fa30 	bl	8005578 <USBD_CtlError>
            err++;
 8005118:	7afb      	ldrb	r3, [r7, #11]
 800511a:	3301      	adds	r3, #1
 800511c:	72fb      	strb	r3, [r7, #11]
          break;
 800511e:	e007      	b.n	8005130 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005120:	6839      	ldr	r1, [r7, #0]
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 fa28 	bl	8005578 <USBD_CtlError>
          err++;
 8005128:	7afb      	ldrb	r3, [r7, #11]
 800512a:	3301      	adds	r3, #1
 800512c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800512e:	bf00      	nop
      }
      break;
 8005130:	e037      	b.n	80051a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	7c1b      	ldrb	r3, [r3, #16]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d109      	bne.n	800514e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005142:	f107 0208 	add.w	r2, r7, #8
 8005146:	4610      	mov	r0, r2
 8005148:	4798      	blx	r3
 800514a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800514c:	e029      	b.n	80051a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800514e:	6839      	ldr	r1, [r7, #0]
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 fa11 	bl	8005578 <USBD_CtlError>
        err++;
 8005156:	7afb      	ldrb	r3, [r7, #11]
 8005158:	3301      	adds	r3, #1
 800515a:	72fb      	strb	r3, [r7, #11]
      break;
 800515c:	e021      	b.n	80051a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	7c1b      	ldrb	r3, [r3, #16]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d10d      	bne.n	8005182 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800516c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516e:	f107 0208 	add.w	r2, r7, #8
 8005172:	4610      	mov	r0, r2
 8005174:	4798      	blx	r3
 8005176:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	3301      	adds	r3, #1
 800517c:	2207      	movs	r2, #7
 800517e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005180:	e00f      	b.n	80051a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005182:	6839      	ldr	r1, [r7, #0]
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 f9f7 	bl	8005578 <USBD_CtlError>
        err++;
 800518a:	7afb      	ldrb	r3, [r7, #11]
 800518c:	3301      	adds	r3, #1
 800518e:	72fb      	strb	r3, [r7, #11]
      break;
 8005190:	e007      	b.n	80051a2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005192:	6839      	ldr	r1, [r7, #0]
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 f9ef 	bl	8005578 <USBD_CtlError>
      err++;
 800519a:	7afb      	ldrb	r3, [r7, #11]
 800519c:	3301      	adds	r3, #1
 800519e:	72fb      	strb	r3, [r7, #11]
      break;
 80051a0:	bf00      	nop
  }

  if (err != 0U)
 80051a2:	7afb      	ldrb	r3, [r7, #11]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d11e      	bne.n	80051e6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	88db      	ldrh	r3, [r3, #6]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d016      	beq.n	80051de <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80051b0:	893b      	ldrh	r3, [r7, #8]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00e      	beq.n	80051d4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	88da      	ldrh	r2, [r3, #6]
 80051ba:	893b      	ldrh	r3, [r7, #8]
 80051bc:	4293      	cmp	r3, r2
 80051be:	bf28      	it	cs
 80051c0:	4613      	movcs	r3, r2
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80051c6:	893b      	ldrh	r3, [r7, #8]
 80051c8:	461a      	mov	r2, r3
 80051ca:	68f9      	ldr	r1, [r7, #12]
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 fa44 	bl	800565a <USBD_CtlSendData>
 80051d2:	e009      	b.n	80051e8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80051d4:	6839      	ldr	r1, [r7, #0]
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f9ce 	bl	8005578 <USBD_CtlError>
 80051dc:	e004      	b.n	80051e8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 fa78 	bl	80056d4 <USBD_CtlSendStatus>
 80051e4:	e000      	b.n	80051e8 <USBD_GetDescriptor+0x2cc>
    return;
 80051e6:	bf00      	nop
  }
}
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop

080051f0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	889b      	ldrh	r3, [r3, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d131      	bne.n	8005266 <USBD_SetAddress+0x76>
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	88db      	ldrh	r3, [r3, #6]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d12d      	bne.n	8005266 <USBD_SetAddress+0x76>
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	885b      	ldrh	r3, [r3, #2]
 800520e:	2b7f      	cmp	r3, #127	; 0x7f
 8005210:	d829      	bhi.n	8005266 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	885b      	ldrh	r3, [r3, #2]
 8005216:	b2db      	uxtb	r3, r3
 8005218:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800521c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b03      	cmp	r3, #3
 8005228:	d104      	bne.n	8005234 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800522a:	6839      	ldr	r1, [r7, #0]
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 f9a3 	bl	8005578 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005232:	e01d      	b.n	8005270 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	7bfa      	ldrb	r2, [r7, #15]
 8005238:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800523c:	7bfb      	ldrb	r3, [r7, #15]
 800523e:	4619      	mov	r1, r3
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 fdff 	bl	8005e44 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 fa44 	bl	80056d4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800524c:	7bfb      	ldrb	r3, [r7, #15]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d004      	beq.n	800525c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2202      	movs	r2, #2
 8005256:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800525a:	e009      	b.n	8005270 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005264:	e004      	b.n	8005270 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005266:	6839      	ldr	r1, [r7, #0]
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 f985 	bl	8005578 <USBD_CtlError>
  }
}
 800526e:	bf00      	nop
 8005270:	bf00      	nop
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005282:	2300      	movs	r3, #0
 8005284:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	885b      	ldrh	r3, [r3, #2]
 800528a:	b2da      	uxtb	r2, r3
 800528c:	4b4c      	ldr	r3, [pc, #304]	; (80053c0 <USBD_SetConfig+0x148>)
 800528e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005290:	4b4b      	ldr	r3, [pc, #300]	; (80053c0 <USBD_SetConfig+0x148>)
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d905      	bls.n	80052a4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005298:	6839      	ldr	r1, [r7, #0]
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 f96c 	bl	8005578 <USBD_CtlError>
    return USBD_FAIL;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e088      	b.n	80053b6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d002      	beq.n	80052b6 <USBD_SetConfig+0x3e>
 80052b0:	2b03      	cmp	r3, #3
 80052b2:	d025      	beq.n	8005300 <USBD_SetConfig+0x88>
 80052b4:	e071      	b.n	800539a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80052b6:	4b42      	ldr	r3, [pc, #264]	; (80053c0 <USBD_SetConfig+0x148>)
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d01c      	beq.n	80052f8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80052be:	4b40      	ldr	r3, [pc, #256]	; (80053c0 <USBD_SetConfig+0x148>)
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	461a      	mov	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80052c8:	4b3d      	ldr	r3, [pc, #244]	; (80053c0 <USBD_SetConfig+0x148>)
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	4619      	mov	r1, r3
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f7ff f948 	bl	8004564 <USBD_SetClassConfig>
 80052d4:	4603      	mov	r3, r0
 80052d6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80052d8:	7bfb      	ldrb	r3, [r7, #15]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d004      	beq.n	80052e8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80052de:	6839      	ldr	r1, [r7, #0]
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 f949 	bl	8005578 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80052e6:	e065      	b.n	80053b4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 f9f3 	bl	80056d4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2203      	movs	r2, #3
 80052f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80052f6:	e05d      	b.n	80053b4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f000 f9eb 	bl	80056d4 <USBD_CtlSendStatus>
      break;
 80052fe:	e059      	b.n	80053b4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005300:	4b2f      	ldr	r3, [pc, #188]	; (80053c0 <USBD_SetConfig+0x148>)
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d112      	bne.n	800532e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2202      	movs	r2, #2
 800530c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005310:	4b2b      	ldr	r3, [pc, #172]	; (80053c0 <USBD_SetConfig+0x148>)
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	461a      	mov	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800531a:	4b29      	ldr	r3, [pc, #164]	; (80053c0 <USBD_SetConfig+0x148>)
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	4619      	mov	r1, r3
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f7ff f93b 	bl	800459c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 f9d4 	bl	80056d4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800532c:	e042      	b.n	80053b4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800532e:	4b24      	ldr	r3, [pc, #144]	; (80053c0 <USBD_SetConfig+0x148>)
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	461a      	mov	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	429a      	cmp	r2, r3
 800533a:	d02a      	beq.n	8005392 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	b2db      	uxtb	r3, r3
 8005342:	4619      	mov	r1, r3
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f7ff f929 	bl	800459c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800534a:	4b1d      	ldr	r3, [pc, #116]	; (80053c0 <USBD_SetConfig+0x148>)
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	461a      	mov	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005354:	4b1a      	ldr	r3, [pc, #104]	; (80053c0 <USBD_SetConfig+0x148>)
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	4619      	mov	r1, r3
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f7ff f902 	bl	8004564 <USBD_SetClassConfig>
 8005360:	4603      	mov	r3, r0
 8005362:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005364:	7bfb      	ldrb	r3, [r7, #15]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00f      	beq.n	800538a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800536a:	6839      	ldr	r1, [r7, #0]
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 f903 	bl	8005578 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	b2db      	uxtb	r3, r3
 8005378:	4619      	mov	r1, r3
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f7ff f90e 	bl	800459c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2202      	movs	r2, #2
 8005384:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005388:	e014      	b.n	80053b4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f9a2 	bl	80056d4 <USBD_CtlSendStatus>
      break;
 8005390:	e010      	b.n	80053b4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f99e 	bl	80056d4 <USBD_CtlSendStatus>
      break;
 8005398:	e00c      	b.n	80053b4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800539a:	6839      	ldr	r1, [r7, #0]
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 f8eb 	bl	8005578 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80053a2:	4b07      	ldr	r3, [pc, #28]	; (80053c0 <USBD_SetConfig+0x148>)
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	4619      	mov	r1, r3
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f7ff f8f7 	bl	800459c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80053ae:	2303      	movs	r3, #3
 80053b0:	73fb      	strb	r3, [r7, #15]
      break;
 80053b2:	bf00      	nop
  }

  return ret;
 80053b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3710      	adds	r7, #16
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	20000184 	.word	0x20000184

080053c4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	88db      	ldrh	r3, [r3, #6]
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d004      	beq.n	80053e0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80053d6:	6839      	ldr	r1, [r7, #0]
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 f8cd 	bl	8005578 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80053de:	e023      	b.n	8005428 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	dc02      	bgt.n	80053f2 <USBD_GetConfig+0x2e>
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	dc03      	bgt.n	80053f8 <USBD_GetConfig+0x34>
 80053f0:	e015      	b.n	800541e <USBD_GetConfig+0x5a>
 80053f2:	2b03      	cmp	r3, #3
 80053f4:	d00b      	beq.n	800540e <USBD_GetConfig+0x4a>
 80053f6:	e012      	b.n	800541e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	3308      	adds	r3, #8
 8005402:	2201      	movs	r2, #1
 8005404:	4619      	mov	r1, r3
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 f927 	bl	800565a <USBD_CtlSendData>
        break;
 800540c:	e00c      	b.n	8005428 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	3304      	adds	r3, #4
 8005412:	2201      	movs	r2, #1
 8005414:	4619      	mov	r1, r3
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f91f 	bl	800565a <USBD_CtlSendData>
        break;
 800541c:	e004      	b.n	8005428 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800541e:	6839      	ldr	r1, [r7, #0]
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 f8a9 	bl	8005578 <USBD_CtlError>
        break;
 8005426:	bf00      	nop
}
 8005428:	bf00      	nop
 800542a:	3708      	adds	r7, #8
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005440:	b2db      	uxtb	r3, r3
 8005442:	3b01      	subs	r3, #1
 8005444:	2b02      	cmp	r3, #2
 8005446:	d81e      	bhi.n	8005486 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	88db      	ldrh	r3, [r3, #6]
 800544c:	2b02      	cmp	r3, #2
 800544e:	d004      	beq.n	800545a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005450:	6839      	ldr	r1, [r7, #0]
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f890 	bl	8005578 <USBD_CtlError>
        break;
 8005458:	e01a      	b.n	8005490 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005466:	2b00      	cmp	r3, #0
 8005468:	d005      	beq.n	8005476 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	f043 0202 	orr.w	r2, r3, #2
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	330c      	adds	r3, #12
 800547a:	2202      	movs	r2, #2
 800547c:	4619      	mov	r1, r3
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 f8eb 	bl	800565a <USBD_CtlSendData>
      break;
 8005484:	e004      	b.n	8005490 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005486:	6839      	ldr	r1, [r7, #0]
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 f875 	bl	8005578 <USBD_CtlError>
      break;
 800548e:	bf00      	nop
  }
}
 8005490:	bf00      	nop
 8005492:	3708      	adds	r7, #8
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	885b      	ldrh	r3, [r3, #2]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d106      	bne.n	80054b8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 f90e 	bl	80056d4 <USBD_CtlSendStatus>
  }
}
 80054b8:	bf00      	nop
 80054ba:	3708      	adds	r7, #8
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	3b01      	subs	r3, #1
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d80b      	bhi.n	80054f0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	885b      	ldrh	r3, [r3, #2]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d10c      	bne.n	80054fa <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 f8f3 	bl	80056d4 <USBD_CtlSendStatus>
      }
      break;
 80054ee:	e004      	b.n	80054fa <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80054f0:	6839      	ldr	r1, [r7, #0]
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 f840 	bl	8005578 <USBD_CtlError>
      break;
 80054f8:	e000      	b.n	80054fc <USBD_ClrFeature+0x3c>
      break;
 80054fa:	bf00      	nop
  }
}
 80054fc:	bf00      	nop
 80054fe:	3708      	adds	r7, #8
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	781a      	ldrb	r2, [r3, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	3301      	adds	r3, #1
 800551e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	781a      	ldrb	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	3301      	adds	r3, #1
 800552c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f7ff fabb 	bl	8004aaa <SWAPBYTE>
 8005534:	4603      	mov	r3, r0
 8005536:	461a      	mov	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	3301      	adds	r3, #1
 8005540:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	3301      	adds	r3, #1
 8005546:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005548:	68f8      	ldr	r0, [r7, #12]
 800554a:	f7ff faae 	bl	8004aaa <SWAPBYTE>
 800554e:	4603      	mov	r3, r0
 8005550:	461a      	mov	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	3301      	adds	r3, #1
 800555a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	3301      	adds	r3, #1
 8005560:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005562:	68f8      	ldr	r0, [r7, #12]
 8005564:	f7ff faa1 	bl	8004aaa <SWAPBYTE>
 8005568:	4603      	mov	r3, r0
 800556a:	461a      	mov	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	80da      	strh	r2, [r3, #6]
}
 8005570:	bf00      	nop
 8005572:	3710      	adds	r7, #16
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005582:	2180      	movs	r1, #128	; 0x80
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 fbf3 	bl	8005d70 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800558a:	2100      	movs	r1, #0
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f000 fbef 	bl	8005d70 <USBD_LL_StallEP>
}
 8005592:	bf00      	nop
 8005594:	3708      	adds	r7, #8
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800559a:	b580      	push	{r7, lr}
 800559c:	b086      	sub	sp, #24
 800559e:	af00      	add	r7, sp, #0
 80055a0:	60f8      	str	r0, [r7, #12]
 80055a2:	60b9      	str	r1, [r7, #8]
 80055a4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80055a6:	2300      	movs	r3, #0
 80055a8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d036      	beq.n	800561e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80055b4:	6938      	ldr	r0, [r7, #16]
 80055b6:	f000 f836 	bl	8005626 <USBD_GetLen>
 80055ba:	4603      	mov	r3, r0
 80055bc:	3301      	adds	r3, #1
 80055be:	b29b      	uxth	r3, r3
 80055c0:	005b      	lsls	r3, r3, #1
 80055c2:	b29a      	uxth	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80055c8:	7dfb      	ldrb	r3, [r7, #23]
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	4413      	add	r3, r2
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	7812      	ldrb	r2, [r2, #0]
 80055d2:	701a      	strb	r2, [r3, #0]
  idx++;
 80055d4:	7dfb      	ldrb	r3, [r7, #23]
 80055d6:	3301      	adds	r3, #1
 80055d8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80055da:	7dfb      	ldrb	r3, [r7, #23]
 80055dc:	68ba      	ldr	r2, [r7, #8]
 80055de:	4413      	add	r3, r2
 80055e0:	2203      	movs	r2, #3
 80055e2:	701a      	strb	r2, [r3, #0]
  idx++;
 80055e4:	7dfb      	ldrb	r3, [r7, #23]
 80055e6:	3301      	adds	r3, #1
 80055e8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80055ea:	e013      	b.n	8005614 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80055ec:	7dfb      	ldrb	r3, [r7, #23]
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	4413      	add	r3, r2
 80055f2:	693a      	ldr	r2, [r7, #16]
 80055f4:	7812      	ldrb	r2, [r2, #0]
 80055f6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	3301      	adds	r3, #1
 80055fc:	613b      	str	r3, [r7, #16]
    idx++;
 80055fe:	7dfb      	ldrb	r3, [r7, #23]
 8005600:	3301      	adds	r3, #1
 8005602:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005604:	7dfb      	ldrb	r3, [r7, #23]
 8005606:	68ba      	ldr	r2, [r7, #8]
 8005608:	4413      	add	r3, r2
 800560a:	2200      	movs	r2, #0
 800560c:	701a      	strb	r2, [r3, #0]
    idx++;
 800560e:	7dfb      	ldrb	r3, [r7, #23]
 8005610:	3301      	adds	r3, #1
 8005612:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1e7      	bne.n	80055ec <USBD_GetString+0x52>
 800561c:	e000      	b.n	8005620 <USBD_GetString+0x86>
    return;
 800561e:	bf00      	nop
  }
}
 8005620:	3718      	adds	r7, #24
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005626:	b480      	push	{r7}
 8005628:	b085      	sub	sp, #20
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800562e:	2300      	movs	r3, #0
 8005630:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005636:	e005      	b.n	8005644 <USBD_GetLen+0x1e>
  {
    len++;
 8005638:	7bfb      	ldrb	r3, [r7, #15]
 800563a:	3301      	adds	r3, #1
 800563c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	3301      	adds	r3, #1
 8005642:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d1f5      	bne.n	8005638 <USBD_GetLen+0x12>
  }

  return len;
 800564c:	7bfb      	ldrb	r3, [r7, #15]
}
 800564e:	4618      	mov	r0, r3
 8005650:	3714      	adds	r7, #20
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr

0800565a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800565a:	b580      	push	{r7, lr}
 800565c:	b084      	sub	sp, #16
 800565e:	af00      	add	r7, sp, #0
 8005660:	60f8      	str	r0, [r7, #12]
 8005662:	60b9      	str	r1, [r7, #8]
 8005664:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2202      	movs	r2, #2
 800566a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	68ba      	ldr	r2, [r7, #8]
 800567e:	2100      	movs	r1, #0
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f000 fbfe 	bl	8005e82 <USBD_LL_Transmit>

  return USBD_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3710      	adds	r7, #16
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	68ba      	ldr	r2, [r7, #8]
 80056a0:	2100      	movs	r1, #0
 80056a2:	68f8      	ldr	r0, [r7, #12]
 80056a4:	f000 fbed 	bl	8005e82 <USBD_LL_Transmit>

  return USBD_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b084      	sub	sp, #16
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	60f8      	str	r0, [r7, #12]
 80056ba:	60b9      	str	r1, [r7, #8]
 80056bc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	68ba      	ldr	r2, [r7, #8]
 80056c2:	2100      	movs	r1, #0
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	f000 fbfd 	bl	8005ec4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3710      	adds	r7, #16
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2204      	movs	r2, #4
 80056e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80056e4:	2300      	movs	r3, #0
 80056e6:	2200      	movs	r2, #0
 80056e8:	2100      	movs	r1, #0
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 fbc9 	bl	8005e82 <USBD_LL_Transmit>

  return USBD_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3708      	adds	r7, #8
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}

080056fa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b082      	sub	sp, #8
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2205      	movs	r2, #5
 8005706:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800570a:	2300      	movs	r3, #0
 800570c:	2200      	movs	r2, #0
 800570e:	2100      	movs	r1, #0
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 fbd7 	bl	8005ec4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	3708      	adds	r7, #8
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005724:	2200      	movs	r2, #0
 8005726:	490e      	ldr	r1, [pc, #56]	; (8005760 <MX_USB_DEVICE_Init+0x40>)
 8005728:	480e      	ldr	r0, [pc, #56]	; (8005764 <MX_USB_DEVICE_Init+0x44>)
 800572a:	f7fe fead 	bl	8004488 <USBD_Init>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d001      	beq.n	8005738 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005734:	f7fa ff9e 	bl	8000674 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8005738:	490b      	ldr	r1, [pc, #44]	; (8005768 <MX_USB_DEVICE_Init+0x48>)
 800573a:	480a      	ldr	r0, [pc, #40]	; (8005764 <MX_USB_DEVICE_Init+0x44>)
 800573c:	f7fe fed4 	bl	80044e8 <USBD_RegisterClass>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d001      	beq.n	800574a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005746:	f7fa ff95 	bl	8000674 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800574a:	4806      	ldr	r0, [pc, #24]	; (8005764 <MX_USB_DEVICE_Init+0x44>)
 800574c:	f7fe fef3 	bl	8004536 <USBD_Start>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d001      	beq.n	800575a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8005756:	f7fa ff8d 	bl	8000674 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800575a:	bf00      	nop
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	20000114 	.word	0x20000114
 8005764:	200001a0 	.word	0x200001a0
 8005768:	2000000c 	.word	0x2000000c

0800576c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	4603      	mov	r3, r0
 8005774:	6039      	str	r1, [r7, #0]
 8005776:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	2212      	movs	r2, #18
 800577c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800577e:	4b03      	ldr	r3, [pc, #12]	; (800578c <USBD_FS_DeviceDescriptor+0x20>)
}
 8005780:	4618      	mov	r0, r3
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr
 800578c:	20000130 	.word	0x20000130

08005790 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	4603      	mov	r3, r0
 8005798:	6039      	str	r1, [r7, #0]
 800579a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	2204      	movs	r2, #4
 80057a0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80057a2:	4b03      	ldr	r3, [pc, #12]	; (80057b0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	20000144 	.word	0x20000144

080057b4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	4603      	mov	r3, r0
 80057bc:	6039      	str	r1, [r7, #0]
 80057be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80057c0:	79fb      	ldrb	r3, [r7, #7]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d105      	bne.n	80057d2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80057c6:	683a      	ldr	r2, [r7, #0]
 80057c8:	4907      	ldr	r1, [pc, #28]	; (80057e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80057ca:	4808      	ldr	r0, [pc, #32]	; (80057ec <USBD_FS_ProductStrDescriptor+0x38>)
 80057cc:	f7ff fee5 	bl	800559a <USBD_GetString>
 80057d0:	e004      	b.n	80057dc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80057d2:	683a      	ldr	r2, [r7, #0]
 80057d4:	4904      	ldr	r1, [pc, #16]	; (80057e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80057d6:	4805      	ldr	r0, [pc, #20]	; (80057ec <USBD_FS_ProductStrDescriptor+0x38>)
 80057d8:	f7ff fedf 	bl	800559a <USBD_GetString>
  }
  return USBD_StrDesc;
 80057dc:	4b02      	ldr	r3, [pc, #8]	; (80057e8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3708      	adds	r7, #8
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	20000470 	.word	0x20000470
 80057ec:	08006004 	.word	0x08006004

080057f0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	4603      	mov	r3, r0
 80057f8:	6039      	str	r1, [r7, #0]
 80057fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80057fc:	683a      	ldr	r2, [r7, #0]
 80057fe:	4904      	ldr	r1, [pc, #16]	; (8005810 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005800:	4804      	ldr	r0, [pc, #16]	; (8005814 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005802:	f7ff feca 	bl	800559a <USBD_GetString>
  return USBD_StrDesc;
 8005806:	4b02      	ldr	r3, [pc, #8]	; (8005810 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005808:	4618      	mov	r0, r3
 800580a:	3708      	adds	r7, #8
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	20000470 	.word	0x20000470
 8005814:	08006010 	.word	0x08006010

08005818 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
 800581e:	4603      	mov	r3, r0
 8005820:	6039      	str	r1, [r7, #0]
 8005822:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	221a      	movs	r2, #26
 8005828:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800582a:	f000 f843 	bl	80058b4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800582e:	4b02      	ldr	r3, [pc, #8]	; (8005838 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005830:	4618      	mov	r0, r3
 8005832:	3708      	adds	r7, #8
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}
 8005838:	20000148 	.word	0x20000148

0800583c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af00      	add	r7, sp, #0
 8005842:	4603      	mov	r3, r0
 8005844:	6039      	str	r1, [r7, #0]
 8005846:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005848:	79fb      	ldrb	r3, [r7, #7]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d105      	bne.n	800585a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800584e:	683a      	ldr	r2, [r7, #0]
 8005850:	4907      	ldr	r1, [pc, #28]	; (8005870 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005852:	4808      	ldr	r0, [pc, #32]	; (8005874 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005854:	f7ff fea1 	bl	800559a <USBD_GetString>
 8005858:	e004      	b.n	8005864 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800585a:	683a      	ldr	r2, [r7, #0]
 800585c:	4904      	ldr	r1, [pc, #16]	; (8005870 <USBD_FS_ConfigStrDescriptor+0x34>)
 800585e:	4805      	ldr	r0, [pc, #20]	; (8005874 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005860:	f7ff fe9b 	bl	800559a <USBD_GetString>
  }
  return USBD_StrDesc;
 8005864:	4b02      	ldr	r3, [pc, #8]	; (8005870 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005866:	4618      	mov	r0, r3
 8005868:	3708      	adds	r7, #8
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	20000470 	.word	0x20000470
 8005874:	08006024 	.word	0x08006024

08005878 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	4603      	mov	r3, r0
 8005880:	6039      	str	r1, [r7, #0]
 8005882:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005884:	79fb      	ldrb	r3, [r7, #7]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d105      	bne.n	8005896 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800588a:	683a      	ldr	r2, [r7, #0]
 800588c:	4907      	ldr	r1, [pc, #28]	; (80058ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800588e:	4808      	ldr	r0, [pc, #32]	; (80058b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005890:	f7ff fe83 	bl	800559a <USBD_GetString>
 8005894:	e004      	b.n	80058a0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005896:	683a      	ldr	r2, [r7, #0]
 8005898:	4904      	ldr	r1, [pc, #16]	; (80058ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800589a:	4805      	ldr	r0, [pc, #20]	; (80058b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800589c:	f7ff fe7d 	bl	800559a <USBD_GetString>
  }
  return USBD_StrDesc;
 80058a0:	4b02      	ldr	r3, [pc, #8]	; (80058ac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3708      	adds	r7, #8
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	20000470 	.word	0x20000470
 80058b0:	08006030 	.word	0x08006030

080058b4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80058ba:	4b0f      	ldr	r3, [pc, #60]	; (80058f8 <Get_SerialNum+0x44>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80058c0:	4b0e      	ldr	r3, [pc, #56]	; (80058fc <Get_SerialNum+0x48>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80058c6:	4b0e      	ldr	r3, [pc, #56]	; (8005900 <Get_SerialNum+0x4c>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4413      	add	r3, r2
 80058d2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d009      	beq.n	80058ee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80058da:	2208      	movs	r2, #8
 80058dc:	4909      	ldr	r1, [pc, #36]	; (8005904 <Get_SerialNum+0x50>)
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f000 f814 	bl	800590c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80058e4:	2204      	movs	r2, #4
 80058e6:	4908      	ldr	r1, [pc, #32]	; (8005908 <Get_SerialNum+0x54>)
 80058e8:	68b8      	ldr	r0, [r7, #8]
 80058ea:	f000 f80f 	bl	800590c <IntToUnicode>
  }
}
 80058ee:	bf00      	nop
 80058f0:	3710      	adds	r7, #16
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	1fff7a10 	.word	0x1fff7a10
 80058fc:	1fff7a14 	.word	0x1fff7a14
 8005900:	1fff7a18 	.word	0x1fff7a18
 8005904:	2000014a 	.word	0x2000014a
 8005908:	2000015a 	.word	0x2000015a

0800590c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800590c:	b480      	push	{r7}
 800590e:	b087      	sub	sp, #28
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	4613      	mov	r3, r2
 8005918:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800591a:	2300      	movs	r3, #0
 800591c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800591e:	2300      	movs	r3, #0
 8005920:	75fb      	strb	r3, [r7, #23]
 8005922:	e027      	b.n	8005974 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	0f1b      	lsrs	r3, r3, #28
 8005928:	2b09      	cmp	r3, #9
 800592a:	d80b      	bhi.n	8005944 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	0f1b      	lsrs	r3, r3, #28
 8005930:	b2da      	uxtb	r2, r3
 8005932:	7dfb      	ldrb	r3, [r7, #23]
 8005934:	005b      	lsls	r3, r3, #1
 8005936:	4619      	mov	r1, r3
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	440b      	add	r3, r1
 800593c:	3230      	adds	r2, #48	; 0x30
 800593e:	b2d2      	uxtb	r2, r2
 8005940:	701a      	strb	r2, [r3, #0]
 8005942:	e00a      	b.n	800595a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	0f1b      	lsrs	r3, r3, #28
 8005948:	b2da      	uxtb	r2, r3
 800594a:	7dfb      	ldrb	r3, [r7, #23]
 800594c:	005b      	lsls	r3, r3, #1
 800594e:	4619      	mov	r1, r3
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	440b      	add	r3, r1
 8005954:	3237      	adds	r2, #55	; 0x37
 8005956:	b2d2      	uxtb	r2, r2
 8005958:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	011b      	lsls	r3, r3, #4
 800595e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005960:	7dfb      	ldrb	r3, [r7, #23]
 8005962:	005b      	lsls	r3, r3, #1
 8005964:	3301      	adds	r3, #1
 8005966:	68ba      	ldr	r2, [r7, #8]
 8005968:	4413      	add	r3, r2
 800596a:	2200      	movs	r2, #0
 800596c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800596e:	7dfb      	ldrb	r3, [r7, #23]
 8005970:	3301      	adds	r3, #1
 8005972:	75fb      	strb	r3, [r7, #23]
 8005974:	7dfa      	ldrb	r2, [r7, #23]
 8005976:	79fb      	ldrb	r3, [r7, #7]
 8005978:	429a      	cmp	r2, r3
 800597a:	d3d3      	bcc.n	8005924 <IntToUnicode+0x18>
  }
}
 800597c:	bf00      	nop
 800597e:	bf00      	nop
 8005980:	371c      	adds	r7, #28
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
	...

0800598c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b08a      	sub	sp, #40	; 0x28
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005994:	f107 0314 	add.w	r3, r7, #20
 8005998:	2200      	movs	r2, #0
 800599a:	601a      	str	r2, [r3, #0]
 800599c:	605a      	str	r2, [r3, #4]
 800599e:	609a      	str	r2, [r3, #8]
 80059a0:	60da      	str	r2, [r3, #12]
 80059a2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059ac:	d13a      	bne.n	8005a24 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059ae:	2300      	movs	r3, #0
 80059b0:	613b      	str	r3, [r7, #16]
 80059b2:	4b1e      	ldr	r3, [pc, #120]	; (8005a2c <HAL_PCD_MspInit+0xa0>)
 80059b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b6:	4a1d      	ldr	r2, [pc, #116]	; (8005a2c <HAL_PCD_MspInit+0xa0>)
 80059b8:	f043 0301 	orr.w	r3, r3, #1
 80059bc:	6313      	str	r3, [r2, #48]	; 0x30
 80059be:	4b1b      	ldr	r3, [pc, #108]	; (8005a2c <HAL_PCD_MspInit+0xa0>)
 80059c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c2:	f003 0301 	and.w	r3, r3, #1
 80059c6:	613b      	str	r3, [r7, #16]
 80059c8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80059ca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80059ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059d0:	2302      	movs	r3, #2
 80059d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059d4:	2300      	movs	r3, #0
 80059d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059d8:	2303      	movs	r3, #3
 80059da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80059dc:	230a      	movs	r3, #10
 80059de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059e0:	f107 0314 	add.w	r3, r7, #20
 80059e4:	4619      	mov	r1, r3
 80059e6:	4812      	ldr	r0, [pc, #72]	; (8005a30 <HAL_PCD_MspInit+0xa4>)
 80059e8:	f7fb f892 	bl	8000b10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80059ec:	4b0f      	ldr	r3, [pc, #60]	; (8005a2c <HAL_PCD_MspInit+0xa0>)
 80059ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059f0:	4a0e      	ldr	r2, [pc, #56]	; (8005a2c <HAL_PCD_MspInit+0xa0>)
 80059f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059f6:	6353      	str	r3, [r2, #52]	; 0x34
 80059f8:	2300      	movs	r3, #0
 80059fa:	60fb      	str	r3, [r7, #12]
 80059fc:	4b0b      	ldr	r3, [pc, #44]	; (8005a2c <HAL_PCD_MspInit+0xa0>)
 80059fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a00:	4a0a      	ldr	r2, [pc, #40]	; (8005a2c <HAL_PCD_MspInit+0xa0>)
 8005a02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a06:	6453      	str	r3, [r2, #68]	; 0x44
 8005a08:	4b08      	ldr	r3, [pc, #32]	; (8005a2c <HAL_PCD_MspInit+0xa0>)
 8005a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a10:	60fb      	str	r3, [r7, #12]
 8005a12:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8005a14:	2200      	movs	r2, #0
 8005a16:	2100      	movs	r1, #0
 8005a18:	2043      	movs	r0, #67	; 0x43
 8005a1a:	f7fb f842 	bl	8000aa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005a1e:	2043      	movs	r0, #67	; 0x43
 8005a20:	f7fb f85b 	bl	8000ada <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005a24:	bf00      	nop
 8005a26:	3728      	adds	r7, #40	; 0x28
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	40023800 	.word	0x40023800
 8005a30:	40020000 	.word	0x40020000

08005a34 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005a48:	4619      	mov	r1, r3
 8005a4a:	4610      	mov	r0, r2
 8005a4c:	f7fe fdbe 	bl	80045cc <USBD_LL_SetupStage>
}
 8005a50:	bf00      	nop
 8005a52:	3708      	adds	r7, #8
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	460b      	mov	r3, r1
 8005a62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005a6a:	78fa      	ldrb	r2, [r7, #3]
 8005a6c:	6879      	ldr	r1, [r7, #4]
 8005a6e:	4613      	mov	r3, r2
 8005a70:	00db      	lsls	r3, r3, #3
 8005a72:	1a9b      	subs	r3, r3, r2
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	440b      	add	r3, r1
 8005a78:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	78fb      	ldrb	r3, [r7, #3]
 8005a80:	4619      	mov	r1, r3
 8005a82:	f7fe fdf8 	bl	8004676 <USBD_LL_DataOutStage>
}
 8005a86:	bf00      	nop
 8005a88:	3708      	adds	r7, #8
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}

08005a8e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b082      	sub	sp, #8
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
 8005a96:	460b      	mov	r3, r1
 8005a98:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005aa0:	78fa      	ldrb	r2, [r7, #3]
 8005aa2:	6879      	ldr	r1, [r7, #4]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	00db      	lsls	r3, r3, #3
 8005aa8:	1a9b      	subs	r3, r3, r2
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	440b      	add	r3, r1
 8005aae:	3348      	adds	r3, #72	; 0x48
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	78fb      	ldrb	r3, [r7, #3]
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	f7fe fe41 	bl	800473c <USBD_LL_DataInStage>
}
 8005aba:	bf00      	nop
 8005abc:	3708      	adds	r7, #8
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	b082      	sub	sp, #8
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f7fe ff55 	bl	8004980 <USBD_LL_SOF>
}
 8005ad6:	bf00      	nop
 8005ad8:	3708      	adds	r7, #8
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}

08005ade <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b084      	sub	sp, #16
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d102      	bne.n	8005af8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8005af2:	2300      	movs	r3, #0
 8005af4:	73fb      	strb	r3, [r7, #15]
 8005af6:	e008      	b.n	8005b0a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d102      	bne.n	8005b06 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8005b00:	2301      	movs	r3, #1
 8005b02:	73fb      	strb	r3, [r7, #15]
 8005b04:	e001      	b.n	8005b0a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8005b06:	f7fa fdb5 	bl	8000674 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005b10:	7bfa      	ldrb	r2, [r7, #15]
 8005b12:	4611      	mov	r1, r2
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7fe fef5 	bl	8004904 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005b20:	4618      	mov	r0, r3
 8005b22:	f7fe fea1 	bl	8004868 <USBD_LL_Reset>
}
 8005b26:	bf00      	nop
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
	...

08005b30 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f7fe fef0 	bl	8004924 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	6812      	ldr	r2, [r2, #0]
 8005b52:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005b56:	f043 0301 	orr.w	r3, r3, #1
 8005b5a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a1b      	ldr	r3, [r3, #32]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d005      	beq.n	8005b70 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005b64:	4b04      	ldr	r3, [pc, #16]	; (8005b78 <HAL_PCD_SuspendCallback+0x48>)
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	4a03      	ldr	r2, [pc, #12]	; (8005b78 <HAL_PCD_SuspendCallback+0x48>)
 8005b6a:	f043 0306 	orr.w	r3, r3, #6
 8005b6e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005b70:	bf00      	nop
 8005b72:	3708      	adds	r7, #8
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	e000ed00 	.word	0xe000ed00

08005b7c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7fe fee0 	bl	8004950 <USBD_LL_Resume>
}
 8005b90:	bf00      	nop
 8005b92:	3708      	adds	r7, #8
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005baa:	78fa      	ldrb	r2, [r7, #3]
 8005bac:	4611      	mov	r1, r2
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7fe ff2e 	bl	8004a10 <USBD_LL_IsoOUTIncomplete>
}
 8005bb4:	bf00      	nop
 8005bb6:	3708      	adds	r7, #8
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005bce:	78fa      	ldrb	r2, [r7, #3]
 8005bd0:	4611      	mov	r1, r2
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f7fe fef6 	bl	80049c4 <USBD_LL_IsoINIncomplete>
}
 8005bd8:	bf00      	nop
 8005bda:	3708      	adds	r7, #8
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7fe ff34 	bl	8004a5c <USBD_LL_DevConnected>
}
 8005bf4:	bf00      	nop
 8005bf6:	3708      	adds	r7, #8
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f7fe ff31 	bl	8004a72 <USBD_LL_DevDisconnected>
}
 8005c10:	bf00      	nop
 8005c12:	3708      	adds	r7, #8
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d13c      	bne.n	8005ca2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8005c28:	4a20      	ldr	r2, [pc, #128]	; (8005cac <USBD_LL_Init+0x94>)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a1e      	ldr	r2, [pc, #120]	; (8005cac <USBD_LL_Init+0x94>)
 8005c34:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005c38:	4b1c      	ldr	r3, [pc, #112]	; (8005cac <USBD_LL_Init+0x94>)
 8005c3a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005c3e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8005c40:	4b1a      	ldr	r3, [pc, #104]	; (8005cac <USBD_LL_Init+0x94>)
 8005c42:	2204      	movs	r2, #4
 8005c44:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8005c46:	4b19      	ldr	r3, [pc, #100]	; (8005cac <USBD_LL_Init+0x94>)
 8005c48:	2202      	movs	r2, #2
 8005c4a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005c4c:	4b17      	ldr	r3, [pc, #92]	; (8005cac <USBD_LL_Init+0x94>)
 8005c4e:	2200      	movs	r2, #0
 8005c50:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005c52:	4b16      	ldr	r3, [pc, #88]	; (8005cac <USBD_LL_Init+0x94>)
 8005c54:	2202      	movs	r2, #2
 8005c56:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8005c58:	4b14      	ldr	r3, [pc, #80]	; (8005cac <USBD_LL_Init+0x94>)
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8005c5e:	4b13      	ldr	r3, [pc, #76]	; (8005cac <USBD_LL_Init+0x94>)
 8005c60:	2200      	movs	r2, #0
 8005c62:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8005c64:	4b11      	ldr	r3, [pc, #68]	; (8005cac <USBD_LL_Init+0x94>)
 8005c66:	2200      	movs	r2, #0
 8005c68:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8005c6a:	4b10      	ldr	r3, [pc, #64]	; (8005cac <USBD_LL_Init+0x94>)
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8005c70:	4b0e      	ldr	r3, [pc, #56]	; (8005cac <USBD_LL_Init+0x94>)
 8005c72:	2200      	movs	r2, #0
 8005c74:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8005c76:	480d      	ldr	r0, [pc, #52]	; (8005cac <USBD_LL_Init+0x94>)
 8005c78:	f7fb f8fe 	bl	8000e78 <HAL_PCD_Init>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d001      	beq.n	8005c86 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8005c82:	f7fa fcf7 	bl	8000674 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8005c86:	2180      	movs	r1, #128	; 0x80
 8005c88:	4808      	ldr	r0, [pc, #32]	; (8005cac <USBD_LL_Init+0x94>)
 8005c8a:	f7fc fa44 	bl	8002116 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8005c8e:	2240      	movs	r2, #64	; 0x40
 8005c90:	2100      	movs	r1, #0
 8005c92:	4806      	ldr	r0, [pc, #24]	; (8005cac <USBD_LL_Init+0x94>)
 8005c94:	f7fc f9f8 	bl	8002088 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8005c98:	2280      	movs	r2, #128	; 0x80
 8005c9a:	2101      	movs	r1, #1
 8005c9c:	4803      	ldr	r0, [pc, #12]	; (8005cac <USBD_LL_Init+0x94>)
 8005c9e:	f7fc f9f3 	bl	8002088 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3708      	adds	r7, #8
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	20000670 	.word	0x20000670

08005cb0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7fb f9f3 	bl	80010b2 <HAL_PCD_Start>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005cd0:	7bfb      	ldrb	r3, [r7, #15]
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f000 f930 	bl	8005f38 <USBD_Get_USB_Status>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005cdc:	7bbb      	ldrb	r3, [r7, #14]
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b084      	sub	sp, #16
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
 8005cee:	4608      	mov	r0, r1
 8005cf0:	4611      	mov	r1, r2
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	70fb      	strb	r3, [r7, #3]
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	70bb      	strb	r3, [r7, #2]
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005d00:	2300      	movs	r3, #0
 8005d02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005d04:	2300      	movs	r3, #0
 8005d06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8005d0e:	78bb      	ldrb	r3, [r7, #2]
 8005d10:	883a      	ldrh	r2, [r7, #0]
 8005d12:	78f9      	ldrb	r1, [r7, #3]
 8005d14:	f7fb fdd7 	bl	80018c6 <HAL_PCD_EP_Open>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005d1c:	7bfb      	ldrb	r3, [r7, #15]
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f000 f90a 	bl	8005f38 <USBD_Get_USB_Status>
 8005d24:	4603      	mov	r3, r0
 8005d26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005d28:	7bbb      	ldrb	r3, [r7, #14]
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b084      	sub	sp, #16
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005d42:	2300      	movs	r3, #0
 8005d44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005d4c:	78fa      	ldrb	r2, [r7, #3]
 8005d4e:	4611      	mov	r1, r2
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7fb fe20 	bl	8001996 <HAL_PCD_EP_Close>
 8005d56:	4603      	mov	r3, r0
 8005d58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005d5a:	7bfb      	ldrb	r3, [r7, #15]
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f000 f8eb 	bl	8005f38 <USBD_Get_USB_Status>
 8005d62:	4603      	mov	r3, r0
 8005d64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005d66:	7bbb      	ldrb	r3, [r7, #14]
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3710      	adds	r7, #16
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	460b      	mov	r3, r1
 8005d7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005d80:	2300      	movs	r3, #0
 8005d82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005d8a:	78fa      	ldrb	r2, [r7, #3]
 8005d8c:	4611      	mov	r1, r2
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7fb fee0 	bl	8001b54 <HAL_PCD_EP_SetStall>
 8005d94:	4603      	mov	r3, r0
 8005d96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005d98:	7bfb      	ldrb	r3, [r7, #15]
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f000 f8cc 	bl	8005f38 <USBD_Get_USB_Status>
 8005da0:	4603      	mov	r3, r0
 8005da2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005da4:	7bbb      	ldrb	r3, [r7, #14]
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3710      	adds	r7, #16
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b084      	sub	sp, #16
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
 8005db6:	460b      	mov	r3, r1
 8005db8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005dc8:	78fa      	ldrb	r2, [r7, #3]
 8005dca:	4611      	mov	r1, r2
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f7fb ff25 	bl	8001c1c <HAL_PCD_EP_ClrStall>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005dd6:	7bfb      	ldrb	r3, [r7, #15]
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f000 f8ad 	bl	8005f38 <USBD_Get_USB_Status>
 8005dde:	4603      	mov	r3, r0
 8005de0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005de2:	7bbb      	ldrb	r3, [r7, #14]
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3710      	adds	r7, #16
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	460b      	mov	r3, r1
 8005df6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005dfe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8005e00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	da0b      	bge.n	8005e20 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8005e08:	78fb      	ldrb	r3, [r7, #3]
 8005e0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e0e:	68f9      	ldr	r1, [r7, #12]
 8005e10:	4613      	mov	r3, r2
 8005e12:	00db      	lsls	r3, r3, #3
 8005e14:	1a9b      	subs	r3, r3, r2
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	440b      	add	r3, r1
 8005e1a:	333e      	adds	r3, #62	; 0x3e
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	e00b      	b.n	8005e38 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8005e20:	78fb      	ldrb	r3, [r7, #3]
 8005e22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e26:	68f9      	ldr	r1, [r7, #12]
 8005e28:	4613      	mov	r3, r2
 8005e2a:	00db      	lsls	r3, r3, #3
 8005e2c:	1a9b      	subs	r3, r3, r2
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	440b      	add	r3, r1
 8005e32:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005e36:	781b      	ldrb	r3, [r3, #0]
  }
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3714      	adds	r7, #20
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005e50:	2300      	movs	r3, #0
 8005e52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005e54:	2300      	movs	r3, #0
 8005e56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005e5e:	78fa      	ldrb	r2, [r7, #3]
 8005e60:	4611      	mov	r1, r2
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7fb fd0a 	bl	800187c <HAL_PCD_SetAddress>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005e6c:	7bfb      	ldrb	r3, [r7, #15]
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f000 f862 	bl	8005f38 <USBD_Get_USB_Status>
 8005e74:	4603      	mov	r3, r0
 8005e76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005e78:	7bbb      	ldrb	r3, [r7, #14]
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3710      	adds	r7, #16
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}

08005e82 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b086      	sub	sp, #24
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	60f8      	str	r0, [r7, #12]
 8005e8a:	607a      	str	r2, [r7, #4]
 8005e8c:	603b      	str	r3, [r7, #0]
 8005e8e:	460b      	mov	r3, r1
 8005e90:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005e92:	2300      	movs	r3, #0
 8005e94:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005e96:	2300      	movs	r3, #0
 8005e98:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8005ea0:	7af9      	ldrb	r1, [r7, #11]
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	f7fb fe0b 	bl	8001ac0 <HAL_PCD_EP_Transmit>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005eae:	7dfb      	ldrb	r3, [r7, #23]
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f000 f841 	bl	8005f38 <USBD_Get_USB_Status>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8005eba:	7dbb      	ldrb	r3, [r7, #22]
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3718      	adds	r7, #24
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b086      	sub	sp, #24
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	607a      	str	r2, [r7, #4]
 8005ece:	603b      	str	r3, [r7, #0]
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8005ee2:	7af9      	ldrb	r1, [r7, #11]
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	f7fb fd9f 	bl	8001a2a <HAL_PCD_EP_Receive>
 8005eec:	4603      	mov	r3, r0
 8005eee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005ef0:	7dfb      	ldrb	r3, [r7, #23]
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f000 f820 	bl	8005f38 <USBD_Get_USB_Status>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8005efc:	7dbb      	ldrb	r3, [r7, #22]
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3718      	adds	r7, #24
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
	...

08005f08 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8005f10:	4b03      	ldr	r3, [pc, #12]	; (8005f20 <USBD_static_malloc+0x18>)
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	370c      	adds	r7, #12
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	20000188 	.word	0x20000188

08005f24 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]

}
 8005f2c:	bf00      	nop
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	4603      	mov	r3, r0
 8005f40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005f42:	2300      	movs	r3, #0
 8005f44:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8005f46:	79fb      	ldrb	r3, [r7, #7]
 8005f48:	2b03      	cmp	r3, #3
 8005f4a:	d817      	bhi.n	8005f7c <USBD_Get_USB_Status+0x44>
 8005f4c:	a201      	add	r2, pc, #4	; (adr r2, 8005f54 <USBD_Get_USB_Status+0x1c>)
 8005f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f52:	bf00      	nop
 8005f54:	08005f65 	.word	0x08005f65
 8005f58:	08005f6b 	.word	0x08005f6b
 8005f5c:	08005f71 	.word	0x08005f71
 8005f60:	08005f77 	.word	0x08005f77
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8005f64:	2300      	movs	r3, #0
 8005f66:	73fb      	strb	r3, [r7, #15]
    break;
 8005f68:	e00b      	b.n	8005f82 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	73fb      	strb	r3, [r7, #15]
    break;
 8005f6e:	e008      	b.n	8005f82 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005f70:	2301      	movs	r3, #1
 8005f72:	73fb      	strb	r3, [r7, #15]
    break;
 8005f74:	e005      	b.n	8005f82 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8005f76:	2303      	movs	r3, #3
 8005f78:	73fb      	strb	r3, [r7, #15]
    break;
 8005f7a:	e002      	b.n	8005f82 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	73fb      	strb	r3, [r7, #15]
    break;
 8005f80:	bf00      	nop
  }
  return usb_status;
 8005f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3714      	adds	r7, #20
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <__libc_init_array>:
 8005f90:	b570      	push	{r4, r5, r6, lr}
 8005f92:	4d0d      	ldr	r5, [pc, #52]	; (8005fc8 <__libc_init_array+0x38>)
 8005f94:	4c0d      	ldr	r4, [pc, #52]	; (8005fcc <__libc_init_array+0x3c>)
 8005f96:	1b64      	subs	r4, r4, r5
 8005f98:	10a4      	asrs	r4, r4, #2
 8005f9a:	2600      	movs	r6, #0
 8005f9c:	42a6      	cmp	r6, r4
 8005f9e:	d109      	bne.n	8005fb4 <__libc_init_array+0x24>
 8005fa0:	4d0b      	ldr	r5, [pc, #44]	; (8005fd0 <__libc_init_array+0x40>)
 8005fa2:	4c0c      	ldr	r4, [pc, #48]	; (8005fd4 <__libc_init_array+0x44>)
 8005fa4:	f000 f820 	bl	8005fe8 <_init>
 8005fa8:	1b64      	subs	r4, r4, r5
 8005faa:	10a4      	asrs	r4, r4, #2
 8005fac:	2600      	movs	r6, #0
 8005fae:	42a6      	cmp	r6, r4
 8005fb0:	d105      	bne.n	8005fbe <__libc_init_array+0x2e>
 8005fb2:	bd70      	pop	{r4, r5, r6, pc}
 8005fb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fb8:	4798      	blx	r3
 8005fba:	3601      	adds	r6, #1
 8005fbc:	e7ee      	b.n	8005f9c <__libc_init_array+0xc>
 8005fbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fc2:	4798      	blx	r3
 8005fc4:	3601      	adds	r6, #1
 8005fc6:	e7f2      	b.n	8005fae <__libc_init_array+0x1e>
 8005fc8:	08006058 	.word	0x08006058
 8005fcc:	08006058 	.word	0x08006058
 8005fd0:	08006058 	.word	0x08006058
 8005fd4:	0800605c 	.word	0x0800605c

08005fd8 <memset>:
 8005fd8:	4402      	add	r2, r0
 8005fda:	4603      	mov	r3, r0
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d100      	bne.n	8005fe2 <memset+0xa>
 8005fe0:	4770      	bx	lr
 8005fe2:	f803 1b01 	strb.w	r1, [r3], #1
 8005fe6:	e7f9      	b.n	8005fdc <memset+0x4>

08005fe8 <_init>:
 8005fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fea:	bf00      	nop
 8005fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fee:	bc08      	pop	{r3}
 8005ff0:	469e      	mov	lr, r3
 8005ff2:	4770      	bx	lr

08005ff4 <_fini>:
 8005ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ff6:	bf00      	nop
 8005ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ffa:	bc08      	pop	{r3}
 8005ffc:	469e      	mov	lr, r3
 8005ffe:	4770      	bx	lr
