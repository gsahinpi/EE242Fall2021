
inclaslibusb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006304  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800648c  0800648c  0001648c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064f4  080064f4  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  080064f4  080064f4  000164f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064fc  080064fc  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064fc  080064fc  000164fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006500  08006500  00016500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08006504  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020184  2**0
                  CONTENTS
 10 .bss          00001b5c  20000184  20000184  00020184  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001ce0  20001ce0  00020184  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012834  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d38  00000000  00000000  000329e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b00  00000000  00000000  00035720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009c8  00000000  00000000  00036220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022bd1  00000000  00000000  00036be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eb4a  00000000  00000000  000597b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3db7  00000000  00000000  00068303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012c0ba  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002b8c  00000000  00000000  0012c110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000184 	.word	0x20000184
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006474 	.word	0x08006474

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000188 	.word	0x20000188
 80001c4:	08006474 	.word	0x08006474

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b598      	push	{r3, r4, r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 f946 	bl	8000764 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f814 	bl	8000504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f87c 	bl	80005d8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004e0:	f005 fa5e 	bl	80059a0 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  CDC_Transmit_FS(data, strlen(data));
 80004e4:	4b06      	ldr	r3, [pc, #24]	; (8000500 <main+0x30>)
 80004e6:	681c      	ldr	r4, [r3, #0]
 80004e8:	4b05      	ldr	r3, [pc, #20]	; (8000500 <main+0x30>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4618      	mov	r0, r3
 80004ee:	f7ff fe6b 	bl	80001c8 <strlen>
 80004f2:	4603      	mov	r3, r0
 80004f4:	b29b      	uxth	r3, r3
 80004f6:	4619      	mov	r1, r3
 80004f8:	4620      	mov	r0, r4
 80004fa:	f005 fb25 	bl	8005b48 <CDC_Transmit_FS>
 80004fe:	e7f1      	b.n	80004e4 <main+0x14>
 8000500:	20000000 	.word	0x20000000

08000504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b094      	sub	sp, #80	; 0x50
 8000508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050a:	f107 0320 	add.w	r3, r7, #32
 800050e:	2230      	movs	r2, #48	; 0x30
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f005 ffa6 	bl	8006464 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000518:	f107 030c 	add.w	r3, r7, #12
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
 8000522:	609a      	str	r2, [r3, #8]
 8000524:	60da      	str	r2, [r3, #12]
 8000526:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000528:	2300      	movs	r3, #0
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	4b28      	ldr	r3, [pc, #160]	; (80005d0 <SystemClock_Config+0xcc>)
 800052e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000530:	4a27      	ldr	r2, [pc, #156]	; (80005d0 <SystemClock_Config+0xcc>)
 8000532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000536:	6413      	str	r3, [r2, #64]	; 0x40
 8000538:	4b25      	ldr	r3, [pc, #148]	; (80005d0 <SystemClock_Config+0xcc>)
 800053a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800053c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000540:	60bb      	str	r3, [r7, #8]
 8000542:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000544:	2300      	movs	r3, #0
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	4b22      	ldr	r3, [pc, #136]	; (80005d4 <SystemClock_Config+0xd0>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a21      	ldr	r2, [pc, #132]	; (80005d4 <SystemClock_Config+0xd0>)
 800054e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000552:	6013      	str	r3, [r2, #0]
 8000554:	4b1f      	ldr	r3, [pc, #124]	; (80005d4 <SystemClock_Config+0xd0>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000560:	2301      	movs	r3, #1
 8000562:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000564:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000568:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056a:	2302      	movs	r3, #2
 800056c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800056e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000572:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000574:	2304      	movs	r3, #4
 8000576:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000578:	23a8      	movs	r3, #168	; 0xa8
 800057a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800057c:	2302      	movs	r3, #2
 800057e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000580:	2307      	movs	r3, #7
 8000582:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000584:	f107 0320 	add.w	r3, r7, #32
 8000588:	4618      	mov	r0, r3
 800058a:	f001 fdb3 	bl	80020f4 <HAL_RCC_OscConfig>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000594:	f000 f848 	bl	8000628 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000598:	230f      	movs	r3, #15
 800059a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059c:	2302      	movs	r3, #2
 800059e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005a4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005b0:	f107 030c 	add.w	r3, r7, #12
 80005b4:	2105      	movs	r1, #5
 80005b6:	4618      	mov	r0, r3
 80005b8:	f002 f814 	bl	80025e4 <HAL_RCC_ClockConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005c2:	f000 f831 	bl	8000628 <Error_Handler>
  }
}
 80005c6:	bf00      	nop
 80005c8:	3750      	adds	r7, #80	; 0x50
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40023800 	.word	0x40023800
 80005d4:	40007000 	.word	0x40007000

080005d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	4b10      	ldr	r3, [pc, #64]	; (8000624 <MX_GPIO_Init+0x4c>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4a0f      	ldr	r2, [pc, #60]	; (8000624 <MX_GPIO_Init+0x4c>)
 80005e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
 80005ee:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <MX_GPIO_Init+0x4c>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	603b      	str	r3, [r7, #0]
 80005fe:	4b09      	ldr	r3, [pc, #36]	; (8000624 <MX_GPIO_Init+0x4c>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a08      	ldr	r2, [pc, #32]	; (8000624 <MX_GPIO_Init+0x4c>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b06      	ldr	r3, [pc, #24]	; (8000624 <MX_GPIO_Init+0x4c>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	603b      	str	r3, [r7, #0]
 8000614:	683b      	ldr	r3, [r7, #0]

}
 8000616:	bf00      	nop
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	40023800 	.word	0x40023800

08000628 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800062c:	b672      	cpsid	i
}
 800062e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000630:	e7fe      	b.n	8000630 <Error_Handler+0x8>
	...

08000634 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	4b10      	ldr	r3, [pc, #64]	; (8000680 <HAL_MspInit+0x4c>)
 8000640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000642:	4a0f      	ldr	r2, [pc, #60]	; (8000680 <HAL_MspInit+0x4c>)
 8000644:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000648:	6453      	str	r3, [r2, #68]	; 0x44
 800064a:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <HAL_MspInit+0x4c>)
 800064c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800064e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	603b      	str	r3, [r7, #0]
 800065a:	4b09      	ldr	r3, [pc, #36]	; (8000680 <HAL_MspInit+0x4c>)
 800065c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065e:	4a08      	ldr	r2, [pc, #32]	; (8000680 <HAL_MspInit+0x4c>)
 8000660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000664:	6413      	str	r3, [r2, #64]	; 0x40
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <HAL_MspInit+0x4c>)
 8000668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066e:	603b      	str	r3, [r7, #0]
 8000670:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000672:	bf00      	nop
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	40023800 	.word	0x40023800

08000684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000688:	e7fe      	b.n	8000688 <NMI_Handler+0x4>

0800068a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800068a:	b480      	push	{r7}
 800068c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800068e:	e7fe      	b.n	800068e <HardFault_Handler+0x4>

08000690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000694:	e7fe      	b.n	8000694 <MemManage_Handler+0x4>

08000696 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000696:	b480      	push	{r7}
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800069a:	e7fe      	b.n	800069a <BusFault_Handler+0x4>

0800069c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006a0:	e7fe      	b.n	80006a0 <UsageFault_Handler+0x4>

080006a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006a2:	b480      	push	{r7}
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006a6:	bf00      	nop
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr

080006be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006c2:	bf00      	nop
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006d0:	f000 f89a 	bl	8000808 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80006dc:	4802      	ldr	r0, [pc, #8]	; (80006e8 <OTG_FS_IRQHandler+0x10>)
 80006de:	f000 fcd5 	bl	800108c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	200018d8 	.word	0x200018d8

080006ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <SystemInit+0x20>)
 80006f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006f6:	4a05      	ldr	r2, [pc, #20]	; (800070c <SystemInit+0x20>)
 80006f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000710:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000748 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000714:	480d      	ldr	r0, [pc, #52]	; (800074c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000716:	490e      	ldr	r1, [pc, #56]	; (8000750 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000718:	4a0e      	ldr	r2, [pc, #56]	; (8000754 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800071a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800071c:	e002      	b.n	8000724 <LoopCopyDataInit>

0800071e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800071e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000722:	3304      	adds	r3, #4

08000724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000728:	d3f9      	bcc.n	800071e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800072a:	4a0b      	ldr	r2, [pc, #44]	; (8000758 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800072c:	4c0b      	ldr	r4, [pc, #44]	; (800075c <LoopFillZerobss+0x26>)
  movs r3, #0
 800072e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000730:	e001      	b.n	8000736 <LoopFillZerobss>

08000732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000734:	3204      	adds	r2, #4

08000736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000738:	d3fb      	bcc.n	8000732 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800073a:	f7ff ffd7 	bl	80006ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800073e:	f005 fe5f 	bl	8006400 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000742:	f7ff fec5 	bl	80004d0 <main>
  bx  lr    
 8000746:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000748:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800074c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000750:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8000754:	08006504 	.word	0x08006504
  ldr r2, =_sbss
 8000758:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 800075c:	20001ce0 	.word	0x20001ce0

08000760 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000760:	e7fe      	b.n	8000760 <ADC_IRQHandler>
	...

08000764 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000768:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <HAL_Init+0x40>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a0d      	ldr	r2, [pc, #52]	; (80007a4 <HAL_Init+0x40>)
 800076e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000772:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000774:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <HAL_Init+0x40>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a0a      	ldr	r2, [pc, #40]	; (80007a4 <HAL_Init+0x40>)
 800077a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800077e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000780:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <HAL_Init+0x40>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a07      	ldr	r2, [pc, #28]	; (80007a4 <HAL_Init+0x40>)
 8000786:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800078a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800078c:	2003      	movs	r0, #3
 800078e:	f000 f94f 	bl	8000a30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000792:	200f      	movs	r0, #15
 8000794:	f000 f808 	bl	80007a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000798:	f7ff ff4c 	bl	8000634 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800079c:	2300      	movs	r3, #0
}
 800079e:	4618      	mov	r0, r3
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40023c00 	.word	0x40023c00

080007a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <HAL_InitTick+0x54>)
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <HAL_InitTick+0x58>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	4619      	mov	r1, r3
 80007ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007be:	fbb3 f3f1 	udiv	r3, r3, r1
 80007c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 f967 	bl	8000a9a <HAL_SYSTICK_Config>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007d2:	2301      	movs	r3, #1
 80007d4:	e00e      	b.n	80007f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2b0f      	cmp	r3, #15
 80007da:	d80a      	bhi.n	80007f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007dc:	2200      	movs	r2, #0
 80007de:	6879      	ldr	r1, [r7, #4]
 80007e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007e4:	f000 f92f 	bl	8000a46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007e8:	4a06      	ldr	r2, [pc, #24]	; (8000804 <HAL_InitTick+0x5c>)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007ee:	2300      	movs	r3, #0
 80007f0:	e000      	b.n	80007f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007f2:	2301      	movs	r3, #1
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000004 	.word	0x20000004
 8000800:	2000000c 	.word	0x2000000c
 8000804:	20000008 	.word	0x20000008

08000808 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <HAL_IncTick+0x20>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	461a      	mov	r2, r3
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <HAL_IncTick+0x24>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4413      	add	r3, r2
 8000818:	4a04      	ldr	r2, [pc, #16]	; (800082c <HAL_IncTick+0x24>)
 800081a:	6013      	str	r3, [r2, #0]
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	2000000c 	.word	0x2000000c
 800082c:	20000404 	.word	0x20000404

08000830 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  return uwTick;
 8000834:	4b03      	ldr	r3, [pc, #12]	; (8000844 <HAL_GetTick+0x14>)
 8000836:	681b      	ldr	r3, [r3, #0]
}
 8000838:	4618      	mov	r0, r3
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	20000404 	.word	0x20000404

08000848 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000850:	f7ff ffee 	bl	8000830 <HAL_GetTick>
 8000854:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000860:	d005      	beq.n	800086e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000862:	4b0a      	ldr	r3, [pc, #40]	; (800088c <HAL_Delay+0x44>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	461a      	mov	r2, r3
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	4413      	add	r3, r2
 800086c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800086e:	bf00      	nop
 8000870:	f7ff ffde 	bl	8000830 <HAL_GetTick>
 8000874:	4602      	mov	r2, r0
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	68fa      	ldr	r2, [r7, #12]
 800087c:	429a      	cmp	r2, r3
 800087e:	d8f7      	bhi.n	8000870 <HAL_Delay+0x28>
  {
  }
}
 8000880:	bf00      	nop
 8000882:	bf00      	nop
 8000884:	3710      	adds	r7, #16
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	2000000c 	.word	0x2000000c

08000890 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f003 0307 	and.w	r3, r3, #7
 800089e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008a0:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <__NVIC_SetPriorityGrouping+0x44>)
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008a6:	68ba      	ldr	r2, [r7, #8]
 80008a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008ac:	4013      	ands	r3, r2
 80008ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008c2:	4a04      	ldr	r2, [pc, #16]	; (80008d4 <__NVIC_SetPriorityGrouping+0x44>)
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	60d3      	str	r3, [r2, #12]
}
 80008c8:	bf00      	nop
 80008ca:	3714      	adds	r7, #20
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr
 80008d4:	e000ed00 	.word	0xe000ed00

080008d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008dc:	4b04      	ldr	r3, [pc, #16]	; (80008f0 <__NVIC_GetPriorityGrouping+0x18>)
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	0a1b      	lsrs	r3, r3, #8
 80008e2:	f003 0307 	and.w	r3, r3, #7
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr
 80008f0:	e000ed00 	.word	0xe000ed00

080008f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000902:	2b00      	cmp	r3, #0
 8000904:	db0b      	blt.n	800091e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	f003 021f 	and.w	r2, r3, #31
 800090c:	4907      	ldr	r1, [pc, #28]	; (800092c <__NVIC_EnableIRQ+0x38>)
 800090e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000912:	095b      	lsrs	r3, r3, #5
 8000914:	2001      	movs	r0, #1
 8000916:	fa00 f202 	lsl.w	r2, r0, r2
 800091a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800091e:	bf00      	nop
 8000920:	370c      	adds	r7, #12
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	e000e100 	.word	0xe000e100

08000930 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	6039      	str	r1, [r7, #0]
 800093a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800093c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000940:	2b00      	cmp	r3, #0
 8000942:	db0a      	blt.n	800095a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	b2da      	uxtb	r2, r3
 8000948:	490c      	ldr	r1, [pc, #48]	; (800097c <__NVIC_SetPriority+0x4c>)
 800094a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094e:	0112      	lsls	r2, r2, #4
 8000950:	b2d2      	uxtb	r2, r2
 8000952:	440b      	add	r3, r1
 8000954:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000958:	e00a      	b.n	8000970 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	b2da      	uxtb	r2, r3
 800095e:	4908      	ldr	r1, [pc, #32]	; (8000980 <__NVIC_SetPriority+0x50>)
 8000960:	79fb      	ldrb	r3, [r7, #7]
 8000962:	f003 030f 	and.w	r3, r3, #15
 8000966:	3b04      	subs	r3, #4
 8000968:	0112      	lsls	r2, r2, #4
 800096a:	b2d2      	uxtb	r2, r2
 800096c:	440b      	add	r3, r1
 800096e:	761a      	strb	r2, [r3, #24]
}
 8000970:	bf00      	nop
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr
 800097c:	e000e100 	.word	0xe000e100
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000984:	b480      	push	{r7}
 8000986:	b089      	sub	sp, #36	; 0x24
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	f003 0307 	and.w	r3, r3, #7
 8000996:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000998:	69fb      	ldr	r3, [r7, #28]
 800099a:	f1c3 0307 	rsb	r3, r3, #7
 800099e:	2b04      	cmp	r3, #4
 80009a0:	bf28      	it	cs
 80009a2:	2304      	movcs	r3, #4
 80009a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	3304      	adds	r3, #4
 80009aa:	2b06      	cmp	r3, #6
 80009ac:	d902      	bls.n	80009b4 <NVIC_EncodePriority+0x30>
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	3b03      	subs	r3, #3
 80009b2:	e000      	b.n	80009b6 <NVIC_EncodePriority+0x32>
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	43da      	mvns	r2, r3
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	401a      	ands	r2, r3
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	fa01 f303 	lsl.w	r3, r1, r3
 80009d6:	43d9      	mvns	r1, r3
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009dc:	4313      	orrs	r3, r2
         );
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3724      	adds	r7, #36	; 0x24
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
	...

080009ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3b01      	subs	r3, #1
 80009f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009fc:	d301      	bcc.n	8000a02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009fe:	2301      	movs	r3, #1
 8000a00:	e00f      	b.n	8000a22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a02:	4a0a      	ldr	r2, [pc, #40]	; (8000a2c <SysTick_Config+0x40>)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	3b01      	subs	r3, #1
 8000a08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a0a:	210f      	movs	r1, #15
 8000a0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a10:	f7ff ff8e 	bl	8000930 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <SysTick_Config+0x40>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a1a:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <SysTick_Config+0x40>)
 8000a1c:	2207      	movs	r2, #7
 8000a1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a20:	2300      	movs	r3, #0
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	e000e010 	.word	0xe000e010

08000a30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	f7ff ff29 	bl	8000890 <__NVIC_SetPriorityGrouping>
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b086      	sub	sp, #24
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	60b9      	str	r1, [r7, #8]
 8000a50:	607a      	str	r2, [r7, #4]
 8000a52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a58:	f7ff ff3e 	bl	80008d8 <__NVIC_GetPriorityGrouping>
 8000a5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a5e:	687a      	ldr	r2, [r7, #4]
 8000a60:	68b9      	ldr	r1, [r7, #8]
 8000a62:	6978      	ldr	r0, [r7, #20]
 8000a64:	f7ff ff8e 	bl	8000984 <NVIC_EncodePriority>
 8000a68:	4602      	mov	r2, r0
 8000a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a6e:	4611      	mov	r1, r2
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff ff5d 	bl	8000930 <__NVIC_SetPriority>
}
 8000a76:	bf00      	nop
 8000a78:	3718      	adds	r7, #24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b082      	sub	sp, #8
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	4603      	mov	r3, r0
 8000a86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff ff31 	bl	80008f4 <__NVIC_EnableIRQ>
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b082      	sub	sp, #8
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f7ff ffa2 	bl	80009ec <SysTick_Config>
 8000aa8:	4603      	mov	r3, r0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
	...

08000ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b089      	sub	sp, #36	; 0x24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
 8000ace:	e16b      	b.n	8000da8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	697a      	ldr	r2, [r7, #20]
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ae4:	693a      	ldr	r2, [r7, #16]
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	f040 815a 	bne.w	8000da2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	f003 0303 	and.w	r3, r3, #3
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d005      	beq.n	8000b06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b02:	2b02      	cmp	r3, #2
 8000b04:	d130      	bne.n	8000b68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	689b      	ldr	r3, [r3, #8]
 8000b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b0c:	69fb      	ldr	r3, [r7, #28]
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	2203      	movs	r2, #3
 8000b12:	fa02 f303 	lsl.w	r3, r2, r3
 8000b16:	43db      	mvns	r3, r3
 8000b18:	69ba      	ldr	r2, [r7, #24]
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	68da      	ldr	r2, [r3, #12]
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2a:	69ba      	ldr	r2, [r7, #24]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	69ba      	ldr	r2, [r7, #24]
 8000b34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	fa02 f303 	lsl.w	r3, r2, r3
 8000b44:	43db      	mvns	r3, r3
 8000b46:	69ba      	ldr	r2, [r7, #24]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	091b      	lsrs	r3, r3, #4
 8000b52:	f003 0201 	and.w	r2, r3, #1
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5c:	69ba      	ldr	r2, [r7, #24]
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	69ba      	ldr	r2, [r7, #24]
 8000b66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	f003 0303 	and.w	r3, r3, #3
 8000b70:	2b03      	cmp	r3, #3
 8000b72:	d017      	beq.n	8000ba4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	2203      	movs	r2, #3
 8000b80:	fa02 f303 	lsl.w	r3, r2, r3
 8000b84:	43db      	mvns	r3, r3
 8000b86:	69ba      	ldr	r2, [r7, #24]
 8000b88:	4013      	ands	r3, r2
 8000b8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	689a      	ldr	r2, [r3, #8]
 8000b90:	69fb      	ldr	r3, [r7, #28]
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	fa02 f303 	lsl.w	r3, r2, r3
 8000b98:	69ba      	ldr	r2, [r7, #24]
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	69ba      	ldr	r2, [r7, #24]
 8000ba2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	f003 0303 	and.w	r3, r3, #3
 8000bac:	2b02      	cmp	r3, #2
 8000bae:	d123      	bne.n	8000bf8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bb0:	69fb      	ldr	r3, [r7, #28]
 8000bb2:	08da      	lsrs	r2, r3, #3
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3208      	adds	r2, #8
 8000bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	f003 0307 	and.w	r3, r3, #7
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	220f      	movs	r2, #15
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	69ba      	ldr	r2, [r7, #24]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	691a      	ldr	r2, [r3, #16]
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	f003 0307 	and.w	r3, r3, #7
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	fa02 f303 	lsl.w	r3, r2, r3
 8000be4:	69ba      	ldr	r2, [r7, #24]
 8000be6:	4313      	orrs	r3, r2
 8000be8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	08da      	lsrs	r2, r3, #3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	3208      	adds	r2, #8
 8000bf2:	69b9      	ldr	r1, [r7, #24]
 8000bf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	2203      	movs	r2, #3
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	69ba      	ldr	r2, [r7, #24]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f003 0203 	and.w	r2, r3, #3
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	69ba      	ldr	r2, [r7, #24]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	69ba      	ldr	r2, [r7, #24]
 8000c2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	f000 80b4 	beq.w	8000da2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	4b60      	ldr	r3, [pc, #384]	; (8000dc0 <HAL_GPIO_Init+0x30c>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c42:	4a5f      	ldr	r2, [pc, #380]	; (8000dc0 <HAL_GPIO_Init+0x30c>)
 8000c44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c48:	6453      	str	r3, [r2, #68]	; 0x44
 8000c4a:	4b5d      	ldr	r3, [pc, #372]	; (8000dc0 <HAL_GPIO_Init+0x30c>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c56:	4a5b      	ldr	r2, [pc, #364]	; (8000dc4 <HAL_GPIO_Init+0x310>)
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	089b      	lsrs	r3, r3, #2
 8000c5c:	3302      	adds	r3, #2
 8000c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	f003 0303 	and.w	r3, r3, #3
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	220f      	movs	r2, #15
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	43db      	mvns	r3, r3
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	4013      	ands	r3, r2
 8000c78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4a52      	ldr	r2, [pc, #328]	; (8000dc8 <HAL_GPIO_Init+0x314>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d02b      	beq.n	8000cda <HAL_GPIO_Init+0x226>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4a51      	ldr	r2, [pc, #324]	; (8000dcc <HAL_GPIO_Init+0x318>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d025      	beq.n	8000cd6 <HAL_GPIO_Init+0x222>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4a50      	ldr	r2, [pc, #320]	; (8000dd0 <HAL_GPIO_Init+0x31c>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d01f      	beq.n	8000cd2 <HAL_GPIO_Init+0x21e>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a4f      	ldr	r2, [pc, #316]	; (8000dd4 <HAL_GPIO_Init+0x320>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d019      	beq.n	8000cce <HAL_GPIO_Init+0x21a>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a4e      	ldr	r2, [pc, #312]	; (8000dd8 <HAL_GPIO_Init+0x324>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d013      	beq.n	8000cca <HAL_GPIO_Init+0x216>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4a4d      	ldr	r2, [pc, #308]	; (8000ddc <HAL_GPIO_Init+0x328>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d00d      	beq.n	8000cc6 <HAL_GPIO_Init+0x212>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a4c      	ldr	r2, [pc, #304]	; (8000de0 <HAL_GPIO_Init+0x32c>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d007      	beq.n	8000cc2 <HAL_GPIO_Init+0x20e>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a4b      	ldr	r2, [pc, #300]	; (8000de4 <HAL_GPIO_Init+0x330>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d101      	bne.n	8000cbe <HAL_GPIO_Init+0x20a>
 8000cba:	2307      	movs	r3, #7
 8000cbc:	e00e      	b.n	8000cdc <HAL_GPIO_Init+0x228>
 8000cbe:	2308      	movs	r3, #8
 8000cc0:	e00c      	b.n	8000cdc <HAL_GPIO_Init+0x228>
 8000cc2:	2306      	movs	r3, #6
 8000cc4:	e00a      	b.n	8000cdc <HAL_GPIO_Init+0x228>
 8000cc6:	2305      	movs	r3, #5
 8000cc8:	e008      	b.n	8000cdc <HAL_GPIO_Init+0x228>
 8000cca:	2304      	movs	r3, #4
 8000ccc:	e006      	b.n	8000cdc <HAL_GPIO_Init+0x228>
 8000cce:	2303      	movs	r3, #3
 8000cd0:	e004      	b.n	8000cdc <HAL_GPIO_Init+0x228>
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	e002      	b.n	8000cdc <HAL_GPIO_Init+0x228>
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e000      	b.n	8000cdc <HAL_GPIO_Init+0x228>
 8000cda:	2300      	movs	r3, #0
 8000cdc:	69fa      	ldr	r2, [r7, #28]
 8000cde:	f002 0203 	and.w	r2, r2, #3
 8000ce2:	0092      	lsls	r2, r2, #2
 8000ce4:	4093      	lsls	r3, r2
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000cec:	4935      	ldr	r1, [pc, #212]	; (8000dc4 <HAL_GPIO_Init+0x310>)
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	089b      	lsrs	r3, r3, #2
 8000cf2:	3302      	adds	r3, #2
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cfa:	4b3b      	ldr	r3, [pc, #236]	; (8000de8 <HAL_GPIO_Init+0x334>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	43db      	mvns	r3, r3
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	4013      	ands	r3, r2
 8000d08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d003      	beq.n	8000d1e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000d16:	69ba      	ldr	r2, [r7, #24]
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d1e:	4a32      	ldr	r2, [pc, #200]	; (8000de8 <HAL_GPIO_Init+0x334>)
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000d24:	4b30      	ldr	r3, [pc, #192]	; (8000de8 <HAL_GPIO_Init+0x334>)
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	4013      	ands	r3, r2
 8000d32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d003      	beq.n	8000d48 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d48:	4a27      	ldr	r2, [pc, #156]	; (8000de8 <HAL_GPIO_Init+0x334>)
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d4e:	4b26      	ldr	r3, [pc, #152]	; (8000de8 <HAL_GPIO_Init+0x334>)
 8000d50:	689b      	ldr	r3, [r3, #8]
 8000d52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	43db      	mvns	r3, r3
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d003      	beq.n	8000d72 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d72:	4a1d      	ldr	r2, [pc, #116]	; (8000de8 <HAL_GPIO_Init+0x334>)
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d78:	4b1b      	ldr	r3, [pc, #108]	; (8000de8 <HAL_GPIO_Init+0x334>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	43db      	mvns	r3, r3
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	4013      	ands	r3, r2
 8000d86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d003      	beq.n	8000d9c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d9c:	4a12      	ldr	r2, [pc, #72]	; (8000de8 <HAL_GPIO_Init+0x334>)
 8000d9e:	69bb      	ldr	r3, [r7, #24]
 8000da0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3301      	adds	r3, #1
 8000da6:	61fb      	str	r3, [r7, #28]
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	2b0f      	cmp	r3, #15
 8000dac:	f67f ae90 	bls.w	8000ad0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000db0:	bf00      	nop
 8000db2:	bf00      	nop
 8000db4:	3724      	adds	r7, #36	; 0x24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40013800 	.word	0x40013800
 8000dc8:	40020000 	.word	0x40020000
 8000dcc:	40020400 	.word	0x40020400
 8000dd0:	40020800 	.word	0x40020800
 8000dd4:	40020c00 	.word	0x40020c00
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	40021400 	.word	0x40021400
 8000de0:	40021800 	.word	0x40021800
 8000de4:	40021c00 	.word	0x40021c00
 8000de8:	40013c00 	.word	0x40013c00

08000dec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dee:	b08f      	sub	sp, #60	; 0x3c
 8000df0:	af0a      	add	r7, sp, #40	; 0x28
 8000df2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d101      	bne.n	8000dfe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e10f      	b.n	800101e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d106      	bne.n	8000e1e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2200      	movs	r2, #0
 8000e14:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f004 ffdd 	bl	8005dd8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2203      	movs	r2, #3
 8000e22:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d102      	bne.n	8000e38 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f001 feba 	bl	8002bb6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	603b      	str	r3, [r7, #0]
 8000e48:	687e      	ldr	r6, [r7, #4]
 8000e4a:	466d      	mov	r5, sp
 8000e4c:	f106 0410 	add.w	r4, r6, #16
 8000e50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e58:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e5c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e60:	1d33      	adds	r3, r6, #4
 8000e62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e64:	6838      	ldr	r0, [r7, #0]
 8000e66:	f001 fd91 	bl	800298c <USB_CoreInit>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d005      	beq.n	8000e7c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2202      	movs	r2, #2
 8000e74:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	e0d0      	b.n	800101e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2100      	movs	r1, #0
 8000e82:	4618      	mov	r0, r3
 8000e84:	f001 fea8 	bl	8002bd8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e88:	2300      	movs	r3, #0
 8000e8a:	73fb      	strb	r3, [r7, #15]
 8000e8c:	e04a      	b.n	8000f24 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000e8e:	7bfa      	ldrb	r2, [r7, #15]
 8000e90:	6879      	ldr	r1, [r7, #4]
 8000e92:	4613      	mov	r3, r2
 8000e94:	00db      	lsls	r3, r3, #3
 8000e96:	1a9b      	subs	r3, r3, r2
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	440b      	add	r3, r1
 8000e9c:	333d      	adds	r3, #61	; 0x3d
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000ea2:	7bfa      	ldrb	r2, [r7, #15]
 8000ea4:	6879      	ldr	r1, [r7, #4]
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	00db      	lsls	r3, r3, #3
 8000eaa:	1a9b      	subs	r3, r3, r2
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	440b      	add	r3, r1
 8000eb0:	333c      	adds	r3, #60	; 0x3c
 8000eb2:	7bfa      	ldrb	r2, [r7, #15]
 8000eb4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000eb6:	7bfa      	ldrb	r2, [r7, #15]
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
 8000eba:	b298      	uxth	r0, r3
 8000ebc:	6879      	ldr	r1, [r7, #4]
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	00db      	lsls	r3, r3, #3
 8000ec2:	1a9b      	subs	r3, r3, r2
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	440b      	add	r3, r1
 8000ec8:	3342      	adds	r3, #66	; 0x42
 8000eca:	4602      	mov	r2, r0
 8000ecc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ece:	7bfa      	ldrb	r2, [r7, #15]
 8000ed0:	6879      	ldr	r1, [r7, #4]
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	00db      	lsls	r3, r3, #3
 8000ed6:	1a9b      	subs	r3, r3, r2
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	440b      	add	r3, r1
 8000edc:	333f      	adds	r3, #63	; 0x3f
 8000ede:	2200      	movs	r2, #0
 8000ee0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000ee2:	7bfa      	ldrb	r2, [r7, #15]
 8000ee4:	6879      	ldr	r1, [r7, #4]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	00db      	lsls	r3, r3, #3
 8000eea:	1a9b      	subs	r3, r3, r2
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	440b      	add	r3, r1
 8000ef0:	3344      	adds	r3, #68	; 0x44
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000ef6:	7bfa      	ldrb	r2, [r7, #15]
 8000ef8:	6879      	ldr	r1, [r7, #4]
 8000efa:	4613      	mov	r3, r2
 8000efc:	00db      	lsls	r3, r3, #3
 8000efe:	1a9b      	subs	r3, r3, r2
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	440b      	add	r3, r1
 8000f04:	3348      	adds	r3, #72	; 0x48
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f0a:	7bfa      	ldrb	r2, [r7, #15]
 8000f0c:	6879      	ldr	r1, [r7, #4]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	1a9b      	subs	r3, r3, r2
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	440b      	add	r3, r1
 8000f18:	3350      	adds	r3, #80	; 0x50
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f1e:	7bfb      	ldrb	r3, [r7, #15]
 8000f20:	3301      	adds	r3, #1
 8000f22:	73fb      	strb	r3, [r7, #15]
 8000f24:	7bfa      	ldrb	r2, [r7, #15]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d3af      	bcc.n	8000e8e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f2e:	2300      	movs	r3, #0
 8000f30:	73fb      	strb	r3, [r7, #15]
 8000f32:	e044      	b.n	8000fbe <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f34:	7bfa      	ldrb	r2, [r7, #15]
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	00db      	lsls	r3, r3, #3
 8000f3c:	1a9b      	subs	r3, r3, r2
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	440b      	add	r3, r1
 8000f42:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000f46:	2200      	movs	r2, #0
 8000f48:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000f4a:	7bfa      	ldrb	r2, [r7, #15]
 8000f4c:	6879      	ldr	r1, [r7, #4]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	00db      	lsls	r3, r3, #3
 8000f52:	1a9b      	subs	r3, r3, r2
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	440b      	add	r3, r1
 8000f58:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000f5c:	7bfa      	ldrb	r2, [r7, #15]
 8000f5e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f60:	7bfa      	ldrb	r2, [r7, #15]
 8000f62:	6879      	ldr	r1, [r7, #4]
 8000f64:	4613      	mov	r3, r2
 8000f66:	00db      	lsls	r3, r3, #3
 8000f68:	1a9b      	subs	r3, r3, r2
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	440b      	add	r3, r1
 8000f6e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000f72:	2200      	movs	r2, #0
 8000f74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f76:	7bfa      	ldrb	r2, [r7, #15]
 8000f78:	6879      	ldr	r1, [r7, #4]
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	00db      	lsls	r3, r3, #3
 8000f7e:	1a9b      	subs	r3, r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	440b      	add	r3, r1
 8000f84:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f8c:	7bfa      	ldrb	r2, [r7, #15]
 8000f8e:	6879      	ldr	r1, [r7, #4]
 8000f90:	4613      	mov	r3, r2
 8000f92:	00db      	lsls	r3, r3, #3
 8000f94:	1a9b      	subs	r3, r3, r2
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	440b      	add	r3, r1
 8000f9a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000fa2:	7bfa      	ldrb	r2, [r7, #15]
 8000fa4:	6879      	ldr	r1, [r7, #4]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	00db      	lsls	r3, r3, #3
 8000faa:	1a9b      	subs	r3, r3, r2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	440b      	add	r3, r1
 8000fb0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fb8:	7bfb      	ldrb	r3, [r7, #15]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	73fb      	strb	r3, [r7, #15]
 8000fbe:	7bfa      	ldrb	r2, [r7, #15]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d3b5      	bcc.n	8000f34 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	603b      	str	r3, [r7, #0]
 8000fce:	687e      	ldr	r6, [r7, #4]
 8000fd0:	466d      	mov	r5, sp
 8000fd2:	f106 0410 	add.w	r4, r6, #16
 8000fd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fde:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fe2:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fe6:	1d33      	adds	r3, r6, #4
 8000fe8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fea:	6838      	ldr	r0, [r7, #0]
 8000fec:	f001 fe40 	bl	8002c70 <USB_DevInit>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d005      	beq.n	8001002 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2202      	movs	r2, #2
 8000ffa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e00d      	b.n	800101e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2200      	movs	r2, #0
 8001006:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2201      	movs	r2, #1
 800100e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4618      	mov	r0, r3
 8001018:	f002 febc 	bl	8003d94 <USB_DevDisconnect>

  return HAL_OK;
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3714      	adds	r7, #20
 8001022:	46bd      	mov	sp, r7
 8001024:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001026 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b084      	sub	sp, #16
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800103a:	2b01      	cmp	r3, #1
 800103c:	d101      	bne.n	8001042 <HAL_PCD_Start+0x1c>
 800103e:	2302      	movs	r3, #2
 8001040:	e020      	b.n	8001084 <HAL_PCD_Start+0x5e>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2201      	movs	r2, #1
 8001046:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800104e:	2b01      	cmp	r3, #1
 8001050:	d109      	bne.n	8001066 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001056:	2b01      	cmp	r3, #1
 8001058:	d005      	beq.n	8001066 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800105e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4618      	mov	r0, r3
 800106c:	f001 fd92 	bl	8002b94 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4618      	mov	r0, r3
 8001076:	f002 fe6c 	bl	8003d52 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001082:	2300      	movs	r3, #0
}
 8001084:	4618      	mov	r0, r3
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800108c:	b590      	push	{r4, r7, lr}
 800108e:	b08d      	sub	sp, #52	; 0x34
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800109a:	6a3b      	ldr	r3, [r7, #32]
 800109c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f002 ff2a 	bl	8003efc <USB_GetMode>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	f040 839d 	bne.w	80017ea <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f002 fe8e 	bl	8003dd6 <USB_ReadInterrupts>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	f000 8393 	beq.w	80017e8 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f002 fe85 	bl	8003dd6 <USB_ReadInterrupts>
 80010cc:	4603      	mov	r3, r0
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d107      	bne.n	80010e6 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	695a      	ldr	r2, [r3, #20]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f002 0202 	and.w	r2, r2, #2
 80010e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f002 fe73 	bl	8003dd6 <USB_ReadInterrupts>
 80010f0:	4603      	mov	r3, r0
 80010f2:	f003 0310 	and.w	r3, r3, #16
 80010f6:	2b10      	cmp	r3, #16
 80010f8:	d161      	bne.n	80011be <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	699a      	ldr	r2, [r3, #24]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f022 0210 	bic.w	r2, r2, #16
 8001108:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800110a:	6a3b      	ldr	r3, [r7, #32]
 800110c:	6a1b      	ldr	r3, [r3, #32]
 800110e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	f003 020f 	and.w	r2, r3, #15
 8001116:	4613      	mov	r3, r2
 8001118:	00db      	lsls	r3, r3, #3
 800111a:	1a9b      	subs	r3, r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	4413      	add	r3, r2
 8001126:	3304      	adds	r3, #4
 8001128:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	0c5b      	lsrs	r3, r3, #17
 800112e:	f003 030f 	and.w	r3, r3, #15
 8001132:	2b02      	cmp	r3, #2
 8001134:	d124      	bne.n	8001180 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800113c:	4013      	ands	r3, r2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d035      	beq.n	80011ae <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	091b      	lsrs	r3, r3, #4
 800114a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800114c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001150:	b29b      	uxth	r3, r3
 8001152:	461a      	mov	r2, r3
 8001154:	6a38      	ldr	r0, [r7, #32]
 8001156:	f002 fcaa 	bl	8003aae <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	68da      	ldr	r2, [r3, #12]
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	091b      	lsrs	r3, r3, #4
 8001162:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001166:	441a      	add	r2, r3
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	699a      	ldr	r2, [r3, #24]
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	091b      	lsrs	r3, r3, #4
 8001174:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001178:	441a      	add	r2, r3
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	619a      	str	r2, [r3, #24]
 800117e:	e016      	b.n	80011ae <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	0c5b      	lsrs	r3, r3, #17
 8001184:	f003 030f 	and.w	r3, r3, #15
 8001188:	2b06      	cmp	r3, #6
 800118a:	d110      	bne.n	80011ae <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001192:	2208      	movs	r2, #8
 8001194:	4619      	mov	r1, r3
 8001196:	6a38      	ldr	r0, [r7, #32]
 8001198:	f002 fc89 	bl	8003aae <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	699a      	ldr	r2, [r3, #24]
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	091b      	lsrs	r3, r3, #4
 80011a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011a8:	441a      	add	r2, r3
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	699a      	ldr	r2, [r3, #24]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f042 0210 	orr.w	r2, r2, #16
 80011bc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f002 fe07 	bl	8003dd6 <USB_ReadInterrupts>
 80011c8:	4603      	mov	r3, r0
 80011ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011ce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80011d2:	d16e      	bne.n	80012b2 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80011d4:	2300      	movs	r3, #0
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4618      	mov	r0, r3
 80011de:	f002 fe0d 	bl	8003dfc <USB_ReadDevAllOutEpInterrupt>
 80011e2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80011e4:	e062      	b.n	80012ac <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80011e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d057      	beq.n	80012a0 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	4611      	mov	r1, r2
 80011fa:	4618      	mov	r0, r3
 80011fc:	f002 fe32 	bl	8003e64 <USB_ReadDevOutEPInterrupt>
 8001200:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	2b00      	cmp	r3, #0
 800120a:	d00c      	beq.n	8001226 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800120c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120e:	015a      	lsls	r2, r3, #5
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	4413      	add	r3, r2
 8001214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001218:	461a      	mov	r2, r3
 800121a:	2301      	movs	r3, #1
 800121c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800121e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f000 fdb1 	bl	8001d88 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	f003 0308 	and.w	r3, r3, #8
 800122c:	2b00      	cmp	r3, #0
 800122e:	d00c      	beq.n	800124a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001232:	015a      	lsls	r2, r3, #5
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	4413      	add	r3, r2
 8001238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800123c:	461a      	mov	r2, r3
 800123e:	2308      	movs	r3, #8
 8001240:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001242:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f000 feab 	bl	8001fa0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	f003 0310 	and.w	r3, r3, #16
 8001250:	2b00      	cmp	r3, #0
 8001252:	d008      	beq.n	8001266 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001256:	015a      	lsls	r2, r3, #5
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	4413      	add	r3, r2
 800125c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001260:	461a      	mov	r2, r3
 8001262:	2310      	movs	r3, #16
 8001264:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	f003 0320 	and.w	r3, r3, #32
 800126c:	2b00      	cmp	r3, #0
 800126e:	d008      	beq.n	8001282 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001272:	015a      	lsls	r2, r3, #5
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	4413      	add	r3, r2
 8001278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800127c:	461a      	mov	r2, r3
 800127e:	2320      	movs	r3, #32
 8001280:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d009      	beq.n	80012a0 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800128c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128e:	015a      	lsls	r2, r3, #5
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	4413      	add	r3, r2
 8001294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001298:	461a      	mov	r2, r3
 800129a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800129e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80012a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a2:	3301      	adds	r3, #1
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80012a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012a8:	085b      	lsrs	r3, r3, #1
 80012aa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80012ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d199      	bne.n	80011e6 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f002 fd8d 	bl	8003dd6 <USB_ReadInterrupts>
 80012bc:	4603      	mov	r3, r0
 80012be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80012c6:	f040 80c0 	bne.w	800144a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f002 fdae 	bl	8003e30 <USB_ReadDevAllInEpInterrupt>
 80012d4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80012d6:	2300      	movs	r3, #0
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80012da:	e0b2      	b.n	8001442 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80012dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f000 80a7 	beq.w	8001436 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012ee:	b2d2      	uxtb	r2, r2
 80012f0:	4611      	mov	r1, r2
 80012f2:	4618      	mov	r0, r3
 80012f4:	f002 fdd4 	bl	8003ea0 <USB_ReadDevInEPInterrupt>
 80012f8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	2b00      	cmp	r3, #0
 8001302:	d057      	beq.n	80013b4 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001306:	f003 030f 	and.w	r3, r3, #15
 800130a:	2201      	movs	r2, #1
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001318:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	43db      	mvns	r3, r3
 800131e:	69f9      	ldr	r1, [r7, #28]
 8001320:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001324:	4013      	ands	r3, r2
 8001326:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132a:	015a      	lsls	r2, r3, #5
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	4413      	add	r3, r2
 8001330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001334:	461a      	mov	r2, r3
 8001336:	2301      	movs	r3, #1
 8001338:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	691b      	ldr	r3, [r3, #16]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d132      	bne.n	80013a8 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001346:	4613      	mov	r3, r2
 8001348:	00db      	lsls	r3, r3, #3
 800134a:	1a9b      	subs	r3, r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	440b      	add	r3, r1
 8001350:	3348      	adds	r3, #72	; 0x48
 8001352:	6819      	ldr	r1, [r3, #0]
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001358:	4613      	mov	r3, r2
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	1a9b      	subs	r3, r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	4403      	add	r3, r0
 8001362:	3344      	adds	r3, #68	; 0x44
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4419      	add	r1, r3
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800136c:	4613      	mov	r3, r2
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	1a9b      	subs	r3, r3, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	4403      	add	r3, r0
 8001376:	3348      	adds	r3, #72	; 0x48
 8001378:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800137a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137c:	2b00      	cmp	r3, #0
 800137e:	d113      	bne.n	80013a8 <HAL_PCD_IRQHandler+0x31c>
 8001380:	6879      	ldr	r1, [r7, #4]
 8001382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001384:	4613      	mov	r3, r2
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	1a9b      	subs	r3, r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	440b      	add	r3, r1
 800138e:	3350      	adds	r3, #80	; 0x50
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d108      	bne.n	80013a8 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6818      	ldr	r0, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80013a0:	461a      	mov	r2, r3
 80013a2:	2101      	movs	r1, #1
 80013a4:	f002 fddc 	bl	8003f60 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80013a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	4619      	mov	r1, r3
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f004 fd93 	bl	8005eda <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	f003 0308 	and.w	r3, r3, #8
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d008      	beq.n	80013d0 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80013be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c0:	015a      	lsls	r2, r3, #5
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	4413      	add	r3, r2
 80013c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013ca:	461a      	mov	r2, r3
 80013cc:	2308      	movs	r3, #8
 80013ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	f003 0310 	and.w	r3, r3, #16
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d008      	beq.n	80013ec <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80013da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013dc:	015a      	lsls	r2, r3, #5
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	4413      	add	r3, r2
 80013e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013e6:	461a      	mov	r2, r3
 80013e8:	2310      	movs	r3, #16
 80013ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d008      	beq.n	8001408 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80013f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f8:	015a      	lsls	r2, r3, #5
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	4413      	add	r3, r2
 80013fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001402:	461a      	mov	r2, r3
 8001404:	2340      	movs	r3, #64	; 0x40
 8001406:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d008      	beq.n	8001424 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001414:	015a      	lsls	r2, r3, #5
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	4413      	add	r3, r2
 800141a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800141e:	461a      	mov	r2, r3
 8001420:	2302      	movs	r3, #2
 8001422:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800142e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f000 fc1b 	bl	8001c6c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001438:	3301      	adds	r3, #1
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800143c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800143e:	085b      	lsrs	r3, r3, #1
 8001440:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001444:	2b00      	cmp	r3, #0
 8001446:	f47f af49 	bne.w	80012dc <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4618      	mov	r0, r3
 8001450:	f002 fcc1 	bl	8003dd6 <USB_ReadInterrupts>
 8001454:	4603      	mov	r3, r0
 8001456:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800145a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800145e:	d122      	bne.n	80014a6 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	69fa      	ldr	r2, [r7, #28]
 800146a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800146e:	f023 0301 	bic.w	r3, r3, #1
 8001472:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800147a:	2b01      	cmp	r3, #1
 800147c:	d108      	bne.n	8001490 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001486:	2100      	movs	r1, #0
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f000 fe27 	bl	80020dc <HAL_PCDEx_LPM_Callback>
 800148e:	e002      	b.n	8001496 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f004 fd99 	bl	8005fc8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	695a      	ldr	r2, [r3, #20]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80014a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f002 fc93 	bl	8003dd6 <USB_ReadInterrupts>
 80014b0:	4603      	mov	r3, r0
 80014b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80014ba:	d112      	bne.n	80014e2 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d102      	bne.n	80014d2 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f004 fd55 	bl	8005f7c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	695a      	ldr	r2, [r3, #20]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80014e0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f002 fc75 	bl	8003dd6 <USB_ReadInterrupts>
 80014ec:	4603      	mov	r3, r0
 80014ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014f6:	f040 80c7 	bne.w	8001688 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	69fa      	ldr	r2, [r7, #28]
 8001504:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001508:	f023 0301 	bic.w	r3, r3, #1
 800150c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2110      	movs	r1, #16
 8001514:	4618      	mov	r0, r3
 8001516:	f001 fd0f 	bl	8002f38 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800151a:	2300      	movs	r3, #0
 800151c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800151e:	e056      	b.n	80015ce <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001522:	015a      	lsls	r2, r3, #5
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	4413      	add	r3, r2
 8001528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800152c:	461a      	mov	r2, r3
 800152e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001532:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001536:	015a      	lsls	r2, r3, #5
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	4413      	add	r3, r2
 800153c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001544:	0151      	lsls	r1, r2, #5
 8001546:	69fa      	ldr	r2, [r7, #28]
 8001548:	440a      	add	r2, r1
 800154a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800154e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001552:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001556:	015a      	lsls	r2, r3, #5
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	4413      	add	r3, r2
 800155c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001564:	0151      	lsls	r1, r2, #5
 8001566:	69fa      	ldr	r2, [r7, #28]
 8001568:	440a      	add	r2, r1
 800156a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800156e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001572:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001576:	015a      	lsls	r2, r3, #5
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	4413      	add	r3, r2
 800157c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001580:	461a      	mov	r2, r3
 8001582:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001586:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800158a:	015a      	lsls	r2, r3, #5
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	4413      	add	r3, r2
 8001590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001598:	0151      	lsls	r1, r2, #5
 800159a:	69fa      	ldr	r2, [r7, #28]
 800159c:	440a      	add	r2, r1
 800159e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80015a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80015a6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80015a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015aa:	015a      	lsls	r2, r3, #5
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	4413      	add	r3, r2
 80015b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015b8:	0151      	lsls	r1, r2, #5
 80015ba:	69fa      	ldr	r2, [r7, #28]
 80015bc:	440a      	add	r2, r1
 80015be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80015c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80015c6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ca:	3301      	adds	r3, #1
 80015cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d3a3      	bcc.n	8001520 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015de:	69db      	ldr	r3, [r3, #28]
 80015e0:	69fa      	ldr	r2, [r7, #28]
 80015e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015e6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80015ea:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d016      	beq.n	8001622 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015fe:	69fa      	ldr	r2, [r7, #28]
 8001600:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001604:	f043 030b 	orr.w	r3, r3, #11
 8001608:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001614:	69fa      	ldr	r2, [r7, #28]
 8001616:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800161a:	f043 030b 	orr.w	r3, r3, #11
 800161e:	6453      	str	r3, [r2, #68]	; 0x44
 8001620:	e015      	b.n	800164e <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	69fa      	ldr	r2, [r7, #28]
 800162c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001630:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001634:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001638:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001640:	691b      	ldr	r3, [r3, #16]
 8001642:	69fa      	ldr	r2, [r7, #28]
 8001644:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001648:	f043 030b 	orr.w	r3, r3, #11
 800164c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	69fa      	ldr	r2, [r7, #28]
 8001658:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800165c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001660:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6818      	ldr	r0, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001672:	461a      	mov	r2, r3
 8001674:	f002 fc74 	bl	8003f60 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	695a      	ldr	r2, [r3, #20]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001686:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f002 fba2 	bl	8003dd6 <USB_ReadInterrupts>
 8001692:	4603      	mov	r3, r0
 8001694:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001698:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800169c:	d124      	bne.n	80016e8 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f002 fc38 	bl	8003f18 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f001 fca0 	bl	8002ff2 <USB_GetDevSpeed>
 80016b2:	4603      	mov	r3, r0
 80016b4:	461a      	mov	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681c      	ldr	r4, [r3, #0]
 80016be:	f001 f959 	bl	8002974 <HAL_RCC_GetHCLKFreq>
 80016c2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	461a      	mov	r2, r3
 80016cc:	4620      	mov	r0, r4
 80016ce:	f001 f9bf 	bl	8002a50 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f004 fc29 	bl	8005f2a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	695a      	ldr	r2, [r3, #20]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80016e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f002 fb72 	bl	8003dd6 <USB_ReadInterrupts>
 80016f2:	4603      	mov	r3, r0
 80016f4:	f003 0308 	and.w	r3, r3, #8
 80016f8:	2b08      	cmp	r3, #8
 80016fa:	d10a      	bne.n	8001712 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f004 fc06 	bl	8005f0e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	695a      	ldr	r2, [r3, #20]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f002 0208 	and.w	r2, r2, #8
 8001710:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4618      	mov	r0, r3
 8001718:	f002 fb5d 	bl	8003dd6 <USB_ReadInterrupts>
 800171c:	4603      	mov	r3, r0
 800171e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001722:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001726:	d10f      	bne.n	8001748 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001728:	2300      	movs	r3, #0
 800172a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800172c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172e:	b2db      	uxtb	r3, r3
 8001730:	4619      	mov	r1, r3
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f004 fc68 	bl	8006008 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	695a      	ldr	r2, [r3, #20]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001746:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f002 fb42 	bl	8003dd6 <USB_ReadInterrupts>
 8001752:	4603      	mov	r3, r0
 8001754:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001758:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800175c:	d10f      	bne.n	800177e <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800175e:	2300      	movs	r3, #0
 8001760:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001764:	b2db      	uxtb	r3, r3
 8001766:	4619      	mov	r1, r3
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f004 fc3b 	bl	8005fe4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	695a      	ldr	r2, [r3, #20]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800177c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f002 fb27 	bl	8003dd6 <USB_ReadInterrupts>
 8001788:	4603      	mov	r3, r0
 800178a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800178e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001792:	d10a      	bne.n	80017aa <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f004 fc49 	bl	800602c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	695a      	ldr	r2, [r3, #20]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80017a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f002 fb11 	bl	8003dd6 <USB_ReadInterrupts>
 80017b4:	4603      	mov	r3, r0
 80017b6:	f003 0304 	and.w	r3, r3, #4
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	d115      	bne.n	80017ea <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d002      	beq.n	80017d6 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f004 fc39 	bl	8006048 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	6859      	ldr	r1, [r3, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	430a      	orrs	r2, r1
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	e000      	b.n	80017ea <HAL_PCD_IRQHandler+0x75e>
      return;
 80017e8:	bf00      	nop
    }
  }
}
 80017ea:	3734      	adds	r7, #52	; 0x34
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd90      	pop	{r4, r7, pc}

080017f0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	460b      	mov	r3, r1
 80017fa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001802:	2b01      	cmp	r3, #1
 8001804:	d101      	bne.n	800180a <HAL_PCD_SetAddress+0x1a>
 8001806:	2302      	movs	r3, #2
 8001808:	e013      	b.n	8001832 <HAL_PCD_SetAddress+0x42>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2201      	movs	r2, #1
 800180e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	78fa      	ldrb	r2, [r7, #3]
 8001816:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	78fa      	ldrb	r2, [r7, #3]
 8001820:	4611      	mov	r1, r2
 8001822:	4618      	mov	r0, r3
 8001824:	f002 fa6f 	bl	8003d06 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b084      	sub	sp, #16
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
 8001842:	4608      	mov	r0, r1
 8001844:	4611      	mov	r1, r2
 8001846:	461a      	mov	r2, r3
 8001848:	4603      	mov	r3, r0
 800184a:	70fb      	strb	r3, [r7, #3]
 800184c:	460b      	mov	r3, r1
 800184e:	803b      	strh	r3, [r7, #0]
 8001850:	4613      	mov	r3, r2
 8001852:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001854:	2300      	movs	r3, #0
 8001856:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001858:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800185c:	2b00      	cmp	r3, #0
 800185e:	da0f      	bge.n	8001880 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001860:	78fb      	ldrb	r3, [r7, #3]
 8001862:	f003 020f 	and.w	r2, r3, #15
 8001866:	4613      	mov	r3, r2
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	1a9b      	subs	r3, r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	3338      	adds	r3, #56	; 0x38
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	4413      	add	r3, r2
 8001874:	3304      	adds	r3, #4
 8001876:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2201      	movs	r2, #1
 800187c:	705a      	strb	r2, [r3, #1]
 800187e:	e00f      	b.n	80018a0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001880:	78fb      	ldrb	r3, [r7, #3]
 8001882:	f003 020f 	and.w	r2, r3, #15
 8001886:	4613      	mov	r3, r2
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	1a9b      	subs	r3, r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	4413      	add	r3, r2
 8001896:	3304      	adds	r3, #4
 8001898:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2200      	movs	r2, #0
 800189e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80018a0:	78fb      	ldrb	r3, [r7, #3]
 80018a2:	f003 030f 	and.w	r3, r3, #15
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80018ac:	883a      	ldrh	r2, [r7, #0]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	78ba      	ldrb	r2, [r7, #2]
 80018b6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	785b      	ldrb	r3, [r3, #1]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d004      	beq.n	80018ca <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80018ca:	78bb      	ldrb	r3, [r7, #2]
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d102      	bne.n	80018d6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2200      	movs	r2, #0
 80018d4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d101      	bne.n	80018e4 <HAL_PCD_EP_Open+0xaa>
 80018e0:	2302      	movs	r3, #2
 80018e2:	e00e      	b.n	8001902 <HAL_PCD_EP_Open+0xc8>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2201      	movs	r2, #1
 80018e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	68f9      	ldr	r1, [r7, #12]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f001 fba2 	bl	800303c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001900:	7afb      	ldrb	r3, [r7, #11]
}
 8001902:	4618      	mov	r0, r3
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b084      	sub	sp, #16
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
 8001912:	460b      	mov	r3, r1
 8001914:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001916:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800191a:	2b00      	cmp	r3, #0
 800191c:	da0f      	bge.n	800193e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800191e:	78fb      	ldrb	r3, [r7, #3]
 8001920:	f003 020f 	and.w	r2, r3, #15
 8001924:	4613      	mov	r3, r2
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	1a9b      	subs	r3, r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	3338      	adds	r3, #56	; 0x38
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	4413      	add	r3, r2
 8001932:	3304      	adds	r3, #4
 8001934:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2201      	movs	r2, #1
 800193a:	705a      	strb	r2, [r3, #1]
 800193c:	e00f      	b.n	800195e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800193e:	78fb      	ldrb	r3, [r7, #3]
 8001940:	f003 020f 	and.w	r2, r3, #15
 8001944:	4613      	mov	r3, r2
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	1a9b      	subs	r3, r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	4413      	add	r3, r2
 8001954:	3304      	adds	r3, #4
 8001956:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2200      	movs	r2, #0
 800195c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800195e:	78fb      	ldrb	r3, [r7, #3]
 8001960:	f003 030f 	and.w	r3, r3, #15
 8001964:	b2da      	uxtb	r2, r3
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001970:	2b01      	cmp	r3, #1
 8001972:	d101      	bne.n	8001978 <HAL_PCD_EP_Close+0x6e>
 8001974:	2302      	movs	r3, #2
 8001976:	e00e      	b.n	8001996 <HAL_PCD_EP_Close+0x8c>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	68f9      	ldr	r1, [r7, #12]
 8001986:	4618      	mov	r0, r3
 8001988:	f001 fbe0 	bl	800314c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b086      	sub	sp, #24
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	60f8      	str	r0, [r7, #12]
 80019a6:	607a      	str	r2, [r7, #4]
 80019a8:	603b      	str	r3, [r7, #0]
 80019aa:	460b      	mov	r3, r1
 80019ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019ae:	7afb      	ldrb	r3, [r7, #11]
 80019b0:	f003 020f 	and.w	r2, r3, #15
 80019b4:	4613      	mov	r3, r2
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	1a9b      	subs	r3, r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80019c0:	68fa      	ldr	r2, [r7, #12]
 80019c2:	4413      	add	r3, r2
 80019c4:	3304      	adds	r3, #4
 80019c6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	2200      	movs	r2, #0
 80019d8:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	2200      	movs	r2, #0
 80019de:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019e0:	7afb      	ldrb	r3, [r7, #11]
 80019e2:	f003 030f 	and.w	r3, r3, #15
 80019e6:	b2da      	uxtb	r2, r3
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d102      	bne.n	80019fa <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019fa:	7afb      	ldrb	r3, [r7, #11]
 80019fc:	f003 030f 	and.w	r3, r3, #15
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d109      	bne.n	8001a18 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	6818      	ldr	r0, [r3, #0]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	691b      	ldr	r3, [r3, #16]
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	461a      	mov	r2, r3
 8001a10:	6979      	ldr	r1, [r7, #20]
 8001a12:	f001 febb 	bl	800378c <USB_EP0StartXfer>
 8001a16:	e008      	b.n	8001a2a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6818      	ldr	r0, [r3, #0]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	461a      	mov	r2, r3
 8001a24:	6979      	ldr	r1, [r7, #20]
 8001a26:	f001 fc6d 	bl	8003304 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3718      	adds	r7, #24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001a40:	78fb      	ldrb	r3, [r7, #3]
 8001a42:	f003 020f 	and.w	r2, r3, #15
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	1a9b      	subs	r3, r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	440b      	add	r3, r1
 8001a52:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001a56:	681b      	ldr	r3, [r3, #0]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	607a      	str	r2, [r7, #4]
 8001a6e:	603b      	str	r3, [r7, #0]
 8001a70:	460b      	mov	r3, r1
 8001a72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a74:	7afb      	ldrb	r3, [r7, #11]
 8001a76:	f003 020f 	and.w	r2, r3, #15
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	1a9b      	subs	r3, r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	3338      	adds	r3, #56	; 0x38
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	4413      	add	r3, r2
 8001a88:	3304      	adds	r3, #4
 8001a8a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	683a      	ldr	r2, [r7, #0]
 8001a96:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001aa4:	7afb      	ldrb	r3, [r7, #11]
 8001aa6:	f003 030f 	and.w	r3, r3, #15
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	691b      	ldr	r3, [r3, #16]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d102      	bne.n	8001abe <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001abe:	7afb      	ldrb	r3, [r7, #11]
 8001ac0:	f003 030f 	and.w	r3, r3, #15
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d109      	bne.n	8001adc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6818      	ldr	r0, [r3, #0]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	691b      	ldr	r3, [r3, #16]
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	6979      	ldr	r1, [r7, #20]
 8001ad6:	f001 fe59 	bl	800378c <USB_EP0StartXfer>
 8001ada:	e008      	b.n	8001aee <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6818      	ldr	r0, [r3, #0]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	6979      	ldr	r1, [r7, #20]
 8001aea:	f001 fc0b 	bl	8003304 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3718      	adds	r7, #24
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	460b      	mov	r3, r1
 8001b02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001b04:	78fb      	ldrb	r3, [r7, #3]
 8001b06:	f003 020f 	and.w	r2, r3, #15
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d901      	bls.n	8001b16 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e050      	b.n	8001bb8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	da0f      	bge.n	8001b3e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b1e:	78fb      	ldrb	r3, [r7, #3]
 8001b20:	f003 020f 	and.w	r2, r3, #15
 8001b24:	4613      	mov	r3, r2
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	1a9b      	subs	r3, r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	3338      	adds	r3, #56	; 0x38
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	4413      	add	r3, r2
 8001b32:	3304      	adds	r3, #4
 8001b34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	705a      	strb	r2, [r3, #1]
 8001b3c:	e00d      	b.n	8001b5a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001b3e:	78fa      	ldrb	r2, [r7, #3]
 8001b40:	4613      	mov	r3, r2
 8001b42:	00db      	lsls	r3, r3, #3
 8001b44:	1a9b      	subs	r3, r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	4413      	add	r3, r2
 8001b50:	3304      	adds	r3, #4
 8001b52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2200      	movs	r2, #0
 8001b58:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b60:	78fb      	ldrb	r3, [r7, #3]
 8001b62:	f003 030f 	and.w	r3, r3, #15
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d101      	bne.n	8001b7a <HAL_PCD_EP_SetStall+0x82>
 8001b76:	2302      	movs	r3, #2
 8001b78:	e01e      	b.n	8001bb8 <HAL_PCD_EP_SetStall+0xc0>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68f9      	ldr	r1, [r7, #12]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f001 ffe8 	bl	8003b5e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b8e:	78fb      	ldrb	r3, [r7, #3]
 8001b90:	f003 030f 	and.w	r3, r3, #15
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10a      	bne.n	8001bae <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6818      	ldr	r0, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	b2d9      	uxtb	r1, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001ba8:	461a      	mov	r2, r3
 8001baa:	f002 f9d9 	bl	8003f60 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001bcc:	78fb      	ldrb	r3, [r7, #3]
 8001bce:	f003 020f 	and.w	r2, r3, #15
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d901      	bls.n	8001bde <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e042      	b.n	8001c64 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001bde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	da0f      	bge.n	8001c06 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001be6:	78fb      	ldrb	r3, [r7, #3]
 8001be8:	f003 020f 	and.w	r2, r3, #15
 8001bec:	4613      	mov	r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	1a9b      	subs	r3, r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	3338      	adds	r3, #56	; 0x38
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	3304      	adds	r3, #4
 8001bfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2201      	movs	r2, #1
 8001c02:	705a      	strb	r2, [r3, #1]
 8001c04:	e00f      	b.n	8001c26 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c06:	78fb      	ldrb	r3, [r7, #3]
 8001c08:	f003 020f 	and.w	r2, r3, #15
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	1a9b      	subs	r3, r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2200      	movs	r2, #0
 8001c24:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c2c:	78fb      	ldrb	r3, [r7, #3]
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d101      	bne.n	8001c46 <HAL_PCD_EP_ClrStall+0x86>
 8001c42:	2302      	movs	r3, #2
 8001c44:	e00e      	b.n	8001c64 <HAL_PCD_EP_ClrStall+0xa4>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68f9      	ldr	r1, [r7, #12]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f001 fff0 	bl	8003c3a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3710      	adds	r7, #16
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08a      	sub	sp, #40	; 0x28
 8001c70:	af02      	add	r7, sp, #8
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001c80:	683a      	ldr	r2, [r7, #0]
 8001c82:	4613      	mov	r3, r2
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	1a9b      	subs	r3, r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	3338      	adds	r3, #56	; 0x38
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	4413      	add	r3, r2
 8001c90:	3304      	adds	r3, #4
 8001c92:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	699a      	ldr	r2, [r3, #24]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	695b      	ldr	r3, [r3, #20]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d901      	bls.n	8001ca4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e06c      	b.n	8001d7e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	695a      	ldr	r2, [r3, #20]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	69fa      	ldr	r2, [r7, #28]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d902      	bls.n	8001cc0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	3303      	adds	r3, #3
 8001cc4:	089b      	lsrs	r3, r3, #2
 8001cc6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001cc8:	e02b      	b.n	8001d22 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	695a      	ldr	r2, [r3, #20]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	69fa      	ldr	r2, [r7, #28]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d902      	bls.n	8001ce6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	3303      	adds	r3, #3
 8001cea:	089b      	lsrs	r3, r3, #2
 8001cec:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	68d9      	ldr	r1, [r3, #12]
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	9300      	str	r3, [sp, #0]
 8001d02:	4603      	mov	r3, r0
 8001d04:	6978      	ldr	r0, [r7, #20]
 8001d06:	f001 fe94 	bl	8003a32 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	68da      	ldr	r2, [r3, #12]
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	441a      	add	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	699a      	ldr	r2, [r3, #24]
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	441a      	add	r2, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	015a      	lsls	r2, r3, #5
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	4413      	add	r3, r2
 8001d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d809      	bhi.n	8001d4c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	699a      	ldr	r2, [r3, #24]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d203      	bcs.n	8001d4c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	695b      	ldr	r3, [r3, #20]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1be      	bne.n	8001cca <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	695a      	ldr	r2, [r3, #20]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d811      	bhi.n	8001d7c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	f003 030f 	and.w	r3, r3, #15
 8001d5e:	2201      	movs	r2, #1
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	43db      	mvns	r3, r3
 8001d72:	6939      	ldr	r1, [r7, #16]
 8001d74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001d78:	4013      	ands	r3, r2
 8001d7a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3720      	adds	r7, #32
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
	...

08001d88 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	333c      	adds	r3, #60	; 0x3c
 8001da0:	3304      	adds	r3, #4
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	015a      	lsls	r2, r3, #5
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	4413      	add	r3, r2
 8001dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	f040 80a0 	bne.w	8001f00 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	f003 0308 	and.w	r3, r3, #8
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d015      	beq.n	8001df6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	4a72      	ldr	r2, [pc, #456]	; (8001f98 <PCD_EP_OutXfrComplete_int+0x210>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	f240 80dd 	bls.w	8001f8e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 80d7 	beq.w	8001f8e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	015a      	lsls	r2, r3, #5
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	4413      	add	r3, r2
 8001de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dec:	461a      	mov	r2, r3
 8001dee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001df2:	6093      	str	r3, [r2, #8]
 8001df4:	e0cb      	b.n	8001f8e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	f003 0320 	and.w	r3, r3, #32
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d009      	beq.n	8001e14 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	015a      	lsls	r2, r3, #5
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	4413      	add	r3, r2
 8001e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	2320      	movs	r3, #32
 8001e10:	6093      	str	r3, [r2, #8]
 8001e12:	e0bc      	b.n	8001f8e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f040 80b7 	bne.w	8001f8e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	4a5d      	ldr	r2, [pc, #372]	; (8001f98 <PCD_EP_OutXfrComplete_int+0x210>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d90f      	bls.n	8001e48 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00a      	beq.n	8001e48 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	015a      	lsls	r2, r3, #5
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	4413      	add	r3, r2
 8001e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e3e:	461a      	mov	r2, r3
 8001e40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e44:	6093      	str	r3, [r2, #8]
 8001e46:	e0a2      	b.n	8001f8e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001e48:	6879      	ldr	r1, [r7, #4]
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	1a9b      	subs	r3, r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	440b      	add	r3, r1
 8001e56:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001e5a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	0159      	lsls	r1, r3, #5
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	440b      	add	r3, r1
 8001e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001e6e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	4613      	mov	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	1a9b      	subs	r3, r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4403      	add	r3, r0
 8001e7e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001e82:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001e84:	6879      	ldr	r1, [r7, #4]
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	1a9b      	subs	r3, r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	440b      	add	r3, r1
 8001e92:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e96:	6819      	ldr	r1, [r3, #0]
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	1a9b      	subs	r3, r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4403      	add	r3, r0
 8001ea6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4419      	add	r1, r3
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	1a9b      	subs	r3, r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	4403      	add	r3, r0
 8001ebc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ec0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d114      	bne.n	8001ef2 <PCD_EP_OutXfrComplete_int+0x16a>
 8001ec8:	6879      	ldr	r1, [r7, #4]
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	1a9b      	subs	r3, r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d108      	bne.n	8001ef2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6818      	ldr	r0, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001eea:	461a      	mov	r2, r3
 8001eec:	2101      	movs	r1, #1
 8001eee:	f002 f837 	bl	8003f60 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f003 ffd3 	bl	8005ea4 <HAL_PCD_DataOutStageCallback>
 8001efe:	e046      	b.n	8001f8e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	4a26      	ldr	r2, [pc, #152]	; (8001f9c <PCD_EP_OutXfrComplete_int+0x214>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d124      	bne.n	8001f52 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d00a      	beq.n	8001f28 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	015a      	lsls	r2, r3, #5
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	4413      	add	r3, r2
 8001f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f1e:	461a      	mov	r2, r3
 8001f20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f24:	6093      	str	r3, [r2, #8]
 8001f26:	e032      	b.n	8001f8e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	f003 0320 	and.w	r3, r3, #32
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d008      	beq.n	8001f44 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	015a      	lsls	r2, r3, #5
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	4413      	add	r3, r2
 8001f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f3e:	461a      	mov	r2, r3
 8001f40:	2320      	movs	r3, #32
 8001f42:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	4619      	mov	r1, r3
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f003 ffaa 	bl	8005ea4 <HAL_PCD_DataOutStageCallback>
 8001f50:	e01d      	b.n	8001f8e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d114      	bne.n	8001f82 <PCD_EP_OutXfrComplete_int+0x1fa>
 8001f58:	6879      	ldr	r1, [r7, #4]
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	1a9b      	subs	r3, r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	440b      	add	r3, r1
 8001f66:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d108      	bne.n	8001f82 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6818      	ldr	r0, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	f001 ffef 	bl	8003f60 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	4619      	mov	r1, r3
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f003 ff8b 	bl	8005ea4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3718      	adds	r7, #24
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	4f54300a 	.word	0x4f54300a
 8001f9c:	4f54310a 	.word	0x4f54310a

08001fa0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	333c      	adds	r3, #60	; 0x3c
 8001fb8:	3304      	adds	r3, #4
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	015a      	lsls	r2, r3, #5
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	4a15      	ldr	r2, [pc, #84]	; (8002028 <PCD_EP_OutSetupPacket_int+0x88>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d90e      	bls.n	8001ff4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d009      	beq.n	8001ff4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	015a      	lsls	r2, r3, #5
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fec:	461a      	mov	r2, r3
 8001fee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ff2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f003 ff43 	bl	8005e80 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	4a0a      	ldr	r2, [pc, #40]	; (8002028 <PCD_EP_OutSetupPacket_int+0x88>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d90c      	bls.n	800201c <PCD_EP_OutSetupPacket_int+0x7c>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d108      	bne.n	800201c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6818      	ldr	r0, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002014:	461a      	mov	r2, r3
 8002016:	2101      	movs	r1, #1
 8002018:	f001 ffa2 	bl	8003f60 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3718      	adds	r7, #24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	4f54300a 	.word	0x4f54300a

0800202c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	460b      	mov	r3, r1
 8002036:	70fb      	strb	r3, [r7, #3]
 8002038:	4613      	mov	r3, r2
 800203a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002042:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002044:	78fb      	ldrb	r3, [r7, #3]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d107      	bne.n	800205a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800204a:	883b      	ldrh	r3, [r7, #0]
 800204c:	0419      	lsls	r1, r3, #16
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68ba      	ldr	r2, [r7, #8]
 8002054:	430a      	orrs	r2, r1
 8002056:	629a      	str	r2, [r3, #40]	; 0x28
 8002058:	e028      	b.n	80020ac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002060:	0c1b      	lsrs	r3, r3, #16
 8002062:	68ba      	ldr	r2, [r7, #8]
 8002064:	4413      	add	r3, r2
 8002066:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002068:	2300      	movs	r3, #0
 800206a:	73fb      	strb	r3, [r7, #15]
 800206c:	e00d      	b.n	800208a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	7bfb      	ldrb	r3, [r7, #15]
 8002074:	3340      	adds	r3, #64	; 0x40
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	4413      	add	r3, r2
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	0c1b      	lsrs	r3, r3, #16
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	4413      	add	r3, r2
 8002082:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002084:	7bfb      	ldrb	r3, [r7, #15]
 8002086:	3301      	adds	r3, #1
 8002088:	73fb      	strb	r3, [r7, #15]
 800208a:	7bfa      	ldrb	r2, [r7, #15]
 800208c:	78fb      	ldrb	r3, [r7, #3]
 800208e:	3b01      	subs	r3, #1
 8002090:	429a      	cmp	r2, r3
 8002092:	d3ec      	bcc.n	800206e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002094:	883b      	ldrh	r3, [r7, #0]
 8002096:	0418      	lsls	r0, r3, #16
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6819      	ldr	r1, [r3, #0]
 800209c:	78fb      	ldrb	r3, [r7, #3]
 800209e:	3b01      	subs	r3, #1
 80020a0:	68ba      	ldr	r2, [r7, #8]
 80020a2:	4302      	orrs	r2, r0
 80020a4:	3340      	adds	r3, #64	; 0x40
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	440b      	add	r3, r1
 80020aa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b083      	sub	sp, #12
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
 80020c2:	460b      	mov	r3, r1
 80020c4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	887a      	ldrh	r2, [r7, #2]
 80020cc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e264      	b.n	80025d0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b00      	cmp	r3, #0
 8002110:	d075      	beq.n	80021fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002112:	4ba3      	ldr	r3, [pc, #652]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 030c 	and.w	r3, r3, #12
 800211a:	2b04      	cmp	r3, #4
 800211c:	d00c      	beq.n	8002138 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800211e:	4ba0      	ldr	r3, [pc, #640]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002126:	2b08      	cmp	r3, #8
 8002128:	d112      	bne.n	8002150 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800212a:	4b9d      	ldr	r3, [pc, #628]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002132:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002136:	d10b      	bne.n	8002150 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002138:	4b99      	ldr	r3, [pc, #612]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d05b      	beq.n	80021fc <HAL_RCC_OscConfig+0x108>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d157      	bne.n	80021fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e23f      	b.n	80025d0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002158:	d106      	bne.n	8002168 <HAL_RCC_OscConfig+0x74>
 800215a:	4b91      	ldr	r3, [pc, #580]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a90      	ldr	r2, [pc, #576]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 8002160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	e01d      	b.n	80021a4 <HAL_RCC_OscConfig+0xb0>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002170:	d10c      	bne.n	800218c <HAL_RCC_OscConfig+0x98>
 8002172:	4b8b      	ldr	r3, [pc, #556]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a8a      	ldr	r2, [pc, #552]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 8002178:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800217c:	6013      	str	r3, [r2, #0]
 800217e:	4b88      	ldr	r3, [pc, #544]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a87      	ldr	r2, [pc, #540]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 8002184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	e00b      	b.n	80021a4 <HAL_RCC_OscConfig+0xb0>
 800218c:	4b84      	ldr	r3, [pc, #528]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a83      	ldr	r2, [pc, #524]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 8002192:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002196:	6013      	str	r3, [r2, #0]
 8002198:	4b81      	ldr	r3, [pc, #516]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a80      	ldr	r2, [pc, #512]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 800219e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d013      	beq.n	80021d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ac:	f7fe fb40 	bl	8000830 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021b4:	f7fe fb3c 	bl	8000830 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b64      	cmp	r3, #100	; 0x64
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e204      	b.n	80025d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c6:	4b76      	ldr	r3, [pc, #472]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0f0      	beq.n	80021b4 <HAL_RCC_OscConfig+0xc0>
 80021d2:	e014      	b.n	80021fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d4:	f7fe fb2c 	bl	8000830 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021dc:	f7fe fb28 	bl	8000830 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b64      	cmp	r3, #100	; 0x64
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e1f0      	b.n	80025d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ee:	4b6c      	ldr	r3, [pc, #432]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f0      	bne.n	80021dc <HAL_RCC_OscConfig+0xe8>
 80021fa:	e000      	b.n	80021fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d063      	beq.n	80022d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800220a:	4b65      	ldr	r3, [pc, #404]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 030c 	and.w	r3, r3, #12
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00b      	beq.n	800222e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002216:	4b62      	ldr	r3, [pc, #392]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800221e:	2b08      	cmp	r3, #8
 8002220:	d11c      	bne.n	800225c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002222:	4b5f      	ldr	r3, [pc, #380]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d116      	bne.n	800225c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800222e:	4b5c      	ldr	r3, [pc, #368]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d005      	beq.n	8002246 <HAL_RCC_OscConfig+0x152>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d001      	beq.n	8002246 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e1c4      	b.n	80025d0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002246:	4b56      	ldr	r3, [pc, #344]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	4952      	ldr	r1, [pc, #328]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 8002256:	4313      	orrs	r3, r2
 8002258:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800225a:	e03a      	b.n	80022d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d020      	beq.n	80022a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002264:	4b4f      	ldr	r3, [pc, #316]	; (80023a4 <HAL_RCC_OscConfig+0x2b0>)
 8002266:	2201      	movs	r2, #1
 8002268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800226a:	f7fe fae1 	bl	8000830 <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002270:	e008      	b.n	8002284 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002272:	f7fe fadd 	bl	8000830 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e1a5      	b.n	80025d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002284:	4b46      	ldr	r3, [pc, #280]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d0f0      	beq.n	8002272 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002290:	4b43      	ldr	r3, [pc, #268]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	4940      	ldr	r1, [pc, #256]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	600b      	str	r3, [r1, #0]
 80022a4:	e015      	b.n	80022d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022a6:	4b3f      	ldr	r3, [pc, #252]	; (80023a4 <HAL_RCC_OscConfig+0x2b0>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ac:	f7fe fac0 	bl	8000830 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022b4:	f7fe fabc 	bl	8000830 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e184      	b.n	80025d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c6:	4b36      	ldr	r3, [pc, #216]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f0      	bne.n	80022b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0308 	and.w	r3, r3, #8
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d030      	beq.n	8002340 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d016      	beq.n	8002314 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022e6:	4b30      	ldr	r3, [pc, #192]	; (80023a8 <HAL_RCC_OscConfig+0x2b4>)
 80022e8:	2201      	movs	r2, #1
 80022ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ec:	f7fe faa0 	bl	8000830 <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022f4:	f7fe fa9c 	bl	8000830 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e164      	b.n	80025d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002306:	4b26      	ldr	r3, [pc, #152]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 8002308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0f0      	beq.n	80022f4 <HAL_RCC_OscConfig+0x200>
 8002312:	e015      	b.n	8002340 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002314:	4b24      	ldr	r3, [pc, #144]	; (80023a8 <HAL_RCC_OscConfig+0x2b4>)
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800231a:	f7fe fa89 	bl	8000830 <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002320:	e008      	b.n	8002334 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002322:	f7fe fa85 	bl	8000830 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e14d      	b.n	80025d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002334:	4b1a      	ldr	r3, [pc, #104]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 8002336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1f0      	bne.n	8002322 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0304 	and.w	r3, r3, #4
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 80a0 	beq.w	800248e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800234e:	2300      	movs	r3, #0
 8002350:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002352:	4b13      	ldr	r3, [pc, #76]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10f      	bne.n	800237e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	60bb      	str	r3, [r7, #8]
 8002362:	4b0f      	ldr	r3, [pc, #60]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	4a0e      	ldr	r2, [pc, #56]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 8002368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800236c:	6413      	str	r3, [r2, #64]	; 0x40
 800236e:	4b0c      	ldr	r3, [pc, #48]	; (80023a0 <HAL_RCC_OscConfig+0x2ac>)
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002376:	60bb      	str	r3, [r7, #8]
 8002378:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800237a:	2301      	movs	r3, #1
 800237c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800237e:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <HAL_RCC_OscConfig+0x2b8>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002386:	2b00      	cmp	r3, #0
 8002388:	d121      	bne.n	80023ce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800238a:	4b08      	ldr	r3, [pc, #32]	; (80023ac <HAL_RCC_OscConfig+0x2b8>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a07      	ldr	r2, [pc, #28]	; (80023ac <HAL_RCC_OscConfig+0x2b8>)
 8002390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002394:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002396:	f7fe fa4b 	bl	8000830 <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239c:	e011      	b.n	80023c2 <HAL_RCC_OscConfig+0x2ce>
 800239e:	bf00      	nop
 80023a0:	40023800 	.word	0x40023800
 80023a4:	42470000 	.word	0x42470000
 80023a8:	42470e80 	.word	0x42470e80
 80023ac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023b0:	f7fe fa3e 	bl	8000830 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e106      	b.n	80025d0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c2:	4b85      	ldr	r3, [pc, #532]	; (80025d8 <HAL_RCC_OscConfig+0x4e4>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d0f0      	beq.n	80023b0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d106      	bne.n	80023e4 <HAL_RCC_OscConfig+0x2f0>
 80023d6:	4b81      	ldr	r3, [pc, #516]	; (80025dc <HAL_RCC_OscConfig+0x4e8>)
 80023d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023da:	4a80      	ldr	r2, [pc, #512]	; (80025dc <HAL_RCC_OscConfig+0x4e8>)
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	6713      	str	r3, [r2, #112]	; 0x70
 80023e2:	e01c      	b.n	800241e <HAL_RCC_OscConfig+0x32a>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	2b05      	cmp	r3, #5
 80023ea:	d10c      	bne.n	8002406 <HAL_RCC_OscConfig+0x312>
 80023ec:	4b7b      	ldr	r3, [pc, #492]	; (80025dc <HAL_RCC_OscConfig+0x4e8>)
 80023ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f0:	4a7a      	ldr	r2, [pc, #488]	; (80025dc <HAL_RCC_OscConfig+0x4e8>)
 80023f2:	f043 0304 	orr.w	r3, r3, #4
 80023f6:	6713      	str	r3, [r2, #112]	; 0x70
 80023f8:	4b78      	ldr	r3, [pc, #480]	; (80025dc <HAL_RCC_OscConfig+0x4e8>)
 80023fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fc:	4a77      	ldr	r2, [pc, #476]	; (80025dc <HAL_RCC_OscConfig+0x4e8>)
 80023fe:	f043 0301 	orr.w	r3, r3, #1
 8002402:	6713      	str	r3, [r2, #112]	; 0x70
 8002404:	e00b      	b.n	800241e <HAL_RCC_OscConfig+0x32a>
 8002406:	4b75      	ldr	r3, [pc, #468]	; (80025dc <HAL_RCC_OscConfig+0x4e8>)
 8002408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800240a:	4a74      	ldr	r2, [pc, #464]	; (80025dc <HAL_RCC_OscConfig+0x4e8>)
 800240c:	f023 0301 	bic.w	r3, r3, #1
 8002410:	6713      	str	r3, [r2, #112]	; 0x70
 8002412:	4b72      	ldr	r3, [pc, #456]	; (80025dc <HAL_RCC_OscConfig+0x4e8>)
 8002414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002416:	4a71      	ldr	r2, [pc, #452]	; (80025dc <HAL_RCC_OscConfig+0x4e8>)
 8002418:	f023 0304 	bic.w	r3, r3, #4
 800241c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d015      	beq.n	8002452 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002426:	f7fe fa03 	bl	8000830 <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800242c:	e00a      	b.n	8002444 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800242e:	f7fe f9ff 	bl	8000830 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	f241 3288 	movw	r2, #5000	; 0x1388
 800243c:	4293      	cmp	r3, r2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e0c5      	b.n	80025d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002444:	4b65      	ldr	r3, [pc, #404]	; (80025dc <HAL_RCC_OscConfig+0x4e8>)
 8002446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0ee      	beq.n	800242e <HAL_RCC_OscConfig+0x33a>
 8002450:	e014      	b.n	800247c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002452:	f7fe f9ed 	bl	8000830 <HAL_GetTick>
 8002456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002458:	e00a      	b.n	8002470 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800245a:	f7fe f9e9 	bl	8000830 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	f241 3288 	movw	r2, #5000	; 0x1388
 8002468:	4293      	cmp	r3, r2
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e0af      	b.n	80025d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002470:	4b5a      	ldr	r3, [pc, #360]	; (80025dc <HAL_RCC_OscConfig+0x4e8>)
 8002472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1ee      	bne.n	800245a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800247c:	7dfb      	ldrb	r3, [r7, #23]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d105      	bne.n	800248e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002482:	4b56      	ldr	r3, [pc, #344]	; (80025dc <HAL_RCC_OscConfig+0x4e8>)
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	4a55      	ldr	r2, [pc, #340]	; (80025dc <HAL_RCC_OscConfig+0x4e8>)
 8002488:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800248c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	2b00      	cmp	r3, #0
 8002494:	f000 809b 	beq.w	80025ce <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002498:	4b50      	ldr	r3, [pc, #320]	; (80025dc <HAL_RCC_OscConfig+0x4e8>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f003 030c 	and.w	r3, r3, #12
 80024a0:	2b08      	cmp	r3, #8
 80024a2:	d05c      	beq.n	800255e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d141      	bne.n	8002530 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ac:	4b4c      	ldr	r3, [pc, #304]	; (80025e0 <HAL_RCC_OscConfig+0x4ec>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b2:	f7fe f9bd 	bl	8000830 <HAL_GetTick>
 80024b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024b8:	e008      	b.n	80024cc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ba:	f7fe f9b9 	bl	8000830 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e081      	b.n	80025d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024cc:	4b43      	ldr	r3, [pc, #268]	; (80025dc <HAL_RCC_OscConfig+0x4e8>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1f0      	bne.n	80024ba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	69da      	ldr	r2, [r3, #28]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	431a      	orrs	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e6:	019b      	lsls	r3, r3, #6
 80024e8:	431a      	orrs	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ee:	085b      	lsrs	r3, r3, #1
 80024f0:	3b01      	subs	r3, #1
 80024f2:	041b      	lsls	r3, r3, #16
 80024f4:	431a      	orrs	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fa:	061b      	lsls	r3, r3, #24
 80024fc:	4937      	ldr	r1, [pc, #220]	; (80025dc <HAL_RCC_OscConfig+0x4e8>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002502:	4b37      	ldr	r3, [pc, #220]	; (80025e0 <HAL_RCC_OscConfig+0x4ec>)
 8002504:	2201      	movs	r2, #1
 8002506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002508:	f7fe f992 	bl	8000830 <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002510:	f7fe f98e 	bl	8000830 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e056      	b.n	80025d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002522:	4b2e      	ldr	r3, [pc, #184]	; (80025dc <HAL_RCC_OscConfig+0x4e8>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d0f0      	beq.n	8002510 <HAL_RCC_OscConfig+0x41c>
 800252e:	e04e      	b.n	80025ce <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002530:	4b2b      	ldr	r3, [pc, #172]	; (80025e0 <HAL_RCC_OscConfig+0x4ec>)
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002536:	f7fe f97b 	bl	8000830 <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800253e:	f7fe f977 	bl	8000830 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e03f      	b.n	80025d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002550:	4b22      	ldr	r3, [pc, #136]	; (80025dc <HAL_RCC_OscConfig+0x4e8>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1f0      	bne.n	800253e <HAL_RCC_OscConfig+0x44a>
 800255c:	e037      	b.n	80025ce <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d101      	bne.n	800256a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e032      	b.n	80025d0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800256a:	4b1c      	ldr	r3, [pc, #112]	; (80025dc <HAL_RCC_OscConfig+0x4e8>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d028      	beq.n	80025ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002582:	429a      	cmp	r2, r3
 8002584:	d121      	bne.n	80025ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002590:	429a      	cmp	r2, r3
 8002592:	d11a      	bne.n	80025ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800259a:	4013      	ands	r3, r2
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025a0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d111      	bne.n	80025ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b0:	085b      	lsrs	r3, r3, #1
 80025b2:	3b01      	subs	r3, #1
 80025b4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d107      	bne.n	80025ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d001      	beq.n	80025ce <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e000      	b.n	80025d0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3718      	adds	r7, #24
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40007000 	.word	0x40007000
 80025dc:	40023800 	.word	0x40023800
 80025e0:	42470060 	.word	0x42470060

080025e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e0cc      	b.n	8002792 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025f8:	4b68      	ldr	r3, [pc, #416]	; (800279c <HAL_RCC_ClockConfig+0x1b8>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	429a      	cmp	r2, r3
 8002604:	d90c      	bls.n	8002620 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002606:	4b65      	ldr	r3, [pc, #404]	; (800279c <HAL_RCC_ClockConfig+0x1b8>)
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800260e:	4b63      	ldr	r3, [pc, #396]	; (800279c <HAL_RCC_ClockConfig+0x1b8>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	429a      	cmp	r2, r3
 800261a:	d001      	beq.n	8002620 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e0b8      	b.n	8002792 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d020      	beq.n	800266e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0304 	and.w	r3, r3, #4
 8002634:	2b00      	cmp	r3, #0
 8002636:	d005      	beq.n	8002644 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002638:	4b59      	ldr	r3, [pc, #356]	; (80027a0 <HAL_RCC_ClockConfig+0x1bc>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	4a58      	ldr	r2, [pc, #352]	; (80027a0 <HAL_RCC_ClockConfig+0x1bc>)
 800263e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002642:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0308 	and.w	r3, r3, #8
 800264c:	2b00      	cmp	r3, #0
 800264e:	d005      	beq.n	800265c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002650:	4b53      	ldr	r3, [pc, #332]	; (80027a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	4a52      	ldr	r2, [pc, #328]	; (80027a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002656:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800265a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800265c:	4b50      	ldr	r3, [pc, #320]	; (80027a0 <HAL_RCC_ClockConfig+0x1bc>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	494d      	ldr	r1, [pc, #308]	; (80027a0 <HAL_RCC_ClockConfig+0x1bc>)
 800266a:	4313      	orrs	r3, r2
 800266c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b00      	cmp	r3, #0
 8002678:	d044      	beq.n	8002704 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d107      	bne.n	8002692 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002682:	4b47      	ldr	r3, [pc, #284]	; (80027a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d119      	bne.n	80026c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e07f      	b.n	8002792 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	2b02      	cmp	r3, #2
 8002698:	d003      	beq.n	80026a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800269e:	2b03      	cmp	r3, #3
 80026a0:	d107      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026a2:	4b3f      	ldr	r3, [pc, #252]	; (80027a0 <HAL_RCC_ClockConfig+0x1bc>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d109      	bne.n	80026c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e06f      	b.n	8002792 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b2:	4b3b      	ldr	r3, [pc, #236]	; (80027a0 <HAL_RCC_ClockConfig+0x1bc>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e067      	b.n	8002792 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026c2:	4b37      	ldr	r3, [pc, #220]	; (80027a0 <HAL_RCC_ClockConfig+0x1bc>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f023 0203 	bic.w	r2, r3, #3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	4934      	ldr	r1, [pc, #208]	; (80027a0 <HAL_RCC_ClockConfig+0x1bc>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026d4:	f7fe f8ac 	bl	8000830 <HAL_GetTick>
 80026d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026da:	e00a      	b.n	80026f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026dc:	f7fe f8a8 	bl	8000830 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e04f      	b.n	8002792 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026f2:	4b2b      	ldr	r3, [pc, #172]	; (80027a0 <HAL_RCC_ClockConfig+0x1bc>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 020c 	and.w	r2, r3, #12
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	429a      	cmp	r2, r3
 8002702:	d1eb      	bne.n	80026dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002704:	4b25      	ldr	r3, [pc, #148]	; (800279c <HAL_RCC_ClockConfig+0x1b8>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	429a      	cmp	r2, r3
 8002710:	d20c      	bcs.n	800272c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002712:	4b22      	ldr	r3, [pc, #136]	; (800279c <HAL_RCC_ClockConfig+0x1b8>)
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800271a:	4b20      	ldr	r3, [pc, #128]	; (800279c <HAL_RCC_ClockConfig+0x1b8>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	429a      	cmp	r2, r3
 8002726:	d001      	beq.n	800272c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e032      	b.n	8002792 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	2b00      	cmp	r3, #0
 8002736:	d008      	beq.n	800274a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002738:	4b19      	ldr	r3, [pc, #100]	; (80027a0 <HAL_RCC_ClockConfig+0x1bc>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	4916      	ldr	r1, [pc, #88]	; (80027a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002746:	4313      	orrs	r3, r2
 8002748:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0308 	and.w	r3, r3, #8
 8002752:	2b00      	cmp	r3, #0
 8002754:	d009      	beq.n	800276a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002756:	4b12      	ldr	r3, [pc, #72]	; (80027a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	490e      	ldr	r1, [pc, #56]	; (80027a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002766:	4313      	orrs	r3, r2
 8002768:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800276a:	f000 f821 	bl	80027b0 <HAL_RCC_GetSysClockFreq>
 800276e:	4602      	mov	r2, r0
 8002770:	4b0b      	ldr	r3, [pc, #44]	; (80027a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	091b      	lsrs	r3, r3, #4
 8002776:	f003 030f 	and.w	r3, r3, #15
 800277a:	490a      	ldr	r1, [pc, #40]	; (80027a4 <HAL_RCC_ClockConfig+0x1c0>)
 800277c:	5ccb      	ldrb	r3, [r1, r3]
 800277e:	fa22 f303 	lsr.w	r3, r2, r3
 8002782:	4a09      	ldr	r2, [pc, #36]	; (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002784:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002786:	4b09      	ldr	r3, [pc, #36]	; (80027ac <HAL_RCC_ClockConfig+0x1c8>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	f7fe f80c 	bl	80007a8 <HAL_InitTick>

  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	40023c00 	.word	0x40023c00
 80027a0:	40023800 	.word	0x40023800
 80027a4:	080064e4 	.word	0x080064e4
 80027a8:	20000004 	.word	0x20000004
 80027ac:	20000008 	.word	0x20000008

080027b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80027b4:	b084      	sub	sp, #16
 80027b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	607b      	str	r3, [r7, #4]
 80027bc:	2300      	movs	r3, #0
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	2300      	movs	r3, #0
 80027c2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80027c4:	2300      	movs	r3, #0
 80027c6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027c8:	4b67      	ldr	r3, [pc, #412]	; (8002968 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f003 030c 	and.w	r3, r3, #12
 80027d0:	2b08      	cmp	r3, #8
 80027d2:	d00d      	beq.n	80027f0 <HAL_RCC_GetSysClockFreq+0x40>
 80027d4:	2b08      	cmp	r3, #8
 80027d6:	f200 80bd 	bhi.w	8002954 <HAL_RCC_GetSysClockFreq+0x1a4>
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d002      	beq.n	80027e4 <HAL_RCC_GetSysClockFreq+0x34>
 80027de:	2b04      	cmp	r3, #4
 80027e0:	d003      	beq.n	80027ea <HAL_RCC_GetSysClockFreq+0x3a>
 80027e2:	e0b7      	b.n	8002954 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027e4:	4b61      	ldr	r3, [pc, #388]	; (800296c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80027e6:	60bb      	str	r3, [r7, #8]
       break;
 80027e8:	e0b7      	b.n	800295a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027ea:	4b61      	ldr	r3, [pc, #388]	; (8002970 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80027ec:	60bb      	str	r3, [r7, #8]
      break;
 80027ee:	e0b4      	b.n	800295a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027f0:	4b5d      	ldr	r3, [pc, #372]	; (8002968 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027f8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027fa:	4b5b      	ldr	r3, [pc, #364]	; (8002968 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d04d      	beq.n	80028a2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002806:	4b58      	ldr	r3, [pc, #352]	; (8002968 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	099b      	lsrs	r3, r3, #6
 800280c:	461a      	mov	r2, r3
 800280e:	f04f 0300 	mov.w	r3, #0
 8002812:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002816:	f04f 0100 	mov.w	r1, #0
 800281a:	ea02 0800 	and.w	r8, r2, r0
 800281e:	ea03 0901 	and.w	r9, r3, r1
 8002822:	4640      	mov	r0, r8
 8002824:	4649      	mov	r1, r9
 8002826:	f04f 0200 	mov.w	r2, #0
 800282a:	f04f 0300 	mov.w	r3, #0
 800282e:	014b      	lsls	r3, r1, #5
 8002830:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002834:	0142      	lsls	r2, r0, #5
 8002836:	4610      	mov	r0, r2
 8002838:	4619      	mov	r1, r3
 800283a:	ebb0 0008 	subs.w	r0, r0, r8
 800283e:	eb61 0109 	sbc.w	r1, r1, r9
 8002842:	f04f 0200 	mov.w	r2, #0
 8002846:	f04f 0300 	mov.w	r3, #0
 800284a:	018b      	lsls	r3, r1, #6
 800284c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002850:	0182      	lsls	r2, r0, #6
 8002852:	1a12      	subs	r2, r2, r0
 8002854:	eb63 0301 	sbc.w	r3, r3, r1
 8002858:	f04f 0000 	mov.w	r0, #0
 800285c:	f04f 0100 	mov.w	r1, #0
 8002860:	00d9      	lsls	r1, r3, #3
 8002862:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002866:	00d0      	lsls	r0, r2, #3
 8002868:	4602      	mov	r2, r0
 800286a:	460b      	mov	r3, r1
 800286c:	eb12 0208 	adds.w	r2, r2, r8
 8002870:	eb43 0309 	adc.w	r3, r3, r9
 8002874:	f04f 0000 	mov.w	r0, #0
 8002878:	f04f 0100 	mov.w	r1, #0
 800287c:	0259      	lsls	r1, r3, #9
 800287e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002882:	0250      	lsls	r0, r2, #9
 8002884:	4602      	mov	r2, r0
 8002886:	460b      	mov	r3, r1
 8002888:	4610      	mov	r0, r2
 800288a:	4619      	mov	r1, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	461a      	mov	r2, r3
 8002890:	f04f 0300 	mov.w	r3, #0
 8002894:	f7fd fca0 	bl	80001d8 <__aeabi_uldivmod>
 8002898:	4602      	mov	r2, r0
 800289a:	460b      	mov	r3, r1
 800289c:	4613      	mov	r3, r2
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	e04a      	b.n	8002938 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028a2:	4b31      	ldr	r3, [pc, #196]	; (8002968 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	099b      	lsrs	r3, r3, #6
 80028a8:	461a      	mov	r2, r3
 80028aa:	f04f 0300 	mov.w	r3, #0
 80028ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80028b2:	f04f 0100 	mov.w	r1, #0
 80028b6:	ea02 0400 	and.w	r4, r2, r0
 80028ba:	ea03 0501 	and.w	r5, r3, r1
 80028be:	4620      	mov	r0, r4
 80028c0:	4629      	mov	r1, r5
 80028c2:	f04f 0200 	mov.w	r2, #0
 80028c6:	f04f 0300 	mov.w	r3, #0
 80028ca:	014b      	lsls	r3, r1, #5
 80028cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80028d0:	0142      	lsls	r2, r0, #5
 80028d2:	4610      	mov	r0, r2
 80028d4:	4619      	mov	r1, r3
 80028d6:	1b00      	subs	r0, r0, r4
 80028d8:	eb61 0105 	sbc.w	r1, r1, r5
 80028dc:	f04f 0200 	mov.w	r2, #0
 80028e0:	f04f 0300 	mov.w	r3, #0
 80028e4:	018b      	lsls	r3, r1, #6
 80028e6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80028ea:	0182      	lsls	r2, r0, #6
 80028ec:	1a12      	subs	r2, r2, r0
 80028ee:	eb63 0301 	sbc.w	r3, r3, r1
 80028f2:	f04f 0000 	mov.w	r0, #0
 80028f6:	f04f 0100 	mov.w	r1, #0
 80028fa:	00d9      	lsls	r1, r3, #3
 80028fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002900:	00d0      	lsls	r0, r2, #3
 8002902:	4602      	mov	r2, r0
 8002904:	460b      	mov	r3, r1
 8002906:	1912      	adds	r2, r2, r4
 8002908:	eb45 0303 	adc.w	r3, r5, r3
 800290c:	f04f 0000 	mov.w	r0, #0
 8002910:	f04f 0100 	mov.w	r1, #0
 8002914:	0299      	lsls	r1, r3, #10
 8002916:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800291a:	0290      	lsls	r0, r2, #10
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	4610      	mov	r0, r2
 8002922:	4619      	mov	r1, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	461a      	mov	r2, r3
 8002928:	f04f 0300 	mov.w	r3, #0
 800292c:	f7fd fc54 	bl	80001d8 <__aeabi_uldivmod>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4613      	mov	r3, r2
 8002936:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002938:	4b0b      	ldr	r3, [pc, #44]	; (8002968 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	0c1b      	lsrs	r3, r3, #16
 800293e:	f003 0303 	and.w	r3, r3, #3
 8002942:	3301      	adds	r3, #1
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002950:	60bb      	str	r3, [r7, #8]
      break;
 8002952:	e002      	b.n	800295a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002954:	4b05      	ldr	r3, [pc, #20]	; (800296c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002956:	60bb      	str	r3, [r7, #8]
      break;
 8002958:	bf00      	nop
    }
  }
  return sysclockfreq;
 800295a:	68bb      	ldr	r3, [r7, #8]
}
 800295c:	4618      	mov	r0, r3
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002966:	bf00      	nop
 8002968:	40023800 	.word	0x40023800
 800296c:	00f42400 	.word	0x00f42400
 8002970:	007a1200 	.word	0x007a1200

08002974 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002978:	4b03      	ldr	r3, [pc, #12]	; (8002988 <HAL_RCC_GetHCLKFreq+0x14>)
 800297a:	681b      	ldr	r3, [r3, #0]
}
 800297c:	4618      	mov	r0, r3
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	20000004 	.word	0x20000004

0800298c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800298c:	b084      	sub	sp, #16
 800298e:	b580      	push	{r7, lr}
 8002990:	b084      	sub	sp, #16
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
 8002996:	f107 001c 	add.w	r0, r7, #28
 800299a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800299e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d122      	bne.n	80029ea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80029b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80029cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d105      	bne.n	80029de <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f001 fb1c 	bl	800401c <USB_CoreReset>
 80029e4:	4603      	mov	r3, r0
 80029e6:	73fb      	strb	r3, [r7, #15]
 80029e8:	e01a      	b.n	8002a20 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f001 fb10 	bl	800401c <USB_CoreReset>
 80029fc:	4603      	mov	r3, r0
 80029fe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002a00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d106      	bne.n	8002a14 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	639a      	str	r2, [r3, #56]	; 0x38
 8002a12:	e005      	b.n	8002a20 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a18:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d10b      	bne.n	8002a3e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f043 0206 	orr.w	r2, r3, #6
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f043 0220 	orr.w	r2, r3, #32
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002a4a:	b004      	add	sp, #16
 8002a4c:	4770      	bx	lr
	...

08002a50 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b087      	sub	sp, #28
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002a5e:	79fb      	ldrb	r3, [r7, #7]
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d165      	bne.n	8002b30 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	4a41      	ldr	r2, [pc, #260]	; (8002b6c <USB_SetTurnaroundTime+0x11c>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d906      	bls.n	8002a7a <USB_SetTurnaroundTime+0x2a>
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	4a40      	ldr	r2, [pc, #256]	; (8002b70 <USB_SetTurnaroundTime+0x120>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d202      	bcs.n	8002a7a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002a74:	230f      	movs	r3, #15
 8002a76:	617b      	str	r3, [r7, #20]
 8002a78:	e062      	b.n	8002b40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	4a3c      	ldr	r2, [pc, #240]	; (8002b70 <USB_SetTurnaroundTime+0x120>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d306      	bcc.n	8002a90 <USB_SetTurnaroundTime+0x40>
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	4a3b      	ldr	r2, [pc, #236]	; (8002b74 <USB_SetTurnaroundTime+0x124>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d202      	bcs.n	8002a90 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002a8a:	230e      	movs	r3, #14
 8002a8c:	617b      	str	r3, [r7, #20]
 8002a8e:	e057      	b.n	8002b40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	4a38      	ldr	r2, [pc, #224]	; (8002b74 <USB_SetTurnaroundTime+0x124>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d306      	bcc.n	8002aa6 <USB_SetTurnaroundTime+0x56>
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	4a37      	ldr	r2, [pc, #220]	; (8002b78 <USB_SetTurnaroundTime+0x128>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d202      	bcs.n	8002aa6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002aa0:	230d      	movs	r3, #13
 8002aa2:	617b      	str	r3, [r7, #20]
 8002aa4:	e04c      	b.n	8002b40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	4a33      	ldr	r2, [pc, #204]	; (8002b78 <USB_SetTurnaroundTime+0x128>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d306      	bcc.n	8002abc <USB_SetTurnaroundTime+0x6c>
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	4a32      	ldr	r2, [pc, #200]	; (8002b7c <USB_SetTurnaroundTime+0x12c>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d802      	bhi.n	8002abc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002ab6:	230c      	movs	r3, #12
 8002ab8:	617b      	str	r3, [r7, #20]
 8002aba:	e041      	b.n	8002b40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	4a2f      	ldr	r2, [pc, #188]	; (8002b7c <USB_SetTurnaroundTime+0x12c>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d906      	bls.n	8002ad2 <USB_SetTurnaroundTime+0x82>
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	4a2e      	ldr	r2, [pc, #184]	; (8002b80 <USB_SetTurnaroundTime+0x130>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d802      	bhi.n	8002ad2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002acc:	230b      	movs	r3, #11
 8002ace:	617b      	str	r3, [r7, #20]
 8002ad0:	e036      	b.n	8002b40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	4a2a      	ldr	r2, [pc, #168]	; (8002b80 <USB_SetTurnaroundTime+0x130>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d906      	bls.n	8002ae8 <USB_SetTurnaroundTime+0x98>
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	4a29      	ldr	r2, [pc, #164]	; (8002b84 <USB_SetTurnaroundTime+0x134>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d802      	bhi.n	8002ae8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002ae2:	230a      	movs	r3, #10
 8002ae4:	617b      	str	r3, [r7, #20]
 8002ae6:	e02b      	b.n	8002b40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	4a26      	ldr	r2, [pc, #152]	; (8002b84 <USB_SetTurnaroundTime+0x134>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d906      	bls.n	8002afe <USB_SetTurnaroundTime+0xae>
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	4a25      	ldr	r2, [pc, #148]	; (8002b88 <USB_SetTurnaroundTime+0x138>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d202      	bcs.n	8002afe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002af8:	2309      	movs	r3, #9
 8002afa:	617b      	str	r3, [r7, #20]
 8002afc:	e020      	b.n	8002b40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	4a21      	ldr	r2, [pc, #132]	; (8002b88 <USB_SetTurnaroundTime+0x138>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d306      	bcc.n	8002b14 <USB_SetTurnaroundTime+0xc4>
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	4a20      	ldr	r2, [pc, #128]	; (8002b8c <USB_SetTurnaroundTime+0x13c>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d802      	bhi.n	8002b14 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002b0e:	2308      	movs	r3, #8
 8002b10:	617b      	str	r3, [r7, #20]
 8002b12:	e015      	b.n	8002b40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	4a1d      	ldr	r2, [pc, #116]	; (8002b8c <USB_SetTurnaroundTime+0x13c>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d906      	bls.n	8002b2a <USB_SetTurnaroundTime+0xda>
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	4a1c      	ldr	r2, [pc, #112]	; (8002b90 <USB_SetTurnaroundTime+0x140>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d202      	bcs.n	8002b2a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002b24:	2307      	movs	r3, #7
 8002b26:	617b      	str	r3, [r7, #20]
 8002b28:	e00a      	b.n	8002b40 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002b2a:	2306      	movs	r3, #6
 8002b2c:	617b      	str	r3, [r7, #20]
 8002b2e:	e007      	b.n	8002b40 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002b30:	79fb      	ldrb	r3, [r7, #7]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d102      	bne.n	8002b3c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002b36:	2309      	movs	r3, #9
 8002b38:	617b      	str	r3, [r7, #20]
 8002b3a:	e001      	b.n	8002b40 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002b3c:	2309      	movs	r3, #9
 8002b3e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	68da      	ldr	r2, [r3, #12]
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	029b      	lsls	r3, r3, #10
 8002b54:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	371c      	adds	r7, #28
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	00d8acbf 	.word	0x00d8acbf
 8002b70:	00e4e1c0 	.word	0x00e4e1c0
 8002b74:	00f42400 	.word	0x00f42400
 8002b78:	01067380 	.word	0x01067380
 8002b7c:	011a499f 	.word	0x011a499f
 8002b80:	01312cff 	.word	0x01312cff
 8002b84:	014ca43f 	.word	0x014ca43f
 8002b88:	016e3600 	.word	0x016e3600
 8002b8c:	01a6ab1f 	.word	0x01a6ab1f
 8002b90:	01e84800 	.word	0x01e84800

08002b94 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f043 0201 	orr.w	r2, r3, #1
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b083      	sub	sp, #12
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f023 0201 	bic.w	r2, r3, #1
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	460b      	mov	r3, r1
 8002be2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002be4:	2300      	movs	r3, #0
 8002be6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002bf4:	78fb      	ldrb	r3, [r7, #3]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d115      	bne.n	8002c26 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002c06:	2001      	movs	r0, #1
 8002c08:	f7fd fe1e 	bl	8000848 <HAL_Delay>
      ms++;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	3301      	adds	r3, #1
 8002c10:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f001 f972 	bl	8003efc <USB_GetMode>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d01e      	beq.n	8002c5c <USB_SetCurrentMode+0x84>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2b31      	cmp	r3, #49	; 0x31
 8002c22:	d9f0      	bls.n	8002c06 <USB_SetCurrentMode+0x2e>
 8002c24:	e01a      	b.n	8002c5c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002c26:	78fb      	ldrb	r3, [r7, #3]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d115      	bne.n	8002c58 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002c38:	2001      	movs	r0, #1
 8002c3a:	f7fd fe05 	bl	8000848 <HAL_Delay>
      ms++;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	3301      	adds	r3, #1
 8002c42:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f001 f959 	bl	8003efc <USB_GetMode>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d005      	beq.n	8002c5c <USB_SetCurrentMode+0x84>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2b31      	cmp	r3, #49	; 0x31
 8002c54:	d9f0      	bls.n	8002c38 <USB_SetCurrentMode+0x60>
 8002c56:	e001      	b.n	8002c5c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e005      	b.n	8002c68 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2b32      	cmp	r3, #50	; 0x32
 8002c60:	d101      	bne.n	8002c66 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e000      	b.n	8002c68 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002c70:	b084      	sub	sp, #16
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b086      	sub	sp, #24
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
 8002c7a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002c7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002c82:	2300      	movs	r3, #0
 8002c84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	613b      	str	r3, [r7, #16]
 8002c8e:	e009      	b.n	8002ca4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	3340      	adds	r3, #64	; 0x40
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4413      	add	r3, r2
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	613b      	str	r3, [r7, #16]
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	2b0e      	cmp	r3, #14
 8002ca8:	d9f2      	bls.n	8002c90 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d11c      	bne.n	8002cea <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cbe:	f043 0302 	orr.w	r3, r3, #2
 8002cc2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	639a      	str	r2, [r3, #56]	; 0x38
 8002ce8:	e00b      	b.n	8002d02 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cee:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002d08:	461a      	mov	r2, r3
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d14:	4619      	mov	r1, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	680b      	ldr	r3, [r1, #0]
 8002d20:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d10c      	bne.n	8002d42 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d104      	bne.n	8002d38 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002d2e:	2100      	movs	r1, #0
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 f945 	bl	8002fc0 <USB_SetDevSpeed>
 8002d36:	e008      	b.n	8002d4a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002d38:	2101      	movs	r1, #1
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 f940 	bl	8002fc0 <USB_SetDevSpeed>
 8002d40:	e003      	b.n	8002d4a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002d42:	2103      	movs	r1, #3
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 f93b 	bl	8002fc0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002d4a:	2110      	movs	r1, #16
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 f8f3 	bl	8002f38 <USB_FlushTxFifo>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 f90f 	bl	8002f80 <USB_FlushRxFifo>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d72:	461a      	mov	r2, r3
 8002d74:	2300      	movs	r3, #0
 8002d76:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d7e:	461a      	mov	r2, r3
 8002d80:	2300      	movs	r3, #0
 8002d82:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002d90:	2300      	movs	r3, #0
 8002d92:	613b      	str	r3, [r7, #16]
 8002d94:	e043      	b.n	8002e1e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	015a      	lsls	r2, r3, #5
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002da8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002dac:	d118      	bne.n	8002de0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10a      	bne.n	8002dca <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	015a      	lsls	r2, r3, #5
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	4413      	add	r3, r2
 8002dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002dc6:	6013      	str	r3, [r2, #0]
 8002dc8:	e013      	b.n	8002df2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	015a      	lsls	r2, r3, #5
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002ddc:	6013      	str	r3, [r2, #0]
 8002dde:	e008      	b.n	8002df2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	015a      	lsls	r2, r3, #5
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	4413      	add	r3, r2
 8002de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dec:	461a      	mov	r2, r3
 8002dee:	2300      	movs	r3, #0
 8002df0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	015a      	lsls	r2, r3, #5
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	4413      	add	r3, r2
 8002dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dfe:	461a      	mov	r2, r3
 8002e00:	2300      	movs	r3, #0
 8002e02:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	015a      	lsls	r2, r3, #5
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e10:	461a      	mov	r2, r3
 8002e12:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e16:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	613b      	str	r3, [r7, #16]
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d3b7      	bcc.n	8002d96 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e26:	2300      	movs	r3, #0
 8002e28:	613b      	str	r3, [r7, #16]
 8002e2a:	e043      	b.n	8002eb4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	015a      	lsls	r2, r3, #5
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4413      	add	r3, r2
 8002e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e42:	d118      	bne.n	8002e76 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10a      	bne.n	8002e60 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	015a      	lsls	r2, r3, #5
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4413      	add	r3, r2
 8002e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e56:	461a      	mov	r2, r3
 8002e58:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e5c:	6013      	str	r3, [r2, #0]
 8002e5e:	e013      	b.n	8002e88 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	015a      	lsls	r2, r3, #5
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	4413      	add	r3, r2
 8002e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002e72:	6013      	str	r3, [r2, #0]
 8002e74:	e008      	b.n	8002e88 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	015a      	lsls	r2, r3, #5
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e82:	461a      	mov	r2, r3
 8002e84:	2300      	movs	r3, #0
 8002e86:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	015a      	lsls	r2, r3, #5
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	4413      	add	r3, r2
 8002e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e94:	461a      	mov	r2, r3
 8002e96:	2300      	movs	r3, #0
 8002e98:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	015a      	lsls	r2, r3, #5
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002eac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	613b      	str	r3, [r7, #16]
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d3b7      	bcc.n	8002e2c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002eca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ece:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002edc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d105      	bne.n	8002ef0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	f043 0210 	orr.w	r2, r3, #16
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	699a      	ldr	r2, [r3, #24]
 8002ef4:	4b0f      	ldr	r3, [pc, #60]	; (8002f34 <USB_DevInit+0x2c4>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d005      	beq.n	8002f0e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	f043 0208 	orr.w	r2, r3, #8
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002f0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d107      	bne.n	8002f24 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002f1c:	f043 0304 	orr.w	r3, r3, #4
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002f24:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3718      	adds	r7, #24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f30:	b004      	add	sp, #16
 8002f32:	4770      	bx	lr
 8002f34:	803c3800 	.word	0x803c3800

08002f38 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002f42:	2300      	movs	r3, #0
 8002f44:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	019b      	lsls	r3, r3, #6
 8002f4a:	f043 0220 	orr.w	r2, r3, #32
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	3301      	adds	r3, #1
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	4a08      	ldr	r2, [pc, #32]	; (8002f7c <USB_FlushTxFifo+0x44>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d901      	bls.n	8002f62 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e006      	b.n	8002f70 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	f003 0320 	and.w	r3, r3, #32
 8002f6a:	2b20      	cmp	r3, #32
 8002f6c:	d0f1      	beq.n	8002f52 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	00030d40 	.word	0x00030d40

08002f80 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2210      	movs	r2, #16
 8002f90:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	3301      	adds	r3, #1
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	4a08      	ldr	r2, [pc, #32]	; (8002fbc <USB_FlushRxFifo+0x3c>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d901      	bls.n	8002fa2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e006      	b.n	8002fb0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	f003 0310 	and.w	r3, r3, #16
 8002faa:	2b10      	cmp	r3, #16
 8002fac:	d0f1      	beq.n	8002f92 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3714      	adds	r7, #20
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr
 8002fbc:	00030d40 	.word	0x00030d40

08002fc0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	460b      	mov	r3, r1
 8002fca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	78fb      	ldrb	r3, [r7, #3]
 8002fda:	68f9      	ldr	r1, [r7, #12]
 8002fdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3714      	adds	r7, #20
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr

08002ff2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b087      	sub	sp, #28
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 0306 	and.w	r3, r3, #6
 800300a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d102      	bne.n	8003018 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003012:	2300      	movs	r3, #0
 8003014:	75fb      	strb	r3, [r7, #23]
 8003016:	e00a      	b.n	800302e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2b02      	cmp	r3, #2
 800301c:	d002      	beq.n	8003024 <USB_GetDevSpeed+0x32>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2b06      	cmp	r3, #6
 8003022:	d102      	bne.n	800302a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003024:	2302      	movs	r3, #2
 8003026:	75fb      	strb	r3, [r7, #23]
 8003028:	e001      	b.n	800302e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800302a:	230f      	movs	r3, #15
 800302c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800302e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003030:	4618      	mov	r0, r3
 8003032:	371c      	adds	r7, #28
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	785b      	ldrb	r3, [r3, #1]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d13a      	bne.n	80030ce <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800305e:	69da      	ldr	r2, [r3, #28]
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	f003 030f 	and.w	r3, r3, #15
 8003068:	2101      	movs	r1, #1
 800306a:	fa01 f303 	lsl.w	r3, r1, r3
 800306e:	b29b      	uxth	r3, r3
 8003070:	68f9      	ldr	r1, [r7, #12]
 8003072:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003076:	4313      	orrs	r3, r2
 8003078:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	015a      	lsls	r2, r3, #5
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	4413      	add	r3, r2
 8003082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d155      	bne.n	800313c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	015a      	lsls	r2, r3, #5
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	4413      	add	r3, r2
 8003098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	78db      	ldrb	r3, [r3, #3]
 80030aa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80030ac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	059b      	lsls	r3, r3, #22
 80030b2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80030b4:	4313      	orrs	r3, r2
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	0151      	lsls	r1, r2, #5
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	440a      	add	r2, r1
 80030be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80030c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030ca:	6013      	str	r3, [r2, #0]
 80030cc:	e036      	b.n	800313c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030d4:	69da      	ldr	r2, [r3, #28]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	f003 030f 	and.w	r3, r3, #15
 80030de:	2101      	movs	r1, #1
 80030e0:	fa01 f303 	lsl.w	r3, r1, r3
 80030e4:	041b      	lsls	r3, r3, #16
 80030e6:	68f9      	ldr	r1, [r7, #12]
 80030e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030ec:	4313      	orrs	r3, r2
 80030ee:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	015a      	lsls	r2, r3, #5
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	4413      	add	r3, r2
 80030f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d11a      	bne.n	800313c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	015a      	lsls	r2, r3, #5
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	4413      	add	r3, r2
 800310e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	78db      	ldrb	r3, [r3, #3]
 8003120:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003122:	430b      	orrs	r3, r1
 8003124:	4313      	orrs	r3, r2
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	0151      	lsls	r1, r2, #5
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	440a      	add	r2, r1
 800312e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003132:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003136:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800313a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3714      	adds	r7, #20
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
	...

0800314c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	785b      	ldrb	r3, [r3, #1]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d161      	bne.n	800322c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	015a      	lsls	r2, r3, #5
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4413      	add	r3, r2
 8003170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800317a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800317e:	d11f      	bne.n	80031c0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	015a      	lsls	r2, r3, #5
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4413      	add	r3, r2
 8003188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	0151      	lsls	r1, r2, #5
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	440a      	add	r2, r1
 8003196:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800319a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800319e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	015a      	lsls	r2, r3, #5
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	4413      	add	r3, r2
 80031a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68ba      	ldr	r2, [r7, #8]
 80031b0:	0151      	lsls	r1, r2, #5
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	440a      	add	r2, r1
 80031b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80031ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80031be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	f003 030f 	and.w	r3, r3, #15
 80031d0:	2101      	movs	r1, #1
 80031d2:	fa01 f303 	lsl.w	r3, r1, r3
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	43db      	mvns	r3, r3
 80031da:	68f9      	ldr	r1, [r7, #12]
 80031dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031e0:	4013      	ands	r3, r2
 80031e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031ea:	69da      	ldr	r2, [r3, #28]
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	f003 030f 	and.w	r3, r3, #15
 80031f4:	2101      	movs	r1, #1
 80031f6:	fa01 f303 	lsl.w	r3, r1, r3
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	43db      	mvns	r3, r3
 80031fe:	68f9      	ldr	r1, [r7, #12]
 8003200:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003204:	4013      	ands	r3, r2
 8003206:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	015a      	lsls	r2, r3, #5
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	4413      	add	r3, r2
 8003210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	0159      	lsls	r1, r3, #5
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	440b      	add	r3, r1
 800321e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003222:	4619      	mov	r1, r3
 8003224:	4b35      	ldr	r3, [pc, #212]	; (80032fc <USB_DeactivateEndpoint+0x1b0>)
 8003226:	4013      	ands	r3, r2
 8003228:	600b      	str	r3, [r1, #0]
 800322a:	e060      	b.n	80032ee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	015a      	lsls	r2, r3, #5
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	4413      	add	r3, r2
 8003234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800323e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003242:	d11f      	bne.n	8003284 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	015a      	lsls	r2, r3, #5
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4413      	add	r3, r2
 800324c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	0151      	lsls	r1, r2, #5
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	440a      	add	r2, r1
 800325a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800325e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003262:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	015a      	lsls	r2, r3, #5
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	4413      	add	r3, r2
 800326c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68ba      	ldr	r2, [r7, #8]
 8003274:	0151      	lsls	r1, r2, #5
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	440a      	add	r2, r1
 800327a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800327e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003282:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800328a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	f003 030f 	and.w	r3, r3, #15
 8003294:	2101      	movs	r1, #1
 8003296:	fa01 f303 	lsl.w	r3, r1, r3
 800329a:	041b      	lsls	r3, r3, #16
 800329c:	43db      	mvns	r3, r3
 800329e:	68f9      	ldr	r1, [r7, #12]
 80032a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032a4:	4013      	ands	r3, r2
 80032a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ae:	69da      	ldr	r2, [r3, #28]
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	f003 030f 	and.w	r3, r3, #15
 80032b8:	2101      	movs	r1, #1
 80032ba:	fa01 f303 	lsl.w	r3, r1, r3
 80032be:	041b      	lsls	r3, r3, #16
 80032c0:	43db      	mvns	r3, r3
 80032c2:	68f9      	ldr	r1, [r7, #12]
 80032c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032c8:	4013      	ands	r3, r2
 80032ca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	015a      	lsls	r2, r3, #5
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	4413      	add	r3, r2
 80032d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	0159      	lsls	r1, r3, #5
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	440b      	add	r3, r1
 80032e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032e6:	4619      	mov	r1, r3
 80032e8:	4b05      	ldr	r3, [pc, #20]	; (8003300 <USB_DeactivateEndpoint+0x1b4>)
 80032ea:	4013      	ands	r3, r2
 80032ec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3714      	adds	r7, #20
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr
 80032fc:	ec337800 	.word	0xec337800
 8003300:	eff37800 	.word	0xeff37800

08003304 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b08a      	sub	sp, #40	; 0x28
 8003308:	af02      	add	r7, sp, #8
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	4613      	mov	r3, r2
 8003310:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	785b      	ldrb	r3, [r3, #1]
 8003320:	2b01      	cmp	r3, #1
 8003322:	f040 815c 	bne.w	80035de <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d132      	bne.n	8003394 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	015a      	lsls	r2, r3, #5
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	4413      	add	r3, r2
 8003336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	0151      	lsls	r1, r2, #5
 8003340:	69fa      	ldr	r2, [r7, #28]
 8003342:	440a      	add	r2, r1
 8003344:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003348:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800334c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003350:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	015a      	lsls	r2, r3, #5
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	4413      	add	r3, r2
 800335a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	0151      	lsls	r1, r2, #5
 8003364:	69fa      	ldr	r2, [r7, #28]
 8003366:	440a      	add	r2, r1
 8003368:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800336c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003370:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	015a      	lsls	r2, r3, #5
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	4413      	add	r3, r2
 800337a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	0151      	lsls	r1, r2, #5
 8003384:	69fa      	ldr	r2, [r7, #28]
 8003386:	440a      	add	r2, r1
 8003388:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800338c:	0cdb      	lsrs	r3, r3, #19
 800338e:	04db      	lsls	r3, r3, #19
 8003390:	6113      	str	r3, [r2, #16]
 8003392:	e074      	b.n	800347e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	015a      	lsls	r2, r3, #5
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	4413      	add	r3, r2
 800339c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	0151      	lsls	r1, r2, #5
 80033a6:	69fa      	ldr	r2, [r7, #28]
 80033a8:	440a      	add	r2, r1
 80033aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033ae:	0cdb      	lsrs	r3, r3, #19
 80033b0:	04db      	lsls	r3, r3, #19
 80033b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	015a      	lsls	r2, r3, #5
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	4413      	add	r3, r2
 80033bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	0151      	lsls	r1, r2, #5
 80033c6:	69fa      	ldr	r2, [r7, #28]
 80033c8:	440a      	add	r2, r1
 80033ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033ce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80033d2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80033d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	015a      	lsls	r2, r3, #5
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	4413      	add	r3, r2
 80033e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033e4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	6959      	ldr	r1, [r3, #20]
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	440b      	add	r3, r1
 80033f0:	1e59      	subs	r1, r3, #1
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80033fa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80033fc:	4b9d      	ldr	r3, [pc, #628]	; (8003674 <USB_EPStartXfer+0x370>)
 80033fe:	400b      	ands	r3, r1
 8003400:	69b9      	ldr	r1, [r7, #24]
 8003402:	0148      	lsls	r0, r1, #5
 8003404:	69f9      	ldr	r1, [r7, #28]
 8003406:	4401      	add	r1, r0
 8003408:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800340c:	4313      	orrs	r3, r2
 800340e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	015a      	lsls	r2, r3, #5
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	4413      	add	r3, r2
 8003418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800341c:	691a      	ldr	r2, [r3, #16]
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003426:	69b9      	ldr	r1, [r7, #24]
 8003428:	0148      	lsls	r0, r1, #5
 800342a:	69f9      	ldr	r1, [r7, #28]
 800342c:	4401      	add	r1, r0
 800342e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003432:	4313      	orrs	r3, r2
 8003434:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	78db      	ldrb	r3, [r3, #3]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d11f      	bne.n	800347e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	015a      	lsls	r2, r3, #5
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	4413      	add	r3, r2
 8003446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	0151      	lsls	r1, r2, #5
 8003450:	69fa      	ldr	r2, [r7, #28]
 8003452:	440a      	add	r2, r1
 8003454:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003458:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800345c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	015a      	lsls	r2, r3, #5
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	4413      	add	r3, r2
 8003466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	0151      	lsls	r1, r2, #5
 8003470:	69fa      	ldr	r2, [r7, #28]
 8003472:	440a      	add	r2, r1
 8003474:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003478:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800347c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800347e:	79fb      	ldrb	r3, [r7, #7]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d14b      	bne.n	800351c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d009      	beq.n	80034a0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	015a      	lsls	r2, r3, #5
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	4413      	add	r3, r2
 8003494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003498:	461a      	mov	r2, r3
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	78db      	ldrb	r3, [r3, #3]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d128      	bne.n	80034fa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d110      	bne.n	80034da <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	015a      	lsls	r2, r3, #5
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	4413      	add	r3, r2
 80034c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	0151      	lsls	r1, r2, #5
 80034ca:	69fa      	ldr	r2, [r7, #28]
 80034cc:	440a      	add	r2, r1
 80034ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80034d6:	6013      	str	r3, [r2, #0]
 80034d8:	e00f      	b.n	80034fa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	015a      	lsls	r2, r3, #5
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	4413      	add	r3, r2
 80034e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	0151      	lsls	r1, r2, #5
 80034ec:	69fa      	ldr	r2, [r7, #28]
 80034ee:	440a      	add	r2, r1
 80034f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034f8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	015a      	lsls	r2, r3, #5
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	4413      	add	r3, r2
 8003502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	0151      	lsls	r1, r2, #5
 800350c:	69fa      	ldr	r2, [r7, #28]
 800350e:	440a      	add	r2, r1
 8003510:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003514:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003518:	6013      	str	r3, [r2, #0]
 800351a:	e12f      	b.n	800377c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	015a      	lsls	r2, r3, #5
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	4413      	add	r3, r2
 8003524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	69ba      	ldr	r2, [r7, #24]
 800352c:	0151      	lsls	r1, r2, #5
 800352e:	69fa      	ldr	r2, [r7, #28]
 8003530:	440a      	add	r2, r1
 8003532:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003536:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800353a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	78db      	ldrb	r3, [r3, #3]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d015      	beq.n	8003570 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	2b00      	cmp	r3, #0
 800354a:	f000 8117 	beq.w	800377c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003554:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	f003 030f 	and.w	r3, r3, #15
 800355e:	2101      	movs	r1, #1
 8003560:	fa01 f303 	lsl.w	r3, r1, r3
 8003564:	69f9      	ldr	r1, [r7, #28]
 8003566:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800356a:	4313      	orrs	r3, r2
 800356c:	634b      	str	r3, [r1, #52]	; 0x34
 800356e:	e105      	b.n	800377c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357c:	2b00      	cmp	r3, #0
 800357e:	d110      	bne.n	80035a2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	015a      	lsls	r2, r3, #5
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	4413      	add	r3, r2
 8003588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	0151      	lsls	r1, r2, #5
 8003592:	69fa      	ldr	r2, [r7, #28]
 8003594:	440a      	add	r2, r1
 8003596:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800359a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800359e:	6013      	str	r3, [r2, #0]
 80035a0:	e00f      	b.n	80035c2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	015a      	lsls	r2, r3, #5
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	4413      	add	r3, r2
 80035aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	0151      	lsls	r1, r2, #5
 80035b4:	69fa      	ldr	r2, [r7, #28]
 80035b6:	440a      	add	r2, r1
 80035b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035c0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	68d9      	ldr	r1, [r3, #12]
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	781a      	ldrb	r2, [r3, #0]
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	b298      	uxth	r0, r3
 80035d0:	79fb      	ldrb	r3, [r7, #7]
 80035d2:	9300      	str	r3, [sp, #0]
 80035d4:	4603      	mov	r3, r0
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f000 fa2b 	bl	8003a32 <USB_WritePacket>
 80035dc:	e0ce      	b.n	800377c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	015a      	lsls	r2, r3, #5
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	4413      	add	r3, r2
 80035e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	0151      	lsls	r1, r2, #5
 80035f0:	69fa      	ldr	r2, [r7, #28]
 80035f2:	440a      	add	r2, r1
 80035f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035f8:	0cdb      	lsrs	r3, r3, #19
 80035fa:	04db      	lsls	r3, r3, #19
 80035fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	015a      	lsls	r2, r3, #5
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	4413      	add	r3, r2
 8003606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	0151      	lsls	r1, r2, #5
 8003610:	69fa      	ldr	r2, [r7, #28]
 8003612:	440a      	add	r2, r1
 8003614:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003618:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800361c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003620:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d126      	bne.n	8003678 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	015a      	lsls	r2, r3, #5
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	4413      	add	r3, r2
 8003632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003636:	691a      	ldr	r2, [r3, #16]
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003640:	69b9      	ldr	r1, [r7, #24]
 8003642:	0148      	lsls	r0, r1, #5
 8003644:	69f9      	ldr	r1, [r7, #28]
 8003646:	4401      	add	r1, r0
 8003648:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800364c:	4313      	orrs	r3, r2
 800364e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	015a      	lsls	r2, r3, #5
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	4413      	add	r3, r2
 8003658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	0151      	lsls	r1, r2, #5
 8003662:	69fa      	ldr	r2, [r7, #28]
 8003664:	440a      	add	r2, r1
 8003666:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800366a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800366e:	6113      	str	r3, [r2, #16]
 8003670:	e036      	b.n	80036e0 <USB_EPStartXfer+0x3dc>
 8003672:	bf00      	nop
 8003674:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	695a      	ldr	r2, [r3, #20]
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	4413      	add	r3, r2
 8003682:	1e5a      	subs	r2, r3, #1
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	fbb2 f3f3 	udiv	r3, r2, r3
 800368c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	015a      	lsls	r2, r3, #5
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	4413      	add	r3, r2
 8003696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800369a:	691a      	ldr	r2, [r3, #16]
 800369c:	8afb      	ldrh	r3, [r7, #22]
 800369e:	04d9      	lsls	r1, r3, #19
 80036a0:	4b39      	ldr	r3, [pc, #228]	; (8003788 <USB_EPStartXfer+0x484>)
 80036a2:	400b      	ands	r3, r1
 80036a4:	69b9      	ldr	r1, [r7, #24]
 80036a6:	0148      	lsls	r0, r1, #5
 80036a8:	69f9      	ldr	r1, [r7, #28]
 80036aa:	4401      	add	r1, r0
 80036ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80036b0:	4313      	orrs	r3, r2
 80036b2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	015a      	lsls	r2, r3, #5
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	4413      	add	r3, r2
 80036bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036c0:	691a      	ldr	r2, [r3, #16]
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	8af9      	ldrh	r1, [r7, #22]
 80036c8:	fb01 f303 	mul.w	r3, r1, r3
 80036cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036d0:	69b9      	ldr	r1, [r7, #24]
 80036d2:	0148      	lsls	r0, r1, #5
 80036d4:	69f9      	ldr	r1, [r7, #28]
 80036d6:	4401      	add	r1, r0
 80036d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80036dc:	4313      	orrs	r3, r2
 80036de:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80036e0:	79fb      	ldrb	r3, [r7, #7]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d10d      	bne.n	8003702 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d009      	beq.n	8003702 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	68d9      	ldr	r1, [r3, #12]
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	015a      	lsls	r2, r3, #5
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	4413      	add	r3, r2
 80036fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036fe:	460a      	mov	r2, r1
 8003700:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	78db      	ldrb	r3, [r3, #3]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d128      	bne.n	800375c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003716:	2b00      	cmp	r3, #0
 8003718:	d110      	bne.n	800373c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	015a      	lsls	r2, r3, #5
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	4413      	add	r3, r2
 8003722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	0151      	lsls	r1, r2, #5
 800372c:	69fa      	ldr	r2, [r7, #28]
 800372e:	440a      	add	r2, r1
 8003730:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003734:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003738:	6013      	str	r3, [r2, #0]
 800373a:	e00f      	b.n	800375c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	015a      	lsls	r2, r3, #5
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	4413      	add	r3, r2
 8003744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	0151      	lsls	r1, r2, #5
 800374e:	69fa      	ldr	r2, [r7, #28]
 8003750:	440a      	add	r2, r1
 8003752:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800375a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	015a      	lsls	r2, r3, #5
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	4413      	add	r3, r2
 8003764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	0151      	lsls	r1, r2, #5
 800376e:	69fa      	ldr	r2, [r7, #28]
 8003770:	440a      	add	r2, r1
 8003772:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003776:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800377a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3720      	adds	r7, #32
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	1ff80000 	.word	0x1ff80000

0800378c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800378c:	b480      	push	{r7}
 800378e:	b087      	sub	sp, #28
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	4613      	mov	r3, r2
 8003798:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	785b      	ldrb	r3, [r3, #1]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	f040 80cd 	bne.w	8003948 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d132      	bne.n	800381c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	015a      	lsls	r2, r3, #5
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	4413      	add	r3, r2
 80037be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	0151      	lsls	r1, r2, #5
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	440a      	add	r2, r1
 80037cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80037d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80037d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	015a      	lsls	r2, r3, #5
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	4413      	add	r3, r2
 80037e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	0151      	lsls	r1, r2, #5
 80037ec:	697a      	ldr	r2, [r7, #20]
 80037ee:	440a      	add	r2, r1
 80037f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80037f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	015a      	lsls	r2, r3, #5
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	4413      	add	r3, r2
 8003802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	0151      	lsls	r1, r2, #5
 800380c:	697a      	ldr	r2, [r7, #20]
 800380e:	440a      	add	r2, r1
 8003810:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003814:	0cdb      	lsrs	r3, r3, #19
 8003816:	04db      	lsls	r3, r3, #19
 8003818:	6113      	str	r3, [r2, #16]
 800381a:	e04e      	b.n	80038ba <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	015a      	lsls	r2, r3, #5
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	4413      	add	r3, r2
 8003824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	0151      	lsls	r1, r2, #5
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	440a      	add	r2, r1
 8003832:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003836:	0cdb      	lsrs	r3, r3, #19
 8003838:	04db      	lsls	r3, r3, #19
 800383a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	015a      	lsls	r2, r3, #5
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	4413      	add	r3, r2
 8003844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	0151      	lsls	r1, r2, #5
 800384e:	697a      	ldr	r2, [r7, #20]
 8003850:	440a      	add	r2, r1
 8003852:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003856:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800385a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800385e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	695a      	ldr	r2, [r3, #20]
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	429a      	cmp	r2, r3
 800386a:	d903      	bls.n	8003874 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	015a      	lsls	r2, r3, #5
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	4413      	add	r3, r2
 800387c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	0151      	lsls	r1, r2, #5
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	440a      	add	r2, r1
 800388a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800388e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003892:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	015a      	lsls	r2, r3, #5
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	4413      	add	r3, r2
 800389c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038a0:	691a      	ldr	r2, [r3, #16]
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038aa:	6939      	ldr	r1, [r7, #16]
 80038ac:	0148      	lsls	r0, r1, #5
 80038ae:	6979      	ldr	r1, [r7, #20]
 80038b0:	4401      	add	r1, r0
 80038b2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80038b6:	4313      	orrs	r3, r2
 80038b8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80038ba:	79fb      	ldrb	r3, [r7, #7]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d11e      	bne.n	80038fe <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d009      	beq.n	80038dc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	015a      	lsls	r2, r3, #5
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	4413      	add	r3, r2
 80038d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038d4:	461a      	mov	r2, r3
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	015a      	lsls	r2, r3, #5
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	4413      	add	r3, r2
 80038e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	0151      	lsls	r1, r2, #5
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	440a      	add	r2, r1
 80038f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80038fa:	6013      	str	r3, [r2, #0]
 80038fc:	e092      	b.n	8003a24 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	015a      	lsls	r2, r3, #5
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	4413      	add	r3, r2
 8003906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	0151      	lsls	r1, r2, #5
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	440a      	add	r2, r1
 8003914:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003918:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800391c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d07e      	beq.n	8003a24 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800392c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	f003 030f 	and.w	r3, r3, #15
 8003936:	2101      	movs	r1, #1
 8003938:	fa01 f303 	lsl.w	r3, r1, r3
 800393c:	6979      	ldr	r1, [r7, #20]
 800393e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003942:	4313      	orrs	r3, r2
 8003944:	634b      	str	r3, [r1, #52]	; 0x34
 8003946:	e06d      	b.n	8003a24 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	015a      	lsls	r2, r3, #5
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	4413      	add	r3, r2
 8003950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	0151      	lsls	r1, r2, #5
 800395a:	697a      	ldr	r2, [r7, #20]
 800395c:	440a      	add	r2, r1
 800395e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003962:	0cdb      	lsrs	r3, r3, #19
 8003964:	04db      	lsls	r3, r3, #19
 8003966:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	015a      	lsls	r2, r3, #5
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	4413      	add	r3, r2
 8003970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	0151      	lsls	r1, r2, #5
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	440a      	add	r2, r1
 800397e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003982:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003986:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800398a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d003      	beq.n	800399c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	689a      	ldr	r2, [r3, #8]
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	015a      	lsls	r2, r3, #5
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	4413      	add	r3, r2
 80039a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	693a      	ldr	r2, [r7, #16]
 80039ac:	0151      	lsls	r1, r2, #5
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	440a      	add	r2, r1
 80039b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80039ba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	015a      	lsls	r2, r3, #5
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	4413      	add	r3, r2
 80039c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039c8:	691a      	ldr	r2, [r3, #16]
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039d2:	6939      	ldr	r1, [r7, #16]
 80039d4:	0148      	lsls	r0, r1, #5
 80039d6:	6979      	ldr	r1, [r7, #20]
 80039d8:	4401      	add	r1, r0
 80039da:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80039de:	4313      	orrs	r3, r2
 80039e0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80039e2:	79fb      	ldrb	r3, [r7, #7]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d10d      	bne.n	8003a04 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d009      	beq.n	8003a04 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	68d9      	ldr	r1, [r3, #12]
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	015a      	lsls	r2, r3, #5
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	4413      	add	r3, r2
 80039fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a00:	460a      	mov	r2, r1
 8003a02:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	015a      	lsls	r2, r3, #5
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	0151      	lsls	r1, r2, #5
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	440a      	add	r2, r1
 8003a1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	371c      	adds	r7, #28
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b089      	sub	sp, #36	; 0x24
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	60f8      	str	r0, [r7, #12]
 8003a3a:	60b9      	str	r1, [r7, #8]
 8003a3c:	4611      	mov	r1, r2
 8003a3e:	461a      	mov	r2, r3
 8003a40:	460b      	mov	r3, r1
 8003a42:	71fb      	strb	r3, [r7, #7]
 8003a44:	4613      	mov	r3, r2
 8003a46:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003a50:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d123      	bne.n	8003aa0 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003a58:	88bb      	ldrh	r3, [r7, #4]
 8003a5a:	3303      	adds	r3, #3
 8003a5c:	089b      	lsrs	r3, r3, #2
 8003a5e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003a60:	2300      	movs	r3, #0
 8003a62:	61bb      	str	r3, [r7, #24]
 8003a64:	e018      	b.n	8003a98 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003a66:	79fb      	ldrb	r3, [r7, #7]
 8003a68:	031a      	lsls	r2, r3, #12
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a72:	461a      	mov	r2, r3
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	3301      	adds	r3, #1
 8003a84:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	3301      	adds	r3, #1
 8003a8a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	3301      	adds	r3, #1
 8003a90:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	3301      	adds	r3, #1
 8003a96:	61bb      	str	r3, [r7, #24]
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d3e2      	bcc.n	8003a66 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3724      	adds	r7, #36	; 0x24
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr

08003aae <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b08b      	sub	sp, #44	; 0x2c
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	60f8      	str	r0, [r7, #12]
 8003ab6:	60b9      	str	r1, [r7, #8]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003ac4:	88fb      	ldrh	r3, [r7, #6]
 8003ac6:	089b      	lsrs	r3, r3, #2
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003acc:	88fb      	ldrh	r3, [r7, #6]
 8003ace:	f003 0303 	and.w	r3, r3, #3
 8003ad2:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	623b      	str	r3, [r7, #32]
 8003ad8:	e014      	b.n	8003b04 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae4:	601a      	str	r2, [r3, #0]
    pDest++;
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae8:	3301      	adds	r3, #1
 8003aea:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aee:	3301      	adds	r3, #1
 8003af0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af4:	3301      	adds	r3, #1
 8003af6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afa:	3301      	adds	r3, #1
 8003afc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003afe:	6a3b      	ldr	r3, [r7, #32]
 8003b00:	3301      	adds	r3, #1
 8003b02:	623b      	str	r3, [r7, #32]
 8003b04:	6a3a      	ldr	r2, [r7, #32]
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d3e6      	bcc.n	8003ada <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003b0c:	8bfb      	ldrh	r3, [r7, #30]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d01e      	beq.n	8003b50 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003b12:	2300      	movs	r3, #0
 8003b14:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	f107 0310 	add.w	r3, r7, #16
 8003b22:	6812      	ldr	r2, [r2, #0]
 8003b24:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	6a3b      	ldr	r3, [r7, #32]
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b32:	b2da      	uxtb	r2, r3
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b36:	701a      	strb	r2, [r3, #0]
      i++;
 8003b38:	6a3b      	ldr	r3, [r7, #32]
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	623b      	str	r3, [r7, #32]
      pDest++;
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b40:	3301      	adds	r3, #1
 8003b42:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003b44:	8bfb      	ldrh	r3, [r7, #30]
 8003b46:	3b01      	subs	r3, #1
 8003b48:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003b4a:	8bfb      	ldrh	r3, [r7, #30]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1ea      	bne.n	8003b26 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	372c      	adds	r7, #44	; 0x2c
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b085      	sub	sp, #20
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
 8003b66:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	785b      	ldrb	r3, [r3, #1]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d12c      	bne.n	8003bd4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	015a      	lsls	r2, r3, #5
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	4413      	add	r3, r2
 8003b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	db12      	blt.n	8003bb2 <USB_EPSetStall+0x54>
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00f      	beq.n	8003bb2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	015a      	lsls	r2, r3, #5
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	4413      	add	r3, r2
 8003b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	0151      	lsls	r1, r2, #5
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	440a      	add	r2, r1
 8003ba8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003bb0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	015a      	lsls	r2, r3, #5
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	4413      	add	r3, r2
 8003bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	0151      	lsls	r1, r2, #5
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	440a      	add	r2, r1
 8003bc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bcc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003bd0:	6013      	str	r3, [r2, #0]
 8003bd2:	e02b      	b.n	8003c2c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	015a      	lsls	r2, r3, #5
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	4413      	add	r3, r2
 8003bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	db12      	blt.n	8003c0c <USB_EPSetStall+0xae>
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00f      	beq.n	8003c0c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	015a      	lsls	r2, r3, #5
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68ba      	ldr	r2, [r7, #8]
 8003bfc:	0151      	lsls	r1, r2, #5
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	440a      	add	r2, r1
 8003c02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c06:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c0a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	015a      	lsls	r2, r3, #5
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4413      	add	r3, r2
 8003c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	0151      	lsls	r1, r2, #5
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	440a      	add	r2, r1
 8003c22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c2a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3714      	adds	r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b085      	sub	sp, #20
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
 8003c42:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	785b      	ldrb	r3, [r3, #1]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d128      	bne.n	8003ca8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	015a      	lsls	r2, r3, #5
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	0151      	lsls	r1, r2, #5
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	440a      	add	r2, r1
 8003c6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c70:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c74:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	78db      	ldrb	r3, [r3, #3]
 8003c7a:	2b03      	cmp	r3, #3
 8003c7c:	d003      	beq.n	8003c86 <USB_EPClearStall+0x4c>
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	78db      	ldrb	r3, [r3, #3]
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d138      	bne.n	8003cf8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	015a      	lsls	r2, r3, #5
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	0151      	lsls	r1, r2, #5
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	440a      	add	r2, r1
 8003c9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ca4:	6013      	str	r3, [r2, #0]
 8003ca6:	e027      	b.n	8003cf8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	015a      	lsls	r2, r3, #5
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	4413      	add	r3, r2
 8003cb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	0151      	lsls	r1, r2, #5
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	440a      	add	r2, r1
 8003cbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cc2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003cc6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	78db      	ldrb	r3, [r3, #3]
 8003ccc:	2b03      	cmp	r3, #3
 8003cce:	d003      	beq.n	8003cd8 <USB_EPClearStall+0x9e>
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	78db      	ldrb	r3, [r3, #3]
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d10f      	bne.n	8003cf8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	015a      	lsls	r2, r3, #5
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	4413      	add	r3, r2
 8003ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68ba      	ldr	r2, [r7, #8]
 8003ce8:	0151      	lsls	r1, r2, #5
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	440a      	add	r2, r1
 8003cee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cf6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3714      	adds	r7, #20
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b085      	sub	sp, #20
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
 8003d0e:	460b      	mov	r3, r1
 8003d10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d24:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003d28:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	78fb      	ldrb	r3, [r7, #3]
 8003d34:	011b      	lsls	r3, r3, #4
 8003d36:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003d3a:	68f9      	ldr	r1, [r7, #12]
 8003d3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d40:	4313      	orrs	r3, r2
 8003d42:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3714      	adds	r7, #20
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr

08003d52 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b085      	sub	sp, #20
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003d6c:	f023 0303 	bic.w	r3, r3, #3
 8003d70:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d80:	f023 0302 	bic.w	r3, r3, #2
 8003d84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3714      	adds	r7, #20
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003dae:	f023 0303 	bic.w	r3, r3, #3
 8003db2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dc2:	f043 0302 	orr.w	r3, r3, #2
 8003dc6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3714      	adds	r7, #20
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b085      	sub	sp, #20
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	4013      	ands	r3, r2
 8003dec:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003dee:	68fb      	ldr	r3, [r7, #12]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3714      	adds	r7, #20
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	0c1b      	lsrs	r3, r3, #16
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3714      	adds	r7, #20
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	68ba      	ldr	r2, [r7, #8]
 8003e50:	4013      	ands	r3, r2
 8003e52:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	b29b      	uxth	r3, r3
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3714      	adds	r7, #20
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003e74:	78fb      	ldrb	r3, [r7, #3]
 8003e76:	015a      	lsls	r2, r3, #5
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	68ba      	ldr	r2, [r7, #8]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003e92:	68bb      	ldr	r3, [r7, #8]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3714      	adds	r7, #20
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b087      	sub	sp, #28
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ec2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003ec4:	78fb      	ldrb	r3, [r7, #3]
 8003ec6:	f003 030f 	and.w	r3, r3, #15
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ed0:	01db      	lsls	r3, r3, #7
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003eda:	78fb      	ldrb	r3, [r7, #3]
 8003edc:	015a      	lsls	r2, r3, #5
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	4013      	ands	r3, r2
 8003eec:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003eee:	68bb      	ldr	r3, [r7, #8]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	371c      	adds	r7, #28
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	f003 0301 	and.w	r3, r3, #1
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f32:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003f36:	f023 0307 	bic.w	r3, r3, #7
 8003f3a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f4e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3714      	adds	r7, #20
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
	...

08003f60 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b087      	sub	sp, #28
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	460b      	mov	r3, r1
 8003f6a:	607a      	str	r2, [r7, #4]
 8003f6c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	333c      	adds	r3, #60	; 0x3c
 8003f76:	3304      	adds	r3, #4
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	4a26      	ldr	r2, [pc, #152]	; (8004018 <USB_EP0_OutStart+0xb8>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d90a      	bls.n	8003f9a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f94:	d101      	bne.n	8003f9a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8003f96:	2300      	movs	r3, #0
 8003f98:	e037      	b.n	800400a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003fb8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fc8:	f043 0318 	orr.w	r3, r3, #24
 8003fcc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fdc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8003fe0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8003fe2:	7afb      	ldrb	r3, [r7, #11]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d10f      	bne.n	8004008 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fee:	461a      	mov	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004002:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004006:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	371c      	adds	r7, #28
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	4f54300a 	.word	0x4f54300a

0800401c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004024:	2300      	movs	r3, #0
 8004026:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	3301      	adds	r3, #1
 800402c:	60fb      	str	r3, [r7, #12]
 800402e:	4a13      	ldr	r2, [pc, #76]	; (800407c <USB_CoreReset+0x60>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d901      	bls.n	8004038 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e01a      	b.n	800406e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	2b00      	cmp	r3, #0
 800403e:	daf3      	bge.n	8004028 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004040:	2300      	movs	r3, #0
 8004042:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	f043 0201 	orr.w	r2, r3, #1
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	3301      	adds	r3, #1
 8004054:	60fb      	str	r3, [r7, #12]
 8004056:	4a09      	ldr	r2, [pc, #36]	; (800407c <USB_CoreReset+0x60>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d901      	bls.n	8004060 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e006      	b.n	800406e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	2b01      	cmp	r3, #1
 800406a:	d0f1      	beq.n	8004050 <USB_CoreReset+0x34>

  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3714      	adds	r7, #20
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	00030d40 	.word	0x00030d40

08004080 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	460b      	mov	r3, r1
 800408a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800408c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004090:	f002 f972 	bl	8006378 <USBD_static_malloc>
 8004094:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d105      	bne.n	80040a8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80040a4:	2302      	movs	r3, #2
 80040a6:	e066      	b.n	8004176 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	7c1b      	ldrb	r3, [r3, #16]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d119      	bne.n	80040ec <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80040b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040bc:	2202      	movs	r2, #2
 80040be:	2181      	movs	r1, #129	; 0x81
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f002 f836 	bl	8006132 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80040cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040d0:	2202      	movs	r2, #2
 80040d2:	2101      	movs	r1, #1
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f002 f82c 	bl	8006132 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2210      	movs	r2, #16
 80040e6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80040ea:	e016      	b.n	800411a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80040ec:	2340      	movs	r3, #64	; 0x40
 80040ee:	2202      	movs	r2, #2
 80040f0:	2181      	movs	r1, #129	; 0x81
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f002 f81d 	bl	8006132 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80040fe:	2340      	movs	r3, #64	; 0x40
 8004100:	2202      	movs	r2, #2
 8004102:	2101      	movs	r1, #1
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f002 f814 	bl	8006132 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2201      	movs	r2, #1
 800410e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2210      	movs	r2, #16
 8004116:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800411a:	2308      	movs	r3, #8
 800411c:	2203      	movs	r2, #3
 800411e:	2182      	movs	r1, #130	; 0x82
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f002 f806 	bl	8006132 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2201      	movs	r2, #1
 800412a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	7c1b      	ldrb	r3, [r3, #16]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d109      	bne.n	8004164 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004156:	f44f 7300 	mov.w	r3, #512	; 0x200
 800415a:	2101      	movs	r1, #1
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f002 f8d7 	bl	8006310 <USBD_LL_PrepareReceive>
 8004162:	e007      	b.n	8004174 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800416a:	2340      	movs	r3, #64	; 0x40
 800416c:	2101      	movs	r1, #1
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f002 f8ce 	bl	8006310 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b082      	sub	sp, #8
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
 8004186:	460b      	mov	r3, r1
 8004188:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800418a:	2181      	movs	r1, #129	; 0x81
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f001 fff6 	bl	800617e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004198:	2101      	movs	r1, #1
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f001 ffef 	bl	800617e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80041a8:	2182      	movs	r1, #130	; 0x82
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f001 ffe7 	bl	800617e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00e      	beq.n	80041e8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80041da:	4618      	mov	r0, r3
 80041dc:	f002 f8da 	bl	8006394 <USBD_static_free>
    pdev->pClassData = NULL;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3708      	adds	r7, #8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
	...

080041f4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b086      	sub	sp, #24
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004204:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004206:	2300      	movs	r3, #0
 8004208:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800420a:	2300      	movs	r3, #0
 800420c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800420e:	2300      	movs	r3, #0
 8004210:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d101      	bne.n	800421c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8004218:	2303      	movs	r3, #3
 800421a:	e0af      	b.n	800437c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004224:	2b00      	cmp	r3, #0
 8004226:	d03f      	beq.n	80042a8 <USBD_CDC_Setup+0xb4>
 8004228:	2b20      	cmp	r3, #32
 800422a:	f040 809f 	bne.w	800436c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	88db      	ldrh	r3, [r3, #6]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d02e      	beq.n	8004294 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	b25b      	sxtb	r3, r3
 800423c:	2b00      	cmp	r3, #0
 800423e:	da16      	bge.n	800426e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800424c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800424e:	683a      	ldr	r2, [r7, #0]
 8004250:	88d2      	ldrh	r2, [r2, #6]
 8004252:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	88db      	ldrh	r3, [r3, #6]
 8004258:	2b07      	cmp	r3, #7
 800425a:	bf28      	it	cs
 800425c:	2307      	movcs	r3, #7
 800425e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	89fa      	ldrh	r2, [r7, #14]
 8004264:	4619      	mov	r1, r3
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f001 fb19 	bl	800589e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800426c:	e085      	b.n	800437a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	785a      	ldrb	r2, [r3, #1]
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	88db      	ldrh	r3, [r3, #6]
 800427c:	b2da      	uxtb	r2, r3
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004284:	6939      	ldr	r1, [r7, #16]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	88db      	ldrh	r3, [r3, #6]
 800428a:	461a      	mov	r2, r3
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f001 fb32 	bl	80058f6 <USBD_CtlPrepareRx>
      break;
 8004292:	e072      	b.n	800437a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	683a      	ldr	r2, [r7, #0]
 800429e:	7850      	ldrb	r0, [r2, #1]
 80042a0:	2200      	movs	r2, #0
 80042a2:	6839      	ldr	r1, [r7, #0]
 80042a4:	4798      	blx	r3
      break;
 80042a6:	e068      	b.n	800437a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	785b      	ldrb	r3, [r3, #1]
 80042ac:	2b0b      	cmp	r3, #11
 80042ae:	d852      	bhi.n	8004356 <USBD_CDC_Setup+0x162>
 80042b0:	a201      	add	r2, pc, #4	; (adr r2, 80042b8 <USBD_CDC_Setup+0xc4>)
 80042b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b6:	bf00      	nop
 80042b8:	080042e9 	.word	0x080042e9
 80042bc:	08004365 	.word	0x08004365
 80042c0:	08004357 	.word	0x08004357
 80042c4:	08004357 	.word	0x08004357
 80042c8:	08004357 	.word	0x08004357
 80042cc:	08004357 	.word	0x08004357
 80042d0:	08004357 	.word	0x08004357
 80042d4:	08004357 	.word	0x08004357
 80042d8:	08004357 	.word	0x08004357
 80042dc:	08004357 	.word	0x08004357
 80042e0:	08004313 	.word	0x08004313
 80042e4:	0800433d 	.word	0x0800433d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2b03      	cmp	r3, #3
 80042f2:	d107      	bne.n	8004304 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80042f4:	f107 030a 	add.w	r3, r7, #10
 80042f8:	2202      	movs	r2, #2
 80042fa:	4619      	mov	r1, r3
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f001 face 	bl	800589e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004302:	e032      	b.n	800436a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8004304:	6839      	ldr	r1, [r7, #0]
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f001 fa58 	bl	80057bc <USBD_CtlError>
            ret = USBD_FAIL;
 800430c:	2303      	movs	r3, #3
 800430e:	75fb      	strb	r3, [r7, #23]
          break;
 8004310:	e02b      	b.n	800436a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b03      	cmp	r3, #3
 800431c:	d107      	bne.n	800432e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800431e:	f107 030d 	add.w	r3, r7, #13
 8004322:	2201      	movs	r2, #1
 8004324:	4619      	mov	r1, r3
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f001 fab9 	bl	800589e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800432c:	e01d      	b.n	800436a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800432e:	6839      	ldr	r1, [r7, #0]
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f001 fa43 	bl	80057bc <USBD_CtlError>
            ret = USBD_FAIL;
 8004336:	2303      	movs	r3, #3
 8004338:	75fb      	strb	r3, [r7, #23]
          break;
 800433a:	e016      	b.n	800436a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b03      	cmp	r3, #3
 8004346:	d00f      	beq.n	8004368 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8004348:	6839      	ldr	r1, [r7, #0]
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f001 fa36 	bl	80057bc <USBD_CtlError>
            ret = USBD_FAIL;
 8004350:	2303      	movs	r3, #3
 8004352:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004354:	e008      	b.n	8004368 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004356:	6839      	ldr	r1, [r7, #0]
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f001 fa2f 	bl	80057bc <USBD_CtlError>
          ret = USBD_FAIL;
 800435e:	2303      	movs	r3, #3
 8004360:	75fb      	strb	r3, [r7, #23]
          break;
 8004362:	e002      	b.n	800436a <USBD_CDC_Setup+0x176>
          break;
 8004364:	bf00      	nop
 8004366:	e008      	b.n	800437a <USBD_CDC_Setup+0x186>
          break;
 8004368:	bf00      	nop
      }
      break;
 800436a:	e006      	b.n	800437a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800436c:	6839      	ldr	r1, [r7, #0]
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f001 fa24 	bl	80057bc <USBD_CtlError>
      ret = USBD_FAIL;
 8004374:	2303      	movs	r3, #3
 8004376:	75fb      	strb	r3, [r7, #23]
      break;
 8004378:	bf00      	nop
  }

  return (uint8_t)ret;
 800437a:	7dfb      	ldrb	r3, [r7, #23]
}
 800437c:	4618      	mov	r0, r3
 800437e:	3718      	adds	r7, #24
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	460b      	mov	r3, r1
 800438e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004396:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e04f      	b.n	8004446 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80043ac:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80043ae:	78fa      	ldrb	r2, [r7, #3]
 80043b0:	6879      	ldr	r1, [r7, #4]
 80043b2:	4613      	mov	r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	4413      	add	r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	440b      	add	r3, r1
 80043bc:	3318      	adds	r3, #24
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d029      	beq.n	8004418 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80043c4:	78fa      	ldrb	r2, [r7, #3]
 80043c6:	6879      	ldr	r1, [r7, #4]
 80043c8:	4613      	mov	r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	4413      	add	r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	440b      	add	r3, r1
 80043d2:	3318      	adds	r3, #24
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	78f9      	ldrb	r1, [r7, #3]
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	460b      	mov	r3, r1
 80043dc:	00db      	lsls	r3, r3, #3
 80043de:	1a5b      	subs	r3, r3, r1
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	4403      	add	r3, r0
 80043e4:	3344      	adds	r3, #68	; 0x44
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	fbb2 f1f3 	udiv	r1, r2, r3
 80043ec:	fb03 f301 	mul.w	r3, r3, r1
 80043f0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d110      	bne.n	8004418 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80043f6:	78fa      	ldrb	r2, [r7, #3]
 80043f8:	6879      	ldr	r1, [r7, #4]
 80043fa:	4613      	mov	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	4413      	add	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	440b      	add	r3, r1
 8004404:	3318      	adds	r3, #24
 8004406:	2200      	movs	r2, #0
 8004408:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800440a:	78f9      	ldrb	r1, [r7, #3]
 800440c:	2300      	movs	r3, #0
 800440e:	2200      	movs	r2, #0
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f001 ff5c 	bl	80062ce <USBD_LL_Transmit>
 8004416:	e015      	b.n	8004444 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	2200      	movs	r2, #0
 800441c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00b      	beq.n	8004444 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800443a:	68ba      	ldr	r2, [r7, #8]
 800443c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004440:	78fa      	ldrb	r2, [r7, #3]
 8004442:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800444e:	b580      	push	{r7, lr}
 8004450:	b084      	sub	sp, #16
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
 8004456:	460b      	mov	r3, r1
 8004458:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004460:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004468:	2b00      	cmp	r3, #0
 800446a:	d101      	bne.n	8004470 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800446c:	2303      	movs	r3, #3
 800446e:	e015      	b.n	800449c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004470:	78fb      	ldrb	r3, [r7, #3]
 8004472:	4619      	mov	r1, r3
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f001 ff6c 	bl	8006352 <USBD_LL_GetRxDataSize>
 800447a:	4602      	mov	r2, r0
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004496:	4611      	mov	r1, r2
 8004498:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80044b2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e01b      	b.n	80044f6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d015      	beq.n	80044f4 <USBD_CDC_EP0_RxReady+0x50>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80044ce:	2bff      	cmp	r3, #255	; 0xff
 80044d0:	d010      	beq.n	80044f4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80044e0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80044e8:	b292      	uxth	r2, r2
 80044ea:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	22ff      	movs	r2, #255	; 0xff
 80044f0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3710      	adds	r7, #16
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
	...

08004500 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2243      	movs	r2, #67	; 0x43
 800450c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800450e:	4b03      	ldr	r3, [pc, #12]	; (800451c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004510:	4618      	mov	r0, r3
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr
 800451c:	20000098 	.word	0x20000098

08004520 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2243      	movs	r2, #67	; 0x43
 800452c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800452e:	4b03      	ldr	r3, [pc, #12]	; (800453c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004530:	4618      	mov	r0, r3
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	20000054 	.word	0x20000054

08004540 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2243      	movs	r2, #67	; 0x43
 800454c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800454e:	4b03      	ldr	r3, [pc, #12]	; (800455c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004550:	4618      	mov	r0, r3
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr
 800455c:	200000dc 	.word	0x200000dc

08004560 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	220a      	movs	r2, #10
 800456c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800456e:	4b03      	ldr	r3, [pc, #12]	; (800457c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004570:	4618      	mov	r0, r3
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr
 800457c:	20000010 	.word	0x20000010

08004580 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004590:	2303      	movs	r3, #3
 8004592:	e004      	b.n	800459e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr

080045aa <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80045aa:	b480      	push	{r7}
 80045ac:	b087      	sub	sp, #28
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	60f8      	str	r0, [r7, #12]
 80045b2:	60b9      	str	r1, [r7, #8]
 80045b4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80045bc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d101      	bne.n	80045c8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e008      	b.n	80045da <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	371c      	adds	r7, #28
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80045e6:	b480      	push	{r7}
 80045e8:	b085      	sub	sp, #20
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
 80045ee:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80045f6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80045fe:	2303      	movs	r3, #3
 8004600:	e004      	b.n	800460c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3714      	adds	r7, #20
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004626:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8004628:	2301      	movs	r3, #1
 800462a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004636:	2303      	movs	r3, #3
 8004638:	e01a      	b.n	8004670 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004640:	2b00      	cmp	r3, #0
 8004642:	d114      	bne.n	800466e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	2201      	movs	r2, #1
 8004648:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004662:	2181      	movs	r1, #129	; 0x81
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f001 fe32 	bl	80062ce <USBD_LL_Transmit>

    ret = USBD_OK;
 800466a:	2300      	movs	r3, #0
 800466c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800466e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004670:	4618      	mov	r0, r3
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004686:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800468e:	2b00      	cmp	r3, #0
 8004690:	d101      	bne.n	8004696 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8004692:	2303      	movs	r3, #3
 8004694:	e016      	b.n	80046c4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	7c1b      	ldrb	r3, [r3, #16]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d109      	bne.n	80046b2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80046a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046a8:	2101      	movs	r1, #1
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f001 fe30 	bl	8006310 <USBD_LL_PrepareReceive>
 80046b0:	e007      	b.n	80046c2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80046b8:	2340      	movs	r3, #64	; 0x40
 80046ba:	2101      	movs	r1, #1
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f001 fe27 	bl	8006310 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	4613      	mov	r3, r2
 80046d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d101      	bne.n	80046e4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e01f      	b.n	8004724 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d003      	beq.n	800470a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	68ba      	ldr	r2, [r7, #8]
 8004706:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	79fa      	ldrb	r2, [r7, #7]
 8004716:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	f001 fca3 	bl	8006064 <USBD_LL_Init>
 800471e:	4603      	mov	r3, r0
 8004720:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004722:	7dfb      	ldrb	r3, [r7, #23]
}
 8004724:	4618      	mov	r0, r3
 8004726:	3718      	adds	r7, #24
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004736:	2300      	movs	r3, #0
 8004738:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8004740:	2303      	movs	r3, #3
 8004742:	e016      	b.n	8004772 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00b      	beq.n	8004770 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800475e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004760:	f107 020e 	add.w	r2, r7, #14
 8004764:	4610      	mov	r0, r2
 8004766:	4798      	blx	r3
 8004768:	4602      	mov	r2, r0
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b082      	sub	sp, #8
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f001 fcba 	bl	80060fc <USBD_LL_Start>
 8004788:	4603      	mov	r3, r0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004792:	b480      	push	{r7}
 8004794:	b083      	sub	sp, #12
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	460b      	mov	r3, r1
 80047b2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80047b4:	2303      	movs	r3, #3
 80047b6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d009      	beq.n	80047d6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	78fa      	ldrb	r2, [r7, #3]
 80047cc:	4611      	mov	r1, r2
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	4798      	blx	r3
 80047d2:	4603      	mov	r3, r0
 80047d4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80047d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	460b      	mov	r3, r1
 80047ea:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d007      	beq.n	8004806 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	78fa      	ldrb	r2, [r7, #3]
 8004800:	4611      	mov	r1, r2
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	4798      	blx	r3
  }

  return USBD_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	3708      	adds	r7, #8
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004820:	6839      	ldr	r1, [r7, #0]
 8004822:	4618      	mov	r0, r3
 8004824:	f000 ff90 	bl	8005748 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004836:	461a      	mov	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004844:	f003 031f 	and.w	r3, r3, #31
 8004848:	2b02      	cmp	r3, #2
 800484a:	d01a      	beq.n	8004882 <USBD_LL_SetupStage+0x72>
 800484c:	2b02      	cmp	r3, #2
 800484e:	d822      	bhi.n	8004896 <USBD_LL_SetupStage+0x86>
 8004850:	2b00      	cmp	r3, #0
 8004852:	d002      	beq.n	800485a <USBD_LL_SetupStage+0x4a>
 8004854:	2b01      	cmp	r3, #1
 8004856:	d00a      	beq.n	800486e <USBD_LL_SetupStage+0x5e>
 8004858:	e01d      	b.n	8004896 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004860:	4619      	mov	r1, r3
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 fa62 	bl	8004d2c <USBD_StdDevReq>
 8004868:	4603      	mov	r3, r0
 800486a:	73fb      	strb	r3, [r7, #15]
      break;
 800486c:	e020      	b.n	80048b0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004874:	4619      	mov	r1, r3
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 fac6 	bl	8004e08 <USBD_StdItfReq>
 800487c:	4603      	mov	r3, r0
 800487e:	73fb      	strb	r3, [r7, #15]
      break;
 8004880:	e016      	b.n	80048b0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004888:	4619      	mov	r1, r3
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 fb05 	bl	8004e9a <USBD_StdEPReq>
 8004890:	4603      	mov	r3, r0
 8004892:	73fb      	strb	r3, [r7, #15]
      break;
 8004894:	e00c      	b.n	80048b0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800489c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	4619      	mov	r1, r3
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f001 fc89 	bl	80061bc <USBD_LL_StallEP>
 80048aa:	4603      	mov	r3, r0
 80048ac:	73fb      	strb	r3, [r7, #15]
      break;
 80048ae:	bf00      	nop
  }

  return ret;
 80048b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b086      	sub	sp, #24
 80048be:	af00      	add	r7, sp, #0
 80048c0:	60f8      	str	r0, [r7, #12]
 80048c2:	460b      	mov	r3, r1
 80048c4:	607a      	str	r2, [r7, #4]
 80048c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80048c8:	7afb      	ldrb	r3, [r7, #11]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d138      	bne.n	8004940 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80048d4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80048dc:	2b03      	cmp	r3, #3
 80048de:	d14a      	bne.n	8004976 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	689a      	ldr	r2, [r3, #8]
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d913      	bls.n	8004914 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	689a      	ldr	r2, [r3, #8]
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	1ad2      	subs	r2, r2, r3
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	68da      	ldr	r2, [r3, #12]
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	4293      	cmp	r3, r2
 8004904:	bf28      	it	cs
 8004906:	4613      	movcs	r3, r2
 8004908:	461a      	mov	r2, r3
 800490a:	6879      	ldr	r1, [r7, #4]
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f001 f80f 	bl	8005930 <USBD_CtlContinueRx>
 8004912:	e030      	b.n	8004976 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800491a:	b2db      	uxtb	r3, r3
 800491c:	2b03      	cmp	r3, #3
 800491e:	d10b      	bne.n	8004938 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d005      	beq.n	8004938 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	f001 f80a 	bl	8005952 <USBD_CtlSendStatus>
 800493e:	e01a      	b.n	8004976 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004946:	b2db      	uxtb	r3, r3
 8004948:	2b03      	cmp	r3, #3
 800494a:	d114      	bne.n	8004976 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00e      	beq.n	8004976 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	7afa      	ldrb	r2, [r7, #11]
 8004962:	4611      	mov	r1, r2
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	4798      	blx	r3
 8004968:	4603      	mov	r3, r0
 800496a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800496c:	7dfb      	ldrb	r3, [r7, #23]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d001      	beq.n	8004976 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8004972:	7dfb      	ldrb	r3, [r7, #23]
 8004974:	e000      	b.n	8004978 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3718      	adds	r7, #24
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b086      	sub	sp, #24
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	460b      	mov	r3, r1
 800498a:	607a      	str	r2, [r7, #4]
 800498c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800498e:	7afb      	ldrb	r3, [r7, #11]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d16b      	bne.n	8004a6c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	3314      	adds	r3, #20
 8004998:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d156      	bne.n	8004a52 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	689a      	ldr	r2, [r3, #8]
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d914      	bls.n	80049da <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	689a      	ldr	r2, [r3, #8]
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	1ad2      	subs	r2, r2, r3
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	461a      	mov	r2, r3
 80049c4:	6879      	ldr	r1, [r7, #4]
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f000 ff84 	bl	80058d4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80049cc:	2300      	movs	r3, #0
 80049ce:	2200      	movs	r2, #0
 80049d0:	2100      	movs	r1, #0
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	f001 fc9c 	bl	8006310 <USBD_LL_PrepareReceive>
 80049d8:	e03b      	b.n	8004a52 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	68da      	ldr	r2, [r3, #12]
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d11c      	bne.n	8004a20 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d316      	bcc.n	8004a20 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	685a      	ldr	r2, [r3, #4]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d20f      	bcs.n	8004a20 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004a00:	2200      	movs	r2, #0
 8004a02:	2100      	movs	r1, #0
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f000 ff65 	bl	80058d4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004a12:	2300      	movs	r3, #0
 8004a14:	2200      	movs	r2, #0
 8004a16:	2100      	movs	r1, #0
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	f001 fc79 	bl	8006310 <USBD_LL_PrepareReceive>
 8004a1e:	e018      	b.n	8004a52 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b03      	cmp	r3, #3
 8004a2a:	d10b      	bne.n	8004a44 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d005      	beq.n	8004a44 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004a44:	2180      	movs	r1, #128	; 0x80
 8004a46:	68f8      	ldr	r0, [r7, #12]
 8004a48:	f001 fbb8 	bl	80061bc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f000 ff93 	bl	8005978 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d122      	bne.n	8004aa2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f7ff fe98 	bl	8004792 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004a6a:	e01a      	b.n	8004aa2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b03      	cmp	r3, #3
 8004a76:	d114      	bne.n	8004aa2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a7e:	695b      	ldr	r3, [r3, #20]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00e      	beq.n	8004aa2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a8a:	695b      	ldr	r3, [r3, #20]
 8004a8c:	7afa      	ldrb	r2, [r7, #11]
 8004a8e:	4611      	mov	r1, r2
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	4798      	blx	r3
 8004a94:	4603      	mov	r3, r0
 8004a96:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004a98:	7dfb      	ldrb	r3, [r7, #23]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8004a9e:	7dfb      	ldrb	r3, [r7, #23]
 8004aa0:	e000      	b.n	8004aa4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3718      	adds	r7, #24
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d101      	bne.n	8004ae0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e02f      	b.n	8004b40 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00f      	beq.n	8004b0a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d009      	beq.n	8004b0a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	6852      	ldr	r2, [r2, #4]
 8004b02:	b2d2      	uxtb	r2, r2
 8004b04:	4611      	mov	r1, r2
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004b0a:	2340      	movs	r3, #64	; 0x40
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	2100      	movs	r1, #0
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f001 fb0e 	bl	8006132 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2240      	movs	r2, #64	; 0x40
 8004b22:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004b26:	2340      	movs	r3, #64	; 0x40
 8004b28:	2200      	movs	r2, #0
 8004b2a:	2180      	movs	r1, #128	; 0x80
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f001 fb00 	bl	8006132 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2201      	movs	r2, #1
 8004b36:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2240      	movs	r2, #64	; 0x40
 8004b3c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3708      	adds	r7, #8
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	460b      	mov	r3, r1
 8004b52:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	78fa      	ldrb	r2, [r7, #3]
 8004b58:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b76:	b2da      	uxtb	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2204      	movs	r2, #4
 8004b82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	2b04      	cmp	r3, #4
 8004ba6:	d106      	bne.n	8004bb6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8004bae:	b2da      	uxtb	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d101      	bne.n	8004bda <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e012      	b.n	8004c00 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b03      	cmp	r3, #3
 8004be4:	d10b      	bne.n	8004bfe <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bec:	69db      	ldr	r3, [r3, #28]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d005      	beq.n	8004bfe <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bf8:	69db      	ldr	r3, [r3, #28]
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3708      	adds	r7, #8
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	460b      	mov	r3, r1
 8004c12:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e014      	b.n	8004c4c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b03      	cmp	r3, #3
 8004c2c:	d10d      	bne.n	8004c4a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d007      	beq.n	8004c4a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	78fa      	ldrb	r2, [r7, #3]
 8004c44:	4611      	mov	r1, r2
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3708      	adds	r7, #8
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d101      	bne.n	8004c6e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e014      	b.n	8004c98 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b03      	cmp	r3, #3
 8004c78:	d10d      	bne.n	8004c96 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d007      	beq.n	8004c96 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8e:	78fa      	ldrb	r2, [r7, #3]
 8004c90:	4611      	mov	r1, r2
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3708      	adds	r7, #8
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr

08004cb6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b082      	sub	sp, #8
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d009      	beq.n	8004ce4 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	6852      	ldr	r2, [r2, #4]
 8004cdc:	b2d2      	uxtb	r2, r2
 8004cde:	4611      	mov	r1, r2
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	4798      	blx	r3
  }

  return USBD_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3708      	adds	r7, #8
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}

08004cee <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b087      	sub	sp, #28
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	3301      	adds	r3, #1
 8004d04:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004d0c:	8a3b      	ldrh	r3, [r7, #16]
 8004d0e:	021b      	lsls	r3, r3, #8
 8004d10:	b21a      	sxth	r2, r3
 8004d12:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	b21b      	sxth	r3, r3
 8004d1a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8004d1c:	89fb      	ldrh	r3, [r7, #14]
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	371c      	adds	r7, #28
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
	...

08004d2c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004d36:	2300      	movs	r3, #0
 8004d38:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004d42:	2b40      	cmp	r3, #64	; 0x40
 8004d44:	d005      	beq.n	8004d52 <USBD_StdDevReq+0x26>
 8004d46:	2b40      	cmp	r3, #64	; 0x40
 8004d48:	d853      	bhi.n	8004df2 <USBD_StdDevReq+0xc6>
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00b      	beq.n	8004d66 <USBD_StdDevReq+0x3a>
 8004d4e:	2b20      	cmp	r3, #32
 8004d50:	d14f      	bne.n	8004df2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	6839      	ldr	r1, [r7, #0]
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	4798      	blx	r3
 8004d60:	4603      	mov	r3, r0
 8004d62:	73fb      	strb	r3, [r7, #15]
      break;
 8004d64:	e04a      	b.n	8004dfc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	785b      	ldrb	r3, [r3, #1]
 8004d6a:	2b09      	cmp	r3, #9
 8004d6c:	d83b      	bhi.n	8004de6 <USBD_StdDevReq+0xba>
 8004d6e:	a201      	add	r2, pc, #4	; (adr r2, 8004d74 <USBD_StdDevReq+0x48>)
 8004d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d74:	08004dc9 	.word	0x08004dc9
 8004d78:	08004ddd 	.word	0x08004ddd
 8004d7c:	08004de7 	.word	0x08004de7
 8004d80:	08004dd3 	.word	0x08004dd3
 8004d84:	08004de7 	.word	0x08004de7
 8004d88:	08004da7 	.word	0x08004da7
 8004d8c:	08004d9d 	.word	0x08004d9d
 8004d90:	08004de7 	.word	0x08004de7
 8004d94:	08004dbf 	.word	0x08004dbf
 8004d98:	08004db1 	.word	0x08004db1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8004d9c:	6839      	ldr	r1, [r7, #0]
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 f9de 	bl	8005160 <USBD_GetDescriptor>
          break;
 8004da4:	e024      	b.n	8004df0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8004da6:	6839      	ldr	r1, [r7, #0]
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 fb43 	bl	8005434 <USBD_SetAddress>
          break;
 8004dae:	e01f      	b.n	8004df0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8004db0:	6839      	ldr	r1, [r7, #0]
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 fb82 	bl	80054bc <USBD_SetConfig>
 8004db8:	4603      	mov	r3, r0
 8004dba:	73fb      	strb	r3, [r7, #15]
          break;
 8004dbc:	e018      	b.n	8004df0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8004dbe:	6839      	ldr	r1, [r7, #0]
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 fc21 	bl	8005608 <USBD_GetConfig>
          break;
 8004dc6:	e013      	b.n	8004df0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8004dc8:	6839      	ldr	r1, [r7, #0]
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 fc52 	bl	8005674 <USBD_GetStatus>
          break;
 8004dd0:	e00e      	b.n	8004df0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8004dd2:	6839      	ldr	r1, [r7, #0]
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 fc81 	bl	80056dc <USBD_SetFeature>
          break;
 8004dda:	e009      	b.n	8004df0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8004ddc:	6839      	ldr	r1, [r7, #0]
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 fc90 	bl	8005704 <USBD_ClrFeature>
          break;
 8004de4:	e004      	b.n	8004df0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8004de6:	6839      	ldr	r1, [r7, #0]
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 fce7 	bl	80057bc <USBD_CtlError>
          break;
 8004dee:	bf00      	nop
      }
      break;
 8004df0:	e004      	b.n	8004dfc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8004df2:	6839      	ldr	r1, [r7, #0]
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f000 fce1 	bl	80057bc <USBD_CtlError>
      break;
 8004dfa:	bf00      	nop
  }

  return ret;
 8004dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop

08004e08 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004e12:	2300      	movs	r3, #0
 8004e14:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004e1e:	2b40      	cmp	r3, #64	; 0x40
 8004e20:	d005      	beq.n	8004e2e <USBD_StdItfReq+0x26>
 8004e22:	2b40      	cmp	r3, #64	; 0x40
 8004e24:	d82f      	bhi.n	8004e86 <USBD_StdItfReq+0x7e>
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d001      	beq.n	8004e2e <USBD_StdItfReq+0x26>
 8004e2a:	2b20      	cmp	r3, #32
 8004e2c:	d12b      	bne.n	8004e86 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	3b01      	subs	r3, #1
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d81d      	bhi.n	8004e78 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	889b      	ldrh	r3, [r3, #4]
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d813      	bhi.n	8004e6e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	6839      	ldr	r1, [r7, #0]
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	4798      	blx	r3
 8004e54:	4603      	mov	r3, r0
 8004e56:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	88db      	ldrh	r3, [r3, #6]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d110      	bne.n	8004e82 <USBD_StdItfReq+0x7a>
 8004e60:	7bfb      	ldrb	r3, [r7, #15]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10d      	bne.n	8004e82 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 fd73 	bl	8005952 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8004e6c:	e009      	b.n	8004e82 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8004e6e:	6839      	ldr	r1, [r7, #0]
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f000 fca3 	bl	80057bc <USBD_CtlError>
          break;
 8004e76:	e004      	b.n	8004e82 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8004e78:	6839      	ldr	r1, [r7, #0]
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 fc9e 	bl	80057bc <USBD_CtlError>
          break;
 8004e80:	e000      	b.n	8004e84 <USBD_StdItfReq+0x7c>
          break;
 8004e82:	bf00      	nop
      }
      break;
 8004e84:	e004      	b.n	8004e90 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8004e86:	6839      	ldr	r1, [r7, #0]
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f000 fc97 	bl	80057bc <USBD_CtlError>
      break;
 8004e8e:	bf00      	nop
  }

  return ret;
 8004e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b084      	sub	sp, #16
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
 8004ea2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	889b      	ldrh	r3, [r3, #4]
 8004eac:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004eb6:	2b40      	cmp	r3, #64	; 0x40
 8004eb8:	d007      	beq.n	8004eca <USBD_StdEPReq+0x30>
 8004eba:	2b40      	cmp	r3, #64	; 0x40
 8004ebc:	f200 8145 	bhi.w	800514a <USBD_StdEPReq+0x2b0>
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00c      	beq.n	8004ede <USBD_StdEPReq+0x44>
 8004ec4:	2b20      	cmp	r3, #32
 8004ec6:	f040 8140 	bne.w	800514a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	6839      	ldr	r1, [r7, #0]
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	4798      	blx	r3
 8004ed8:	4603      	mov	r3, r0
 8004eda:	73fb      	strb	r3, [r7, #15]
      break;
 8004edc:	e13a      	b.n	8005154 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	785b      	ldrb	r3, [r3, #1]
 8004ee2:	2b03      	cmp	r3, #3
 8004ee4:	d007      	beq.n	8004ef6 <USBD_StdEPReq+0x5c>
 8004ee6:	2b03      	cmp	r3, #3
 8004ee8:	f300 8129 	bgt.w	800513e <USBD_StdEPReq+0x2a4>
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d07f      	beq.n	8004ff0 <USBD_StdEPReq+0x156>
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d03c      	beq.n	8004f6e <USBD_StdEPReq+0xd4>
 8004ef4:	e123      	b.n	800513e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d002      	beq.n	8004f08 <USBD_StdEPReq+0x6e>
 8004f02:	2b03      	cmp	r3, #3
 8004f04:	d016      	beq.n	8004f34 <USBD_StdEPReq+0x9a>
 8004f06:	e02c      	b.n	8004f62 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004f08:	7bbb      	ldrb	r3, [r7, #14]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00d      	beq.n	8004f2a <USBD_StdEPReq+0x90>
 8004f0e:	7bbb      	ldrb	r3, [r7, #14]
 8004f10:	2b80      	cmp	r3, #128	; 0x80
 8004f12:	d00a      	beq.n	8004f2a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004f14:	7bbb      	ldrb	r3, [r7, #14]
 8004f16:	4619      	mov	r1, r3
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f001 f94f 	bl	80061bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004f1e:	2180      	movs	r1, #128	; 0x80
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f001 f94b 	bl	80061bc <USBD_LL_StallEP>
 8004f26:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004f28:	e020      	b.n	8004f6c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8004f2a:	6839      	ldr	r1, [r7, #0]
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 fc45 	bl	80057bc <USBD_CtlError>
              break;
 8004f32:	e01b      	b.n	8004f6c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	885b      	ldrh	r3, [r3, #2]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d10e      	bne.n	8004f5a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004f3c:	7bbb      	ldrb	r3, [r7, #14]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00b      	beq.n	8004f5a <USBD_StdEPReq+0xc0>
 8004f42:	7bbb      	ldrb	r3, [r7, #14]
 8004f44:	2b80      	cmp	r3, #128	; 0x80
 8004f46:	d008      	beq.n	8004f5a <USBD_StdEPReq+0xc0>
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	88db      	ldrh	r3, [r3, #6]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d104      	bne.n	8004f5a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8004f50:	7bbb      	ldrb	r3, [r7, #14]
 8004f52:	4619      	mov	r1, r3
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f001 f931 	bl	80061bc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 fcf9 	bl	8005952 <USBD_CtlSendStatus>

              break;
 8004f60:	e004      	b.n	8004f6c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8004f62:	6839      	ldr	r1, [r7, #0]
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 fc29 	bl	80057bc <USBD_CtlError>
              break;
 8004f6a:	bf00      	nop
          }
          break;
 8004f6c:	e0ec      	b.n	8005148 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d002      	beq.n	8004f80 <USBD_StdEPReq+0xe6>
 8004f7a:	2b03      	cmp	r3, #3
 8004f7c:	d016      	beq.n	8004fac <USBD_StdEPReq+0x112>
 8004f7e:	e030      	b.n	8004fe2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004f80:	7bbb      	ldrb	r3, [r7, #14]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00d      	beq.n	8004fa2 <USBD_StdEPReq+0x108>
 8004f86:	7bbb      	ldrb	r3, [r7, #14]
 8004f88:	2b80      	cmp	r3, #128	; 0x80
 8004f8a:	d00a      	beq.n	8004fa2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004f8c:	7bbb      	ldrb	r3, [r7, #14]
 8004f8e:	4619      	mov	r1, r3
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f001 f913 	bl	80061bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004f96:	2180      	movs	r1, #128	; 0x80
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f001 f90f 	bl	80061bc <USBD_LL_StallEP>
 8004f9e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004fa0:	e025      	b.n	8004fee <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8004fa2:	6839      	ldr	r1, [r7, #0]
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 fc09 	bl	80057bc <USBD_CtlError>
              break;
 8004faa:	e020      	b.n	8004fee <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	885b      	ldrh	r3, [r3, #2]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d11b      	bne.n	8004fec <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8004fb4:	7bbb      	ldrb	r3, [r7, #14]
 8004fb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d004      	beq.n	8004fc8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8004fbe:	7bbb      	ldrb	r3, [r7, #14]
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f001 f919 	bl	80061fa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 fcc2 	bl	8005952 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	6839      	ldr	r1, [r7, #0]
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	4798      	blx	r3
 8004fdc:	4603      	mov	r3, r0
 8004fde:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8004fe0:	e004      	b.n	8004fec <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8004fe2:	6839      	ldr	r1, [r7, #0]
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 fbe9 	bl	80057bc <USBD_CtlError>
              break;
 8004fea:	e000      	b.n	8004fee <USBD_StdEPReq+0x154>
              break;
 8004fec:	bf00      	nop
          }
          break;
 8004fee:	e0ab      	b.n	8005148 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d002      	beq.n	8005002 <USBD_StdEPReq+0x168>
 8004ffc:	2b03      	cmp	r3, #3
 8004ffe:	d032      	beq.n	8005066 <USBD_StdEPReq+0x1cc>
 8005000:	e097      	b.n	8005132 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005002:	7bbb      	ldrb	r3, [r7, #14]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d007      	beq.n	8005018 <USBD_StdEPReq+0x17e>
 8005008:	7bbb      	ldrb	r3, [r7, #14]
 800500a:	2b80      	cmp	r3, #128	; 0x80
 800500c:	d004      	beq.n	8005018 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800500e:	6839      	ldr	r1, [r7, #0]
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 fbd3 	bl	80057bc <USBD_CtlError>
                break;
 8005016:	e091      	b.n	800513c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005018:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800501c:	2b00      	cmp	r3, #0
 800501e:	da0b      	bge.n	8005038 <USBD_StdEPReq+0x19e>
 8005020:	7bbb      	ldrb	r3, [r7, #14]
 8005022:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005026:	4613      	mov	r3, r2
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	4413      	add	r3, r2
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	3310      	adds	r3, #16
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	4413      	add	r3, r2
 8005034:	3304      	adds	r3, #4
 8005036:	e00b      	b.n	8005050 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005038:	7bbb      	ldrb	r3, [r7, #14]
 800503a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800503e:	4613      	mov	r3, r2
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4413      	add	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	4413      	add	r3, r2
 800504e:	3304      	adds	r3, #4
 8005050:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	2200      	movs	r2, #0
 8005056:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	2202      	movs	r2, #2
 800505c:	4619      	mov	r1, r3
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 fc1d 	bl	800589e <USBD_CtlSendData>
              break;
 8005064:	e06a      	b.n	800513c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005066:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800506a:	2b00      	cmp	r3, #0
 800506c:	da11      	bge.n	8005092 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800506e:	7bbb      	ldrb	r3, [r7, #14]
 8005070:	f003 020f 	and.w	r2, r3, #15
 8005074:	6879      	ldr	r1, [r7, #4]
 8005076:	4613      	mov	r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	4413      	add	r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	440b      	add	r3, r1
 8005080:	3324      	adds	r3, #36	; 0x24
 8005082:	881b      	ldrh	r3, [r3, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d117      	bne.n	80050b8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005088:	6839      	ldr	r1, [r7, #0]
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 fb96 	bl	80057bc <USBD_CtlError>
                  break;
 8005090:	e054      	b.n	800513c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005092:	7bbb      	ldrb	r3, [r7, #14]
 8005094:	f003 020f 	and.w	r2, r3, #15
 8005098:	6879      	ldr	r1, [r7, #4]
 800509a:	4613      	mov	r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	4413      	add	r3, r2
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	440b      	add	r3, r1
 80050a4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80050a8:	881b      	ldrh	r3, [r3, #0]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d104      	bne.n	80050b8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80050ae:	6839      	ldr	r1, [r7, #0]
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 fb83 	bl	80057bc <USBD_CtlError>
                  break;
 80050b6:	e041      	b.n	800513c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80050b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	da0b      	bge.n	80050d8 <USBD_StdEPReq+0x23e>
 80050c0:	7bbb      	ldrb	r3, [r7, #14]
 80050c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80050c6:	4613      	mov	r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	4413      	add	r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	3310      	adds	r3, #16
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	4413      	add	r3, r2
 80050d4:	3304      	adds	r3, #4
 80050d6:	e00b      	b.n	80050f0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80050d8:	7bbb      	ldrb	r3, [r7, #14]
 80050da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80050de:	4613      	mov	r3, r2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	4413      	add	r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	4413      	add	r3, r2
 80050ee:	3304      	adds	r3, #4
 80050f0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80050f2:	7bbb      	ldrb	r3, [r7, #14]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d002      	beq.n	80050fe <USBD_StdEPReq+0x264>
 80050f8:	7bbb      	ldrb	r3, [r7, #14]
 80050fa:	2b80      	cmp	r3, #128	; 0x80
 80050fc:	d103      	bne.n	8005106 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	2200      	movs	r2, #0
 8005102:	601a      	str	r2, [r3, #0]
 8005104:	e00e      	b.n	8005124 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005106:	7bbb      	ldrb	r3, [r7, #14]
 8005108:	4619      	mov	r1, r3
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f001 f894 	bl	8006238 <USBD_LL_IsStallEP>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d003      	beq.n	800511e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	2201      	movs	r2, #1
 800511a:	601a      	str	r2, [r3, #0]
 800511c:	e002      	b.n	8005124 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	2200      	movs	r2, #0
 8005122:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	2202      	movs	r2, #2
 8005128:	4619      	mov	r1, r3
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 fbb7 	bl	800589e <USBD_CtlSendData>
              break;
 8005130:	e004      	b.n	800513c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8005132:	6839      	ldr	r1, [r7, #0]
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 fb41 	bl	80057bc <USBD_CtlError>
              break;
 800513a:	bf00      	nop
          }
          break;
 800513c:	e004      	b.n	8005148 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800513e:	6839      	ldr	r1, [r7, #0]
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 fb3b 	bl	80057bc <USBD_CtlError>
          break;
 8005146:	bf00      	nop
      }
      break;
 8005148:	e004      	b.n	8005154 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800514a:	6839      	ldr	r1, [r7, #0]
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 fb35 	bl	80057bc <USBD_CtlError>
      break;
 8005152:	bf00      	nop
  }

  return ret;
 8005154:	7bfb      	ldrb	r3, [r7, #15]
}
 8005156:	4618      	mov	r0, r3
 8005158:	3710      	adds	r7, #16
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
	...

08005160 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800516a:	2300      	movs	r3, #0
 800516c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800516e:	2300      	movs	r3, #0
 8005170:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005172:	2300      	movs	r3, #0
 8005174:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	885b      	ldrh	r3, [r3, #2]
 800517a:	0a1b      	lsrs	r3, r3, #8
 800517c:	b29b      	uxth	r3, r3
 800517e:	3b01      	subs	r3, #1
 8005180:	2b06      	cmp	r3, #6
 8005182:	f200 8128 	bhi.w	80053d6 <USBD_GetDescriptor+0x276>
 8005186:	a201      	add	r2, pc, #4	; (adr r2, 800518c <USBD_GetDescriptor+0x2c>)
 8005188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800518c:	080051a9 	.word	0x080051a9
 8005190:	080051c1 	.word	0x080051c1
 8005194:	08005201 	.word	0x08005201
 8005198:	080053d7 	.word	0x080053d7
 800519c:	080053d7 	.word	0x080053d7
 80051a0:	08005377 	.word	0x08005377
 80051a4:	080053a3 	.word	0x080053a3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	7c12      	ldrb	r2, [r2, #16]
 80051b4:	f107 0108 	add.w	r1, r7, #8
 80051b8:	4610      	mov	r0, r2
 80051ba:	4798      	blx	r3
 80051bc:	60f8      	str	r0, [r7, #12]
      break;
 80051be:	e112      	b.n	80053e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	7c1b      	ldrb	r3, [r3, #16]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d10d      	bne.n	80051e4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d0:	f107 0208 	add.w	r2, r7, #8
 80051d4:	4610      	mov	r0, r2
 80051d6:	4798      	blx	r3
 80051d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	3301      	adds	r3, #1
 80051de:	2202      	movs	r2, #2
 80051e0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80051e2:	e100      	b.n	80053e6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ec:	f107 0208 	add.w	r2, r7, #8
 80051f0:	4610      	mov	r0, r2
 80051f2:	4798      	blx	r3
 80051f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	3301      	adds	r3, #1
 80051fa:	2202      	movs	r2, #2
 80051fc:	701a      	strb	r2, [r3, #0]
      break;
 80051fe:	e0f2      	b.n	80053e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	885b      	ldrh	r3, [r3, #2]
 8005204:	b2db      	uxtb	r3, r3
 8005206:	2b05      	cmp	r3, #5
 8005208:	f200 80ac 	bhi.w	8005364 <USBD_GetDescriptor+0x204>
 800520c:	a201      	add	r2, pc, #4	; (adr r2, 8005214 <USBD_GetDescriptor+0xb4>)
 800520e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005212:	bf00      	nop
 8005214:	0800522d 	.word	0x0800522d
 8005218:	08005261 	.word	0x08005261
 800521c:	08005295 	.word	0x08005295
 8005220:	080052c9 	.word	0x080052c9
 8005224:	080052fd 	.word	0x080052fd
 8005228:	08005331 	.word	0x08005331
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d00b      	beq.n	8005250 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	7c12      	ldrb	r2, [r2, #16]
 8005244:	f107 0108 	add.w	r1, r7, #8
 8005248:	4610      	mov	r0, r2
 800524a:	4798      	blx	r3
 800524c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800524e:	e091      	b.n	8005374 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005250:	6839      	ldr	r1, [r7, #0]
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 fab2 	bl	80057bc <USBD_CtlError>
            err++;
 8005258:	7afb      	ldrb	r3, [r7, #11]
 800525a:	3301      	adds	r3, #1
 800525c:	72fb      	strb	r3, [r7, #11]
          break;
 800525e:	e089      	b.n	8005374 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d00b      	beq.n	8005284 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	7c12      	ldrb	r2, [r2, #16]
 8005278:	f107 0108 	add.w	r1, r7, #8
 800527c:	4610      	mov	r0, r2
 800527e:	4798      	blx	r3
 8005280:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005282:	e077      	b.n	8005374 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005284:	6839      	ldr	r1, [r7, #0]
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 fa98 	bl	80057bc <USBD_CtlError>
            err++;
 800528c:	7afb      	ldrb	r3, [r7, #11]
 800528e:	3301      	adds	r3, #1
 8005290:	72fb      	strb	r3, [r7, #11]
          break;
 8005292:	e06f      	b.n	8005374 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d00b      	beq.n	80052b8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	7c12      	ldrb	r2, [r2, #16]
 80052ac:	f107 0108 	add.w	r1, r7, #8
 80052b0:	4610      	mov	r0, r2
 80052b2:	4798      	blx	r3
 80052b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80052b6:	e05d      	b.n	8005374 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80052b8:	6839      	ldr	r1, [r7, #0]
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 fa7e 	bl	80057bc <USBD_CtlError>
            err++;
 80052c0:	7afb      	ldrb	r3, [r7, #11]
 80052c2:	3301      	adds	r3, #1
 80052c4:	72fb      	strb	r3, [r7, #11]
          break;
 80052c6:	e055      	b.n	8005374 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00b      	beq.n	80052ec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	7c12      	ldrb	r2, [r2, #16]
 80052e0:	f107 0108 	add.w	r1, r7, #8
 80052e4:	4610      	mov	r0, r2
 80052e6:	4798      	blx	r3
 80052e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80052ea:	e043      	b.n	8005374 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80052ec:	6839      	ldr	r1, [r7, #0]
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 fa64 	bl	80057bc <USBD_CtlError>
            err++;
 80052f4:	7afb      	ldrb	r3, [r7, #11]
 80052f6:	3301      	adds	r3, #1
 80052f8:	72fb      	strb	r3, [r7, #11]
          break;
 80052fa:	e03b      	b.n	8005374 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005302:	695b      	ldr	r3, [r3, #20]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d00b      	beq.n	8005320 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800530e:	695b      	ldr	r3, [r3, #20]
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	7c12      	ldrb	r2, [r2, #16]
 8005314:	f107 0108 	add.w	r1, r7, #8
 8005318:	4610      	mov	r0, r2
 800531a:	4798      	blx	r3
 800531c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800531e:	e029      	b.n	8005374 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005320:	6839      	ldr	r1, [r7, #0]
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 fa4a 	bl	80057bc <USBD_CtlError>
            err++;
 8005328:	7afb      	ldrb	r3, [r7, #11]
 800532a:	3301      	adds	r3, #1
 800532c:	72fb      	strb	r3, [r7, #11]
          break;
 800532e:	e021      	b.n	8005374 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005336:	699b      	ldr	r3, [r3, #24]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00b      	beq.n	8005354 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	7c12      	ldrb	r2, [r2, #16]
 8005348:	f107 0108 	add.w	r1, r7, #8
 800534c:	4610      	mov	r0, r2
 800534e:	4798      	blx	r3
 8005350:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005352:	e00f      	b.n	8005374 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005354:	6839      	ldr	r1, [r7, #0]
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 fa30 	bl	80057bc <USBD_CtlError>
            err++;
 800535c:	7afb      	ldrb	r3, [r7, #11]
 800535e:	3301      	adds	r3, #1
 8005360:	72fb      	strb	r3, [r7, #11]
          break;
 8005362:	e007      	b.n	8005374 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005364:	6839      	ldr	r1, [r7, #0]
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 fa28 	bl	80057bc <USBD_CtlError>
          err++;
 800536c:	7afb      	ldrb	r3, [r7, #11]
 800536e:	3301      	adds	r3, #1
 8005370:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8005372:	bf00      	nop
      }
      break;
 8005374:	e037      	b.n	80053e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	7c1b      	ldrb	r3, [r3, #16]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d109      	bne.n	8005392 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005386:	f107 0208 	add.w	r2, r7, #8
 800538a:	4610      	mov	r0, r2
 800538c:	4798      	blx	r3
 800538e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005390:	e029      	b.n	80053e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005392:	6839      	ldr	r1, [r7, #0]
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f000 fa11 	bl	80057bc <USBD_CtlError>
        err++;
 800539a:	7afb      	ldrb	r3, [r7, #11]
 800539c:	3301      	adds	r3, #1
 800539e:	72fb      	strb	r3, [r7, #11]
      break;
 80053a0:	e021      	b.n	80053e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	7c1b      	ldrb	r3, [r3, #16]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10d      	bne.n	80053c6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b2:	f107 0208 	add.w	r2, r7, #8
 80053b6:	4610      	mov	r0, r2
 80053b8:	4798      	blx	r3
 80053ba:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	3301      	adds	r3, #1
 80053c0:	2207      	movs	r2, #7
 80053c2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80053c4:	e00f      	b.n	80053e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80053c6:	6839      	ldr	r1, [r7, #0]
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 f9f7 	bl	80057bc <USBD_CtlError>
        err++;
 80053ce:	7afb      	ldrb	r3, [r7, #11]
 80053d0:	3301      	adds	r3, #1
 80053d2:	72fb      	strb	r3, [r7, #11]
      break;
 80053d4:	e007      	b.n	80053e6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80053d6:	6839      	ldr	r1, [r7, #0]
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 f9ef 	bl	80057bc <USBD_CtlError>
      err++;
 80053de:	7afb      	ldrb	r3, [r7, #11]
 80053e0:	3301      	adds	r3, #1
 80053e2:	72fb      	strb	r3, [r7, #11]
      break;
 80053e4:	bf00      	nop
  }

  if (err != 0U)
 80053e6:	7afb      	ldrb	r3, [r7, #11]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d11e      	bne.n	800542a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	88db      	ldrh	r3, [r3, #6]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d016      	beq.n	8005422 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80053f4:	893b      	ldrh	r3, [r7, #8]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00e      	beq.n	8005418 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	88da      	ldrh	r2, [r3, #6]
 80053fe:	893b      	ldrh	r3, [r7, #8]
 8005400:	4293      	cmp	r3, r2
 8005402:	bf28      	it	cs
 8005404:	4613      	movcs	r3, r2
 8005406:	b29b      	uxth	r3, r3
 8005408:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800540a:	893b      	ldrh	r3, [r7, #8]
 800540c:	461a      	mov	r2, r3
 800540e:	68f9      	ldr	r1, [r7, #12]
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 fa44 	bl	800589e <USBD_CtlSendData>
 8005416:	e009      	b.n	800542c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005418:	6839      	ldr	r1, [r7, #0]
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f9ce 	bl	80057bc <USBD_CtlError>
 8005420:	e004      	b.n	800542c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 fa95 	bl	8005952 <USBD_CtlSendStatus>
 8005428:	e000      	b.n	800542c <USBD_GetDescriptor+0x2cc>
    return;
 800542a:	bf00      	nop
  }
}
 800542c:	3710      	adds	r7, #16
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop

08005434 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	889b      	ldrh	r3, [r3, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d131      	bne.n	80054aa <USBD_SetAddress+0x76>
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	88db      	ldrh	r3, [r3, #6]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d12d      	bne.n	80054aa <USBD_SetAddress+0x76>
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	885b      	ldrh	r3, [r3, #2]
 8005452:	2b7f      	cmp	r3, #127	; 0x7f
 8005454:	d829      	bhi.n	80054aa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	885b      	ldrh	r3, [r3, #2]
 800545a:	b2db      	uxtb	r3, r3
 800545c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005460:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b03      	cmp	r3, #3
 800546c:	d104      	bne.n	8005478 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800546e:	6839      	ldr	r1, [r7, #0]
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 f9a3 	bl	80057bc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005476:	e01d      	b.n	80054b4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	7bfa      	ldrb	r2, [r7, #15]
 800547c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005480:	7bfb      	ldrb	r3, [r7, #15]
 8005482:	4619      	mov	r1, r3
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 ff03 	bl	8006290 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 fa61 	bl	8005952 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005490:	7bfb      	ldrb	r3, [r7, #15]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d004      	beq.n	80054a0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2202      	movs	r2, #2
 800549a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800549e:	e009      	b.n	80054b4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054a8:	e004      	b.n	80054b4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80054aa:	6839      	ldr	r1, [r7, #0]
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 f985 	bl	80057bc <USBD_CtlError>
  }
}
 80054b2:	bf00      	nop
 80054b4:	bf00      	nop
 80054b6:	3710      	adds	r7, #16
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80054c6:	2300      	movs	r3, #0
 80054c8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	885b      	ldrh	r3, [r3, #2]
 80054ce:	b2da      	uxtb	r2, r3
 80054d0:	4b4c      	ldr	r3, [pc, #304]	; (8005604 <USBD_SetConfig+0x148>)
 80054d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80054d4:	4b4b      	ldr	r3, [pc, #300]	; (8005604 <USBD_SetConfig+0x148>)
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d905      	bls.n	80054e8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80054dc:	6839      	ldr	r1, [r7, #0]
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f96c 	bl	80057bc <USBD_CtlError>
    return USBD_FAIL;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e088      	b.n	80055fa <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d002      	beq.n	80054fa <USBD_SetConfig+0x3e>
 80054f4:	2b03      	cmp	r3, #3
 80054f6:	d025      	beq.n	8005544 <USBD_SetConfig+0x88>
 80054f8:	e071      	b.n	80055de <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80054fa:	4b42      	ldr	r3, [pc, #264]	; (8005604 <USBD_SetConfig+0x148>)
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d01c      	beq.n	800553c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8005502:	4b40      	ldr	r3, [pc, #256]	; (8005604 <USBD_SetConfig+0x148>)
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	461a      	mov	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800550c:	4b3d      	ldr	r3, [pc, #244]	; (8005604 <USBD_SetConfig+0x148>)
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	4619      	mov	r1, r3
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f7ff f948 	bl	80047a8 <USBD_SetClassConfig>
 8005518:	4603      	mov	r3, r0
 800551a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800551c:	7bfb      	ldrb	r3, [r7, #15]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d004      	beq.n	800552c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8005522:	6839      	ldr	r1, [r7, #0]
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 f949 	bl	80057bc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800552a:	e065      	b.n	80055f8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 fa10 	bl	8005952 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2203      	movs	r2, #3
 8005536:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800553a:	e05d      	b.n	80055f8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 fa08 	bl	8005952 <USBD_CtlSendStatus>
      break;
 8005542:	e059      	b.n	80055f8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005544:	4b2f      	ldr	r3, [pc, #188]	; (8005604 <USBD_SetConfig+0x148>)
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d112      	bne.n	8005572 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2202      	movs	r2, #2
 8005550:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005554:	4b2b      	ldr	r3, [pc, #172]	; (8005604 <USBD_SetConfig+0x148>)
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	461a      	mov	r2, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800555e:	4b29      	ldr	r3, [pc, #164]	; (8005604 <USBD_SetConfig+0x148>)
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	4619      	mov	r1, r3
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f7ff f93b 	bl	80047e0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f9f1 	bl	8005952 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005570:	e042      	b.n	80055f8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8005572:	4b24      	ldr	r3, [pc, #144]	; (8005604 <USBD_SetConfig+0x148>)
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	461a      	mov	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	429a      	cmp	r2, r3
 800557e:	d02a      	beq.n	80055d6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	b2db      	uxtb	r3, r3
 8005586:	4619      	mov	r1, r3
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f7ff f929 	bl	80047e0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800558e:	4b1d      	ldr	r3, [pc, #116]	; (8005604 <USBD_SetConfig+0x148>)
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	461a      	mov	r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005598:	4b1a      	ldr	r3, [pc, #104]	; (8005604 <USBD_SetConfig+0x148>)
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	4619      	mov	r1, r3
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f7ff f902 	bl	80047a8 <USBD_SetClassConfig>
 80055a4:	4603      	mov	r3, r0
 80055a6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80055a8:	7bfb      	ldrb	r3, [r7, #15]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00f      	beq.n	80055ce <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80055ae:	6839      	ldr	r1, [r7, #0]
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 f903 	bl	80057bc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	4619      	mov	r1, r3
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f7ff f90e 	bl	80047e0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2202      	movs	r2, #2
 80055c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80055cc:	e014      	b.n	80055f8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 f9bf 	bl	8005952 <USBD_CtlSendStatus>
      break;
 80055d4:	e010      	b.n	80055f8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 f9bb 	bl	8005952 <USBD_CtlSendStatus>
      break;
 80055dc:	e00c      	b.n	80055f8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80055de:	6839      	ldr	r1, [r7, #0]
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 f8eb 	bl	80057bc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80055e6:	4b07      	ldr	r3, [pc, #28]	; (8005604 <USBD_SetConfig+0x148>)
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	4619      	mov	r1, r3
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f7ff f8f7 	bl	80047e0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80055f2:	2303      	movs	r3, #3
 80055f4:	73fb      	strb	r3, [r7, #15]
      break;
 80055f6:	bf00      	nop
  }

  return ret;
 80055f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	200001a0 	.word	0x200001a0

08005608 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	88db      	ldrh	r3, [r3, #6]
 8005616:	2b01      	cmp	r3, #1
 8005618:	d004      	beq.n	8005624 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800561a:	6839      	ldr	r1, [r7, #0]
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 f8cd 	bl	80057bc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005622:	e023      	b.n	800566c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800562a:	b2db      	uxtb	r3, r3
 800562c:	2b02      	cmp	r3, #2
 800562e:	dc02      	bgt.n	8005636 <USBD_GetConfig+0x2e>
 8005630:	2b00      	cmp	r3, #0
 8005632:	dc03      	bgt.n	800563c <USBD_GetConfig+0x34>
 8005634:	e015      	b.n	8005662 <USBD_GetConfig+0x5a>
 8005636:	2b03      	cmp	r3, #3
 8005638:	d00b      	beq.n	8005652 <USBD_GetConfig+0x4a>
 800563a:	e012      	b.n	8005662 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	3308      	adds	r3, #8
 8005646:	2201      	movs	r2, #1
 8005648:	4619      	mov	r1, r3
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f927 	bl	800589e <USBD_CtlSendData>
        break;
 8005650:	e00c      	b.n	800566c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	3304      	adds	r3, #4
 8005656:	2201      	movs	r2, #1
 8005658:	4619      	mov	r1, r3
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 f91f 	bl	800589e <USBD_CtlSendData>
        break;
 8005660:	e004      	b.n	800566c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005662:	6839      	ldr	r1, [r7, #0]
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 f8a9 	bl	80057bc <USBD_CtlError>
        break;
 800566a:	bf00      	nop
}
 800566c:	bf00      	nop
 800566e:	3708      	adds	r7, #8
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005684:	b2db      	uxtb	r3, r3
 8005686:	3b01      	subs	r3, #1
 8005688:	2b02      	cmp	r3, #2
 800568a:	d81e      	bhi.n	80056ca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	88db      	ldrh	r3, [r3, #6]
 8005690:	2b02      	cmp	r3, #2
 8005692:	d004      	beq.n	800569e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005694:	6839      	ldr	r1, [r7, #0]
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f890 	bl	80057bc <USBD_CtlError>
        break;
 800569c:	e01a      	b.n	80056d4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d005      	beq.n	80056ba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	f043 0202 	orr.w	r2, r3, #2
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	330c      	adds	r3, #12
 80056be:	2202      	movs	r2, #2
 80056c0:	4619      	mov	r1, r3
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 f8eb 	bl	800589e <USBD_CtlSendData>
      break;
 80056c8:	e004      	b.n	80056d4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80056ca:	6839      	ldr	r1, [r7, #0]
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 f875 	bl	80057bc <USBD_CtlError>
      break;
 80056d2:	bf00      	nop
  }
}
 80056d4:	bf00      	nop
 80056d6:	3708      	adds	r7, #8
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	885b      	ldrh	r3, [r3, #2]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d106      	bne.n	80056fc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 f92b 	bl	8005952 <USBD_CtlSendStatus>
  }
}
 80056fc:	bf00      	nop
 80056fe:	3708      	adds	r7, #8
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005714:	b2db      	uxtb	r3, r3
 8005716:	3b01      	subs	r3, #1
 8005718:	2b02      	cmp	r3, #2
 800571a:	d80b      	bhi.n	8005734 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	885b      	ldrh	r3, [r3, #2]
 8005720:	2b01      	cmp	r3, #1
 8005722:	d10c      	bne.n	800573e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 f910 	bl	8005952 <USBD_CtlSendStatus>
      }
      break;
 8005732:	e004      	b.n	800573e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005734:	6839      	ldr	r1, [r7, #0]
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f840 	bl	80057bc <USBD_CtlError>
      break;
 800573c:	e000      	b.n	8005740 <USBD_ClrFeature+0x3c>
      break;
 800573e:	bf00      	nop
  }
}
 8005740:	bf00      	nop
 8005742:	3708      	adds	r7, #8
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	781a      	ldrb	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	3301      	adds	r3, #1
 8005762:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	781a      	ldrb	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	3301      	adds	r3, #1
 8005770:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	f7ff fabb 	bl	8004cee <SWAPBYTE>
 8005778:	4603      	mov	r3, r0
 800577a:	461a      	mov	r2, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	3301      	adds	r3, #1
 8005784:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	3301      	adds	r3, #1
 800578a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f7ff faae 	bl	8004cee <SWAPBYTE>
 8005792:	4603      	mov	r3, r0
 8005794:	461a      	mov	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	3301      	adds	r3, #1
 800579e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	3301      	adds	r3, #1
 80057a4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	f7ff faa1 	bl	8004cee <SWAPBYTE>
 80057ac:	4603      	mov	r3, r0
 80057ae:	461a      	mov	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	80da      	strh	r2, [r3, #6]
}
 80057b4:	bf00      	nop
 80057b6:	3710      	adds	r7, #16
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80057c6:	2180      	movs	r1, #128	; 0x80
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 fcf7 	bl	80061bc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80057ce:	2100      	movs	r1, #0
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 fcf3 	bl	80061bc <USBD_LL_StallEP>
}
 80057d6:	bf00      	nop
 80057d8:	3708      	adds	r7, #8
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b086      	sub	sp, #24
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	60f8      	str	r0, [r7, #12]
 80057e6:	60b9      	str	r1, [r7, #8]
 80057e8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80057ea:	2300      	movs	r3, #0
 80057ec:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d036      	beq.n	8005862 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80057f8:	6938      	ldr	r0, [r7, #16]
 80057fa:	f000 f836 	bl	800586a <USBD_GetLen>
 80057fe:	4603      	mov	r3, r0
 8005800:	3301      	adds	r3, #1
 8005802:	b29b      	uxth	r3, r3
 8005804:	005b      	lsls	r3, r3, #1
 8005806:	b29a      	uxth	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800580c:	7dfb      	ldrb	r3, [r7, #23]
 800580e:	68ba      	ldr	r2, [r7, #8]
 8005810:	4413      	add	r3, r2
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	7812      	ldrb	r2, [r2, #0]
 8005816:	701a      	strb	r2, [r3, #0]
  idx++;
 8005818:	7dfb      	ldrb	r3, [r7, #23]
 800581a:	3301      	adds	r3, #1
 800581c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800581e:	7dfb      	ldrb	r3, [r7, #23]
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	4413      	add	r3, r2
 8005824:	2203      	movs	r2, #3
 8005826:	701a      	strb	r2, [r3, #0]
  idx++;
 8005828:	7dfb      	ldrb	r3, [r7, #23]
 800582a:	3301      	adds	r3, #1
 800582c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800582e:	e013      	b.n	8005858 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8005830:	7dfb      	ldrb	r3, [r7, #23]
 8005832:	68ba      	ldr	r2, [r7, #8]
 8005834:	4413      	add	r3, r2
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	7812      	ldrb	r2, [r2, #0]
 800583a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	3301      	adds	r3, #1
 8005840:	613b      	str	r3, [r7, #16]
    idx++;
 8005842:	7dfb      	ldrb	r3, [r7, #23]
 8005844:	3301      	adds	r3, #1
 8005846:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005848:	7dfb      	ldrb	r3, [r7, #23]
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	4413      	add	r3, r2
 800584e:	2200      	movs	r2, #0
 8005850:	701a      	strb	r2, [r3, #0]
    idx++;
 8005852:	7dfb      	ldrb	r3, [r7, #23]
 8005854:	3301      	adds	r3, #1
 8005856:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1e7      	bne.n	8005830 <USBD_GetString+0x52>
 8005860:	e000      	b.n	8005864 <USBD_GetString+0x86>
    return;
 8005862:	bf00      	nop
  }
}
 8005864:	3718      	adds	r7, #24
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}

0800586a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800586a:	b480      	push	{r7}
 800586c:	b085      	sub	sp, #20
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005872:	2300      	movs	r3, #0
 8005874:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800587a:	e005      	b.n	8005888 <USBD_GetLen+0x1e>
  {
    len++;
 800587c:	7bfb      	ldrb	r3, [r7, #15]
 800587e:	3301      	adds	r3, #1
 8005880:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	3301      	adds	r3, #1
 8005886:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d1f5      	bne.n	800587c <USBD_GetLen+0x12>
  }

  return len;
 8005890:	7bfb      	ldrb	r3, [r7, #15]
}
 8005892:	4618      	mov	r0, r3
 8005894:	3714      	adds	r7, #20
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr

0800589e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800589e:	b580      	push	{r7, lr}
 80058a0:	b084      	sub	sp, #16
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	60f8      	str	r0, [r7, #12]
 80058a6:	60b9      	str	r1, [r7, #8]
 80058a8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2202      	movs	r2, #2
 80058ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	68ba      	ldr	r2, [r7, #8]
 80058c2:	2100      	movs	r1, #0
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f000 fd02 	bl	80062ce <USBD_LL_Transmit>

  return USBD_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3710      	adds	r7, #16
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	68ba      	ldr	r2, [r7, #8]
 80058e4:	2100      	movs	r1, #0
 80058e6:	68f8      	ldr	r0, [r7, #12]
 80058e8:	f000 fcf1 	bl	80062ce <USBD_LL_Transmit>

  return USBD_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3710      	adds	r7, #16
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b084      	sub	sp, #16
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	60f8      	str	r0, [r7, #12]
 80058fe:	60b9      	str	r1, [r7, #8]
 8005900:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2203      	movs	r2, #3
 8005906:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	68ba      	ldr	r2, [r7, #8]
 800591e:	2100      	movs	r1, #0
 8005920:	68f8      	ldr	r0, [r7, #12]
 8005922:	f000 fcf5 	bl	8006310 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3710      	adds	r7, #16
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	68ba      	ldr	r2, [r7, #8]
 8005940:	2100      	movs	r1, #0
 8005942:	68f8      	ldr	r0, [r7, #12]
 8005944:	f000 fce4 	bl	8006310 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}

08005952 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005952:	b580      	push	{r7, lr}
 8005954:	b082      	sub	sp, #8
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2204      	movs	r2, #4
 800595e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005962:	2300      	movs	r3, #0
 8005964:	2200      	movs	r2, #0
 8005966:	2100      	movs	r1, #0
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 fcb0 	bl	80062ce <USBD_LL_Transmit>

  return USBD_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3708      	adds	r7, #8
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2205      	movs	r2, #5
 8005984:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005988:	2300      	movs	r3, #0
 800598a:	2200      	movs	r2, #0
 800598c:	2100      	movs	r1, #0
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 fcbe 	bl	8006310 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3708      	adds	r7, #8
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
	...

080059a0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80059a4:	2200      	movs	r2, #0
 80059a6:	4912      	ldr	r1, [pc, #72]	; (80059f0 <MX_USB_DEVICE_Init+0x50>)
 80059a8:	4812      	ldr	r0, [pc, #72]	; (80059f4 <MX_USB_DEVICE_Init+0x54>)
 80059aa:	f7fe fe8f 	bl	80046cc <USBD_Init>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d001      	beq.n	80059b8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80059b4:	f7fa fe38 	bl	8000628 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80059b8:	490f      	ldr	r1, [pc, #60]	; (80059f8 <MX_USB_DEVICE_Init+0x58>)
 80059ba:	480e      	ldr	r0, [pc, #56]	; (80059f4 <MX_USB_DEVICE_Init+0x54>)
 80059bc:	f7fe feb6 	bl	800472c <USBD_RegisterClass>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d001      	beq.n	80059ca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80059c6:	f7fa fe2f 	bl	8000628 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80059ca:	490c      	ldr	r1, [pc, #48]	; (80059fc <MX_USB_DEVICE_Init+0x5c>)
 80059cc:	4809      	ldr	r0, [pc, #36]	; (80059f4 <MX_USB_DEVICE_Init+0x54>)
 80059ce:	f7fe fdd7 	bl	8004580 <USBD_CDC_RegisterInterface>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d001      	beq.n	80059dc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80059d8:	f7fa fe26 	bl	8000628 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80059dc:	4805      	ldr	r0, [pc, #20]	; (80059f4 <MX_USB_DEVICE_Init+0x54>)
 80059de:	f7fe fecc 	bl	800477a <USBD_Start>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d001      	beq.n	80059ec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80059e8:	f7fa fe1e 	bl	8000628 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80059ec:	bf00      	nop
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	20000134 	.word	0x20000134
 80059f4:	20000408 	.word	0x20000408
 80059f8:	2000001c 	.word	0x2000001c
 80059fc:	20000120 	.word	0x20000120

08005a00 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005a04:	2200      	movs	r2, #0
 8005a06:	4905      	ldr	r1, [pc, #20]	; (8005a1c <CDC_Init_FS+0x1c>)
 8005a08:	4805      	ldr	r0, [pc, #20]	; (8005a20 <CDC_Init_FS+0x20>)
 8005a0a:	f7fe fdce 	bl	80045aa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005a0e:	4905      	ldr	r1, [pc, #20]	; (8005a24 <CDC_Init_FS+0x24>)
 8005a10:	4803      	ldr	r0, [pc, #12]	; (8005a20 <CDC_Init_FS+0x20>)
 8005a12:	f7fe fde8 	bl	80045e6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005a16:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	20000ed8 	.word	0x20000ed8
 8005a20:	20000408 	.word	0x20000408
 8005a24:	200006d8 	.word	0x200006d8

08005a28 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005a2c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	4603      	mov	r3, r0
 8005a40:	6039      	str	r1, [r7, #0]
 8005a42:	71fb      	strb	r3, [r7, #7]
 8005a44:	4613      	mov	r3, r2
 8005a46:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005a48:	79fb      	ldrb	r3, [r7, #7]
 8005a4a:	2b23      	cmp	r3, #35	; 0x23
 8005a4c:	d84a      	bhi.n	8005ae4 <CDC_Control_FS+0xac>
 8005a4e:	a201      	add	r2, pc, #4	; (adr r2, 8005a54 <CDC_Control_FS+0x1c>)
 8005a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a54:	08005ae5 	.word	0x08005ae5
 8005a58:	08005ae5 	.word	0x08005ae5
 8005a5c:	08005ae5 	.word	0x08005ae5
 8005a60:	08005ae5 	.word	0x08005ae5
 8005a64:	08005ae5 	.word	0x08005ae5
 8005a68:	08005ae5 	.word	0x08005ae5
 8005a6c:	08005ae5 	.word	0x08005ae5
 8005a70:	08005ae5 	.word	0x08005ae5
 8005a74:	08005ae5 	.word	0x08005ae5
 8005a78:	08005ae5 	.word	0x08005ae5
 8005a7c:	08005ae5 	.word	0x08005ae5
 8005a80:	08005ae5 	.word	0x08005ae5
 8005a84:	08005ae5 	.word	0x08005ae5
 8005a88:	08005ae5 	.word	0x08005ae5
 8005a8c:	08005ae5 	.word	0x08005ae5
 8005a90:	08005ae5 	.word	0x08005ae5
 8005a94:	08005ae5 	.word	0x08005ae5
 8005a98:	08005ae5 	.word	0x08005ae5
 8005a9c:	08005ae5 	.word	0x08005ae5
 8005aa0:	08005ae5 	.word	0x08005ae5
 8005aa4:	08005ae5 	.word	0x08005ae5
 8005aa8:	08005ae5 	.word	0x08005ae5
 8005aac:	08005ae5 	.word	0x08005ae5
 8005ab0:	08005ae5 	.word	0x08005ae5
 8005ab4:	08005ae5 	.word	0x08005ae5
 8005ab8:	08005ae5 	.word	0x08005ae5
 8005abc:	08005ae5 	.word	0x08005ae5
 8005ac0:	08005ae5 	.word	0x08005ae5
 8005ac4:	08005ae5 	.word	0x08005ae5
 8005ac8:	08005ae5 	.word	0x08005ae5
 8005acc:	08005ae5 	.word	0x08005ae5
 8005ad0:	08005ae5 	.word	0x08005ae5
 8005ad4:	08005ae5 	.word	0x08005ae5
 8005ad8:	08005ae5 	.word	0x08005ae5
 8005adc:	08005ae5 	.word	0x08005ae5
 8005ae0:	08005ae5 	.word	0x08005ae5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005ae4:	bf00      	nop
  }

  return (USBD_OK);
 8005ae6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005afe:	6879      	ldr	r1, [r7, #4]
 8005b00:	480f      	ldr	r0, [pc, #60]	; (8005b40 <CDC_Receive_FS+0x4c>)
 8005b02:	f7fe fd70 	bl	80045e6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005b06:	480e      	ldr	r0, [pc, #56]	; (8005b40 <CDC_Receive_FS+0x4c>)
 8005b08:	f7fe fdb6 	bl	8004678 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t)*Len;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	73fb      	strb	r3, [r7, #15]
  memset(recivedbuffer, '\0', 64);
 8005b12:	2240      	movs	r2, #64	; 0x40
 8005b14:	2100      	movs	r1, #0
 8005b16:	480b      	ldr	r0, [pc, #44]	; (8005b44 <CDC_Receive_FS+0x50>)
 8005b18:	f000 fca4 	bl	8006464 <memset>
  memcpy(recivedbuffer,Buf,len );
 8005b1c:	7bfb      	ldrb	r3, [r7, #15]
 8005b1e:	461a      	mov	r2, r3
 8005b20:	6879      	ldr	r1, [r7, #4]
 8005b22:	4808      	ldr	r0, [pc, #32]	; (8005b44 <CDC_Receive_FS+0x50>)
 8005b24:	f000 fc90 	bl	8006448 <memcpy>
  memset(Buf, '\0', len);
 8005b28:	7bfb      	ldrb	r3, [r7, #15]
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	2100      	movs	r1, #0
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 fc98 	bl	8006464 <memset>
  return (USBD_OK);
 8005b34:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3710      	adds	r7, #16
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	20000408 	.word	0x20000408
 8005b44:	200003c4 	.word	0x200003c4

08005b48 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	460b      	mov	r3, r1
 8005b52:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8005b54:	2300      	movs	r3, #0
 8005b56:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005b58:	4b0d      	ldr	r3, [pc, #52]	; (8005b90 <CDC_Transmit_FS+0x48>)
 8005b5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b5e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d001      	beq.n	8005b6e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e00b      	b.n	8005b86 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005b6e:	887b      	ldrh	r3, [r7, #2]
 8005b70:	461a      	mov	r2, r3
 8005b72:	6879      	ldr	r1, [r7, #4]
 8005b74:	4806      	ldr	r0, [pc, #24]	; (8005b90 <CDC_Transmit_FS+0x48>)
 8005b76:	f7fe fd18 	bl	80045aa <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005b7a:	4805      	ldr	r0, [pc, #20]	; (8005b90 <CDC_Transmit_FS+0x48>)
 8005b7c:	f7fe fd4c 	bl	8004618 <USBD_CDC_TransmitPacket>
 8005b80:	4603      	mov	r3, r0
 8005b82:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8005b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3710      	adds	r7, #16
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	20000408 	.word	0x20000408

08005b94 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b087      	sub	sp, #28
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8005ba6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	371c      	adds	r7, #28
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
	...

08005bb8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	6039      	str	r1, [r7, #0]
 8005bc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	2212      	movs	r2, #18
 8005bc8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005bca:	4b03      	ldr	r3, [pc, #12]	; (8005bd8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr
 8005bd8:	20000150 	.word	0x20000150

08005bdc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	4603      	mov	r3, r0
 8005be4:	6039      	str	r1, [r7, #0]
 8005be6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	2204      	movs	r2, #4
 8005bec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005bee:	4b03      	ldr	r3, [pc, #12]	; (8005bfc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr
 8005bfc:	20000164 	.word	0x20000164

08005c00 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	4603      	mov	r3, r0
 8005c08:	6039      	str	r1, [r7, #0]
 8005c0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005c0c:	79fb      	ldrb	r3, [r7, #7]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d105      	bne.n	8005c1e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005c12:	683a      	ldr	r2, [r7, #0]
 8005c14:	4907      	ldr	r1, [pc, #28]	; (8005c34 <USBD_FS_ProductStrDescriptor+0x34>)
 8005c16:	4808      	ldr	r0, [pc, #32]	; (8005c38 <USBD_FS_ProductStrDescriptor+0x38>)
 8005c18:	f7ff fde1 	bl	80057de <USBD_GetString>
 8005c1c:	e004      	b.n	8005c28 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005c1e:	683a      	ldr	r2, [r7, #0]
 8005c20:	4904      	ldr	r1, [pc, #16]	; (8005c34 <USBD_FS_ProductStrDescriptor+0x34>)
 8005c22:	4805      	ldr	r0, [pc, #20]	; (8005c38 <USBD_FS_ProductStrDescriptor+0x38>)
 8005c24:	f7ff fddb 	bl	80057de <USBD_GetString>
  }
  return USBD_StrDesc;
 8005c28:	4b02      	ldr	r3, [pc, #8]	; (8005c34 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3708      	adds	r7, #8
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	200016d8 	.word	0x200016d8
 8005c38:	0800649c 	.word	0x0800649c

08005c3c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	4603      	mov	r3, r0
 8005c44:	6039      	str	r1, [r7, #0]
 8005c46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005c48:	683a      	ldr	r2, [r7, #0]
 8005c4a:	4904      	ldr	r1, [pc, #16]	; (8005c5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005c4c:	4804      	ldr	r0, [pc, #16]	; (8005c60 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005c4e:	f7ff fdc6 	bl	80057de <USBD_GetString>
  return USBD_StrDesc;
 8005c52:	4b02      	ldr	r3, [pc, #8]	; (8005c5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3708      	adds	r7, #8
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	200016d8 	.word	0x200016d8
 8005c60:	080064b4 	.word	0x080064b4

08005c64 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	6039      	str	r1, [r7, #0]
 8005c6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	221a      	movs	r2, #26
 8005c74:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005c76:	f000 f843 	bl	8005d00 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005c7a:	4b02      	ldr	r3, [pc, #8]	; (8005c84 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3708      	adds	r7, #8
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	20000168 	.word	0x20000168

08005c88 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	4603      	mov	r3, r0
 8005c90:	6039      	str	r1, [r7, #0]
 8005c92:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005c94:	79fb      	ldrb	r3, [r7, #7]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d105      	bne.n	8005ca6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005c9a:	683a      	ldr	r2, [r7, #0]
 8005c9c:	4907      	ldr	r1, [pc, #28]	; (8005cbc <USBD_FS_ConfigStrDescriptor+0x34>)
 8005c9e:	4808      	ldr	r0, [pc, #32]	; (8005cc0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005ca0:	f7ff fd9d 	bl	80057de <USBD_GetString>
 8005ca4:	e004      	b.n	8005cb0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005ca6:	683a      	ldr	r2, [r7, #0]
 8005ca8:	4904      	ldr	r1, [pc, #16]	; (8005cbc <USBD_FS_ConfigStrDescriptor+0x34>)
 8005caa:	4805      	ldr	r0, [pc, #20]	; (8005cc0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005cac:	f7ff fd97 	bl	80057de <USBD_GetString>
  }
  return USBD_StrDesc;
 8005cb0:	4b02      	ldr	r3, [pc, #8]	; (8005cbc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3708      	adds	r7, #8
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	200016d8 	.word	0x200016d8
 8005cc0:	080064c8 	.word	0x080064c8

08005cc4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	4603      	mov	r3, r0
 8005ccc:	6039      	str	r1, [r7, #0]
 8005cce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005cd0:	79fb      	ldrb	r3, [r7, #7]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d105      	bne.n	8005ce2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005cd6:	683a      	ldr	r2, [r7, #0]
 8005cd8:	4907      	ldr	r1, [pc, #28]	; (8005cf8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005cda:	4808      	ldr	r0, [pc, #32]	; (8005cfc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005cdc:	f7ff fd7f 	bl	80057de <USBD_GetString>
 8005ce0:	e004      	b.n	8005cec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005ce2:	683a      	ldr	r2, [r7, #0]
 8005ce4:	4904      	ldr	r1, [pc, #16]	; (8005cf8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005ce6:	4805      	ldr	r0, [pc, #20]	; (8005cfc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005ce8:	f7ff fd79 	bl	80057de <USBD_GetString>
  }
  return USBD_StrDesc;
 8005cec:	4b02      	ldr	r3, [pc, #8]	; (8005cf8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3708      	adds	r7, #8
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	200016d8 	.word	0x200016d8
 8005cfc:	080064d4 	.word	0x080064d4

08005d00 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005d06:	4b0f      	ldr	r3, [pc, #60]	; (8005d44 <Get_SerialNum+0x44>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005d0c:	4b0e      	ldr	r3, [pc, #56]	; (8005d48 <Get_SerialNum+0x48>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005d12:	4b0e      	ldr	r3, [pc, #56]	; (8005d4c <Get_SerialNum+0x4c>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d009      	beq.n	8005d3a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005d26:	2208      	movs	r2, #8
 8005d28:	4909      	ldr	r1, [pc, #36]	; (8005d50 <Get_SerialNum+0x50>)
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f000 f814 	bl	8005d58 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005d30:	2204      	movs	r2, #4
 8005d32:	4908      	ldr	r1, [pc, #32]	; (8005d54 <Get_SerialNum+0x54>)
 8005d34:	68b8      	ldr	r0, [r7, #8]
 8005d36:	f000 f80f 	bl	8005d58 <IntToUnicode>
  }
}
 8005d3a:	bf00      	nop
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	1fff7a10 	.word	0x1fff7a10
 8005d48:	1fff7a14 	.word	0x1fff7a14
 8005d4c:	1fff7a18 	.word	0x1fff7a18
 8005d50:	2000016a 	.word	0x2000016a
 8005d54:	2000017a 	.word	0x2000017a

08005d58 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b087      	sub	sp, #28
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	4613      	mov	r3, r2
 8005d64:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005d66:	2300      	movs	r3, #0
 8005d68:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	75fb      	strb	r3, [r7, #23]
 8005d6e:	e027      	b.n	8005dc0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	0f1b      	lsrs	r3, r3, #28
 8005d74:	2b09      	cmp	r3, #9
 8005d76:	d80b      	bhi.n	8005d90 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	0f1b      	lsrs	r3, r3, #28
 8005d7c:	b2da      	uxtb	r2, r3
 8005d7e:	7dfb      	ldrb	r3, [r7, #23]
 8005d80:	005b      	lsls	r3, r3, #1
 8005d82:	4619      	mov	r1, r3
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	440b      	add	r3, r1
 8005d88:	3230      	adds	r2, #48	; 0x30
 8005d8a:	b2d2      	uxtb	r2, r2
 8005d8c:	701a      	strb	r2, [r3, #0]
 8005d8e:	e00a      	b.n	8005da6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	0f1b      	lsrs	r3, r3, #28
 8005d94:	b2da      	uxtb	r2, r3
 8005d96:	7dfb      	ldrb	r3, [r7, #23]
 8005d98:	005b      	lsls	r3, r3, #1
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	440b      	add	r3, r1
 8005da0:	3237      	adds	r2, #55	; 0x37
 8005da2:	b2d2      	uxtb	r2, r2
 8005da4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	011b      	lsls	r3, r3, #4
 8005daa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005dac:	7dfb      	ldrb	r3, [r7, #23]
 8005dae:	005b      	lsls	r3, r3, #1
 8005db0:	3301      	adds	r3, #1
 8005db2:	68ba      	ldr	r2, [r7, #8]
 8005db4:	4413      	add	r3, r2
 8005db6:	2200      	movs	r2, #0
 8005db8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005dba:	7dfb      	ldrb	r3, [r7, #23]
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	75fb      	strb	r3, [r7, #23]
 8005dc0:	7dfa      	ldrb	r2, [r7, #23]
 8005dc2:	79fb      	ldrb	r3, [r7, #7]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d3d3      	bcc.n	8005d70 <IntToUnicode+0x18>
  }
}
 8005dc8:	bf00      	nop
 8005dca:	bf00      	nop
 8005dcc:	371c      	adds	r7, #28
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr
	...

08005dd8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b08a      	sub	sp, #40	; 0x28
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005de0:	f107 0314 	add.w	r3, r7, #20
 8005de4:	2200      	movs	r2, #0
 8005de6:	601a      	str	r2, [r3, #0]
 8005de8:	605a      	str	r2, [r3, #4]
 8005dea:	609a      	str	r2, [r3, #8]
 8005dec:	60da      	str	r2, [r3, #12]
 8005dee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005df8:	d13a      	bne.n	8005e70 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	613b      	str	r3, [r7, #16]
 8005dfe:	4b1e      	ldr	r3, [pc, #120]	; (8005e78 <HAL_PCD_MspInit+0xa0>)
 8005e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e02:	4a1d      	ldr	r2, [pc, #116]	; (8005e78 <HAL_PCD_MspInit+0xa0>)
 8005e04:	f043 0301 	orr.w	r3, r3, #1
 8005e08:	6313      	str	r3, [r2, #48]	; 0x30
 8005e0a:	4b1b      	ldr	r3, [pc, #108]	; (8005e78 <HAL_PCD_MspInit+0xa0>)
 8005e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e0e:	f003 0301 	and.w	r3, r3, #1
 8005e12:	613b      	str	r3, [r7, #16]
 8005e14:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005e16:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005e1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e1c:	2302      	movs	r3, #2
 8005e1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e20:	2300      	movs	r3, #0
 8005e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e24:	2303      	movs	r3, #3
 8005e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005e28:	230a      	movs	r3, #10
 8005e2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e2c:	f107 0314 	add.w	r3, r7, #20
 8005e30:	4619      	mov	r1, r3
 8005e32:	4812      	ldr	r0, [pc, #72]	; (8005e7c <HAL_PCD_MspInit+0xa4>)
 8005e34:	f7fa fe3e 	bl	8000ab4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005e38:	4b0f      	ldr	r3, [pc, #60]	; (8005e78 <HAL_PCD_MspInit+0xa0>)
 8005e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e3c:	4a0e      	ldr	r2, [pc, #56]	; (8005e78 <HAL_PCD_MspInit+0xa0>)
 8005e3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e42:	6353      	str	r3, [r2, #52]	; 0x34
 8005e44:	2300      	movs	r3, #0
 8005e46:	60fb      	str	r3, [r7, #12]
 8005e48:	4b0b      	ldr	r3, [pc, #44]	; (8005e78 <HAL_PCD_MspInit+0xa0>)
 8005e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e4c:	4a0a      	ldr	r2, [pc, #40]	; (8005e78 <HAL_PCD_MspInit+0xa0>)
 8005e4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e52:	6453      	str	r3, [r2, #68]	; 0x44
 8005e54:	4b08      	ldr	r3, [pc, #32]	; (8005e78 <HAL_PCD_MspInit+0xa0>)
 8005e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e5c:	60fb      	str	r3, [r7, #12]
 8005e5e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8005e60:	2200      	movs	r2, #0
 8005e62:	2100      	movs	r1, #0
 8005e64:	2043      	movs	r0, #67	; 0x43
 8005e66:	f7fa fdee 	bl	8000a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005e6a:	2043      	movs	r0, #67	; 0x43
 8005e6c:	f7fa fe07 	bl	8000a7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005e70:	bf00      	nop
 8005e72:	3728      	adds	r7, #40	; 0x28
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	40023800 	.word	0x40023800
 8005e7c:	40020000 	.word	0x40020000

08005e80 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005e94:	4619      	mov	r1, r3
 8005e96:	4610      	mov	r0, r2
 8005e98:	f7fe fcba 	bl	8004810 <USBD_LL_SetupStage>
}
 8005e9c:	bf00      	nop
 8005e9e:	3708      	adds	r7, #8
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	460b      	mov	r3, r1
 8005eae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005eb6:	78fa      	ldrb	r2, [r7, #3]
 8005eb8:	6879      	ldr	r1, [r7, #4]
 8005eba:	4613      	mov	r3, r2
 8005ebc:	00db      	lsls	r3, r3, #3
 8005ebe:	1a9b      	subs	r3, r3, r2
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	440b      	add	r3, r1
 8005ec4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	78fb      	ldrb	r3, [r7, #3]
 8005ecc:	4619      	mov	r1, r3
 8005ece:	f7fe fcf4 	bl	80048ba <USBD_LL_DataOutStage>
}
 8005ed2:	bf00      	nop
 8005ed4:	3708      	adds	r7, #8
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}

08005eda <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005eda:	b580      	push	{r7, lr}
 8005edc:	b082      	sub	sp, #8
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005eec:	78fa      	ldrb	r2, [r7, #3]
 8005eee:	6879      	ldr	r1, [r7, #4]
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	00db      	lsls	r3, r3, #3
 8005ef4:	1a9b      	subs	r3, r3, r2
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	440b      	add	r3, r1
 8005efa:	3348      	adds	r3, #72	; 0x48
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	78fb      	ldrb	r3, [r7, #3]
 8005f00:	4619      	mov	r1, r3
 8005f02:	f7fe fd3d 	bl	8004980 <USBD_LL_DataInStage>
}
 8005f06:	bf00      	nop
 8005f08:	3708      	adds	r7, #8
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b082      	sub	sp, #8
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f7fe fe51 	bl	8004bc4 <USBD_LL_SOF>
}
 8005f22:	bf00      	nop
 8005f24:	3708      	adds	r7, #8
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b084      	sub	sp, #16
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005f32:	2301      	movs	r3, #1
 8005f34:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d102      	bne.n	8005f44 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	73fb      	strb	r3, [r7, #15]
 8005f42:	e008      	b.n	8005f56 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d102      	bne.n	8005f52 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	73fb      	strb	r3, [r7, #15]
 8005f50:	e001      	b.n	8005f56 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8005f52:	f7fa fb69 	bl	8000628 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005f5c:	7bfa      	ldrb	r2, [r7, #15]
 8005f5e:	4611      	mov	r1, r2
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7fe fdf1 	bl	8004b48 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f7fe fd9d 	bl	8004aac <USBD_LL_Reset>
}
 8005f72:	bf00      	nop
 8005f74:	3710      	adds	r7, #16
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
	...

08005f7c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7fe fdec 	bl	8004b68 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	6812      	ldr	r2, [r2, #0]
 8005f9e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005fa2:	f043 0301 	orr.w	r3, r3, #1
 8005fa6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6a1b      	ldr	r3, [r3, #32]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d005      	beq.n	8005fbc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005fb0:	4b04      	ldr	r3, [pc, #16]	; (8005fc4 <HAL_PCD_SuspendCallback+0x48>)
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	4a03      	ldr	r2, [pc, #12]	; (8005fc4 <HAL_PCD_SuspendCallback+0x48>)
 8005fb6:	f043 0306 	orr.w	r3, r3, #6
 8005fba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005fbc:	bf00      	nop
 8005fbe:	3708      	adds	r7, #8
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	e000ed00 	.word	0xe000ed00

08005fc8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7fe fddc 	bl	8004b94 <USBD_LL_Resume>
}
 8005fdc:	bf00      	nop
 8005fde:	3708      	adds	r7, #8
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	460b      	mov	r3, r1
 8005fee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005ff6:	78fa      	ldrb	r2, [r7, #3]
 8005ff8:	4611      	mov	r1, r2
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7fe fe2a 	bl	8004c54 <USBD_LL_IsoOUTIncomplete>
}
 8006000:	bf00      	nop
 8006002:	3708      	adds	r7, #8
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	460b      	mov	r3, r1
 8006012:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800601a:	78fa      	ldrb	r2, [r7, #3]
 800601c:	4611      	mov	r1, r2
 800601e:	4618      	mov	r0, r3
 8006020:	f7fe fdf2 	bl	8004c08 <USBD_LL_IsoINIncomplete>
}
 8006024:	bf00      	nop
 8006026:	3708      	adds	r7, #8
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800603a:	4618      	mov	r0, r3
 800603c:	f7fe fe30 	bl	8004ca0 <USBD_LL_DevConnected>
}
 8006040:	bf00      	nop
 8006042:	3708      	adds	r7, #8
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006056:	4618      	mov	r0, r3
 8006058:	f7fe fe2d 	bl	8004cb6 <USBD_LL_DevDisconnected>
}
 800605c:	bf00      	nop
 800605e:	3708      	adds	r7, #8
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d13c      	bne.n	80060ee <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006074:	4a20      	ldr	r2, [pc, #128]	; (80060f8 <USBD_LL_Init+0x94>)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a1e      	ldr	r2, [pc, #120]	; (80060f8 <USBD_LL_Init+0x94>)
 8006080:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006084:	4b1c      	ldr	r3, [pc, #112]	; (80060f8 <USBD_LL_Init+0x94>)
 8006086:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800608a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800608c:	4b1a      	ldr	r3, [pc, #104]	; (80060f8 <USBD_LL_Init+0x94>)
 800608e:	2204      	movs	r2, #4
 8006090:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006092:	4b19      	ldr	r3, [pc, #100]	; (80060f8 <USBD_LL_Init+0x94>)
 8006094:	2202      	movs	r2, #2
 8006096:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006098:	4b17      	ldr	r3, [pc, #92]	; (80060f8 <USBD_LL_Init+0x94>)
 800609a:	2200      	movs	r2, #0
 800609c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800609e:	4b16      	ldr	r3, [pc, #88]	; (80060f8 <USBD_LL_Init+0x94>)
 80060a0:	2202      	movs	r2, #2
 80060a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80060a4:	4b14      	ldr	r3, [pc, #80]	; (80060f8 <USBD_LL_Init+0x94>)
 80060a6:	2200      	movs	r2, #0
 80060a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80060aa:	4b13      	ldr	r3, [pc, #76]	; (80060f8 <USBD_LL_Init+0x94>)
 80060ac:	2200      	movs	r2, #0
 80060ae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80060b0:	4b11      	ldr	r3, [pc, #68]	; (80060f8 <USBD_LL_Init+0x94>)
 80060b2:	2200      	movs	r2, #0
 80060b4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80060b6:	4b10      	ldr	r3, [pc, #64]	; (80060f8 <USBD_LL_Init+0x94>)
 80060b8:	2200      	movs	r2, #0
 80060ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80060bc:	4b0e      	ldr	r3, [pc, #56]	; (80060f8 <USBD_LL_Init+0x94>)
 80060be:	2200      	movs	r2, #0
 80060c0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80060c2:	480d      	ldr	r0, [pc, #52]	; (80060f8 <USBD_LL_Init+0x94>)
 80060c4:	f7fa fe92 	bl	8000dec <HAL_PCD_Init>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d001      	beq.n	80060d2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80060ce:	f7fa faab 	bl	8000628 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80060d2:	2180      	movs	r1, #128	; 0x80
 80060d4:	4808      	ldr	r0, [pc, #32]	; (80060f8 <USBD_LL_Init+0x94>)
 80060d6:	f7fb fff0 	bl	80020ba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80060da:	2240      	movs	r2, #64	; 0x40
 80060dc:	2100      	movs	r1, #0
 80060de:	4806      	ldr	r0, [pc, #24]	; (80060f8 <USBD_LL_Init+0x94>)
 80060e0:	f7fb ffa4 	bl	800202c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80060e4:	2280      	movs	r2, #128	; 0x80
 80060e6:	2101      	movs	r1, #1
 80060e8:	4803      	ldr	r0, [pc, #12]	; (80060f8 <USBD_LL_Init+0x94>)
 80060ea:	f7fb ff9f 	bl	800202c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3708      	adds	r7, #8
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	200018d8 	.word	0x200018d8

080060fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006104:	2300      	movs	r3, #0
 8006106:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006108:	2300      	movs	r3, #0
 800610a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006112:	4618      	mov	r0, r3
 8006114:	f7fa ff87 	bl	8001026 <HAL_PCD_Start>
 8006118:	4603      	mov	r3, r0
 800611a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800611c:	7bfb      	ldrb	r3, [r7, #15]
 800611e:	4618      	mov	r0, r3
 8006120:	f000 f942 	bl	80063a8 <USBD_Get_USB_Status>
 8006124:	4603      	mov	r3, r0
 8006126:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006128:	7bbb      	ldrb	r3, [r7, #14]
}
 800612a:	4618      	mov	r0, r3
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b084      	sub	sp, #16
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
 800613a:	4608      	mov	r0, r1
 800613c:	4611      	mov	r1, r2
 800613e:	461a      	mov	r2, r3
 8006140:	4603      	mov	r3, r0
 8006142:	70fb      	strb	r3, [r7, #3]
 8006144:	460b      	mov	r3, r1
 8006146:	70bb      	strb	r3, [r7, #2]
 8006148:	4613      	mov	r3, r2
 800614a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800614c:	2300      	movs	r3, #0
 800614e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006150:	2300      	movs	r3, #0
 8006152:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800615a:	78bb      	ldrb	r3, [r7, #2]
 800615c:	883a      	ldrh	r2, [r7, #0]
 800615e:	78f9      	ldrb	r1, [r7, #3]
 8006160:	f7fb fb6b 	bl	800183a <HAL_PCD_EP_Open>
 8006164:	4603      	mov	r3, r0
 8006166:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006168:	7bfb      	ldrb	r3, [r7, #15]
 800616a:	4618      	mov	r0, r3
 800616c:	f000 f91c 	bl	80063a8 <USBD_Get_USB_Status>
 8006170:	4603      	mov	r3, r0
 8006172:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006174:	7bbb      	ldrb	r3, [r7, #14]
}
 8006176:	4618      	mov	r0, r3
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b084      	sub	sp, #16
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
 8006186:	460b      	mov	r3, r1
 8006188:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800618a:	2300      	movs	r3, #0
 800618c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800618e:	2300      	movs	r3, #0
 8006190:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006198:	78fa      	ldrb	r2, [r7, #3]
 800619a:	4611      	mov	r1, r2
 800619c:	4618      	mov	r0, r3
 800619e:	f7fb fbb4 	bl	800190a <HAL_PCD_EP_Close>
 80061a2:	4603      	mov	r3, r0
 80061a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80061a6:	7bfb      	ldrb	r3, [r7, #15]
 80061a8:	4618      	mov	r0, r3
 80061aa:	f000 f8fd 	bl	80063a8 <USBD_Get_USB_Status>
 80061ae:	4603      	mov	r3, r0
 80061b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80061b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3710      	adds	r7, #16
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	460b      	mov	r3, r1
 80061c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80061c8:	2300      	movs	r3, #0
 80061ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80061cc:	2300      	movs	r3, #0
 80061ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80061d6:	78fa      	ldrb	r2, [r7, #3]
 80061d8:	4611      	mov	r1, r2
 80061da:	4618      	mov	r0, r3
 80061dc:	f7fb fc8c 	bl	8001af8 <HAL_PCD_EP_SetStall>
 80061e0:	4603      	mov	r3, r0
 80061e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80061e4:	7bfb      	ldrb	r3, [r7, #15]
 80061e6:	4618      	mov	r0, r3
 80061e8:	f000 f8de 	bl	80063a8 <USBD_Get_USB_Status>
 80061ec:	4603      	mov	r3, r0
 80061ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80061f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3710      	adds	r7, #16
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b084      	sub	sp, #16
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
 8006202:	460b      	mov	r3, r1
 8006204:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006206:	2300      	movs	r3, #0
 8006208:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800620a:	2300      	movs	r3, #0
 800620c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006214:	78fa      	ldrb	r2, [r7, #3]
 8006216:	4611      	mov	r1, r2
 8006218:	4618      	mov	r0, r3
 800621a:	f7fb fcd1 	bl	8001bc0 <HAL_PCD_EP_ClrStall>
 800621e:	4603      	mov	r3, r0
 8006220:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006222:	7bfb      	ldrb	r3, [r7, #15]
 8006224:	4618      	mov	r0, r3
 8006226:	f000 f8bf 	bl	80063a8 <USBD_Get_USB_Status>
 800622a:	4603      	mov	r3, r0
 800622c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800622e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006230:	4618      	mov	r0, r3
 8006232:	3710      	adds	r7, #16
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006238:	b480      	push	{r7}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	460b      	mov	r3, r1
 8006242:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800624a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800624c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006250:	2b00      	cmp	r3, #0
 8006252:	da0b      	bge.n	800626c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006254:	78fb      	ldrb	r3, [r7, #3]
 8006256:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800625a:	68f9      	ldr	r1, [r7, #12]
 800625c:	4613      	mov	r3, r2
 800625e:	00db      	lsls	r3, r3, #3
 8006260:	1a9b      	subs	r3, r3, r2
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	440b      	add	r3, r1
 8006266:	333e      	adds	r3, #62	; 0x3e
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	e00b      	b.n	8006284 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800626c:	78fb      	ldrb	r3, [r7, #3]
 800626e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006272:	68f9      	ldr	r1, [r7, #12]
 8006274:	4613      	mov	r3, r2
 8006276:	00db      	lsls	r3, r3, #3
 8006278:	1a9b      	subs	r3, r3, r2
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	440b      	add	r3, r1
 800627e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006282:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006284:	4618      	mov	r0, r3
 8006286:	3714      	adds	r7, #20
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	460b      	mov	r3, r1
 800629a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800629c:	2300      	movs	r3, #0
 800629e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80062a0:	2300      	movs	r3, #0
 80062a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80062aa:	78fa      	ldrb	r2, [r7, #3]
 80062ac:	4611      	mov	r1, r2
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7fb fa9e 	bl	80017f0 <HAL_PCD_SetAddress>
 80062b4:	4603      	mov	r3, r0
 80062b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80062b8:	7bfb      	ldrb	r3, [r7, #15]
 80062ba:	4618      	mov	r0, r3
 80062bc:	f000 f874 	bl	80063a8 <USBD_Get_USB_Status>
 80062c0:	4603      	mov	r3, r0
 80062c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80062c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b086      	sub	sp, #24
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	60f8      	str	r0, [r7, #12]
 80062d6:	607a      	str	r2, [r7, #4]
 80062d8:	603b      	str	r3, [r7, #0]
 80062da:	460b      	mov	r3, r1
 80062dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80062de:	2300      	movs	r3, #0
 80062e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80062e2:	2300      	movs	r3, #0
 80062e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80062ec:	7af9      	ldrb	r1, [r7, #11]
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	f7fb fbb7 	bl	8001a64 <HAL_PCD_EP_Transmit>
 80062f6:	4603      	mov	r3, r0
 80062f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80062fa:	7dfb      	ldrb	r3, [r7, #23]
 80062fc:	4618      	mov	r0, r3
 80062fe:	f000 f853 	bl	80063a8 <USBD_Get_USB_Status>
 8006302:	4603      	mov	r3, r0
 8006304:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006306:	7dbb      	ldrb	r3, [r7, #22]
}
 8006308:	4618      	mov	r0, r3
 800630a:	3718      	adds	r7, #24
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b086      	sub	sp, #24
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	607a      	str	r2, [r7, #4]
 800631a:	603b      	str	r3, [r7, #0]
 800631c:	460b      	mov	r3, r1
 800631e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006320:	2300      	movs	r3, #0
 8006322:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006324:	2300      	movs	r3, #0
 8006326:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800632e:	7af9      	ldrb	r1, [r7, #11]
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	f7fb fb33 	bl	800199e <HAL_PCD_EP_Receive>
 8006338:	4603      	mov	r3, r0
 800633a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800633c:	7dfb      	ldrb	r3, [r7, #23]
 800633e:	4618      	mov	r0, r3
 8006340:	f000 f832 	bl	80063a8 <USBD_Get_USB_Status>
 8006344:	4603      	mov	r3, r0
 8006346:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006348:	7dbb      	ldrb	r3, [r7, #22]
}
 800634a:	4618      	mov	r0, r3
 800634c:	3718      	adds	r7, #24
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006352:	b580      	push	{r7, lr}
 8006354:	b082      	sub	sp, #8
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
 800635a:	460b      	mov	r3, r1
 800635c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006364:	78fa      	ldrb	r2, [r7, #3]
 8006366:	4611      	mov	r1, r2
 8006368:	4618      	mov	r0, r3
 800636a:	f7fb fb63 	bl	8001a34 <HAL_PCD_EP_GetRxCount>
 800636e:	4603      	mov	r3, r0
}
 8006370:	4618      	mov	r0, r3
 8006372:	3708      	adds	r7, #8
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006380:	4b03      	ldr	r3, [pc, #12]	; (8006390 <USBD_static_malloc+0x18>)
}
 8006382:	4618      	mov	r0, r3
 8006384:	370c      	adds	r7, #12
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	200001a4 	.word	0x200001a4

08006394 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]

}
 800639c:	bf00      	nop
 800639e:	370c      	adds	r7, #12
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b085      	sub	sp, #20
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	4603      	mov	r3, r0
 80063b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80063b2:	2300      	movs	r3, #0
 80063b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80063b6:	79fb      	ldrb	r3, [r7, #7]
 80063b8:	2b03      	cmp	r3, #3
 80063ba:	d817      	bhi.n	80063ec <USBD_Get_USB_Status+0x44>
 80063bc:	a201      	add	r2, pc, #4	; (adr r2, 80063c4 <USBD_Get_USB_Status+0x1c>)
 80063be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c2:	bf00      	nop
 80063c4:	080063d5 	.word	0x080063d5
 80063c8:	080063db 	.word	0x080063db
 80063cc:	080063e1 	.word	0x080063e1
 80063d0:	080063e7 	.word	0x080063e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80063d4:	2300      	movs	r3, #0
 80063d6:	73fb      	strb	r3, [r7, #15]
    break;
 80063d8:	e00b      	b.n	80063f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80063da:	2303      	movs	r3, #3
 80063dc:	73fb      	strb	r3, [r7, #15]
    break;
 80063de:	e008      	b.n	80063f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80063e0:	2301      	movs	r3, #1
 80063e2:	73fb      	strb	r3, [r7, #15]
    break;
 80063e4:	e005      	b.n	80063f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80063e6:	2303      	movs	r3, #3
 80063e8:	73fb      	strb	r3, [r7, #15]
    break;
 80063ea:	e002      	b.n	80063f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80063ec:	2303      	movs	r3, #3
 80063ee:	73fb      	strb	r3, [r7, #15]
    break;
 80063f0:	bf00      	nop
  }
  return usb_status;
 80063f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3714      	adds	r7, #20
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <__libc_init_array>:
 8006400:	b570      	push	{r4, r5, r6, lr}
 8006402:	4d0d      	ldr	r5, [pc, #52]	; (8006438 <__libc_init_array+0x38>)
 8006404:	4c0d      	ldr	r4, [pc, #52]	; (800643c <__libc_init_array+0x3c>)
 8006406:	1b64      	subs	r4, r4, r5
 8006408:	10a4      	asrs	r4, r4, #2
 800640a:	2600      	movs	r6, #0
 800640c:	42a6      	cmp	r6, r4
 800640e:	d109      	bne.n	8006424 <__libc_init_array+0x24>
 8006410:	4d0b      	ldr	r5, [pc, #44]	; (8006440 <__libc_init_array+0x40>)
 8006412:	4c0c      	ldr	r4, [pc, #48]	; (8006444 <__libc_init_array+0x44>)
 8006414:	f000 f82e 	bl	8006474 <_init>
 8006418:	1b64      	subs	r4, r4, r5
 800641a:	10a4      	asrs	r4, r4, #2
 800641c:	2600      	movs	r6, #0
 800641e:	42a6      	cmp	r6, r4
 8006420:	d105      	bne.n	800642e <__libc_init_array+0x2e>
 8006422:	bd70      	pop	{r4, r5, r6, pc}
 8006424:	f855 3b04 	ldr.w	r3, [r5], #4
 8006428:	4798      	blx	r3
 800642a:	3601      	adds	r6, #1
 800642c:	e7ee      	b.n	800640c <__libc_init_array+0xc>
 800642e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006432:	4798      	blx	r3
 8006434:	3601      	adds	r6, #1
 8006436:	e7f2      	b.n	800641e <__libc_init_array+0x1e>
 8006438:	080064fc 	.word	0x080064fc
 800643c:	080064fc 	.word	0x080064fc
 8006440:	080064fc 	.word	0x080064fc
 8006444:	08006500 	.word	0x08006500

08006448 <memcpy>:
 8006448:	440a      	add	r2, r1
 800644a:	4291      	cmp	r1, r2
 800644c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006450:	d100      	bne.n	8006454 <memcpy+0xc>
 8006452:	4770      	bx	lr
 8006454:	b510      	push	{r4, lr}
 8006456:	f811 4b01 	ldrb.w	r4, [r1], #1
 800645a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800645e:	4291      	cmp	r1, r2
 8006460:	d1f9      	bne.n	8006456 <memcpy+0xe>
 8006462:	bd10      	pop	{r4, pc}

08006464 <memset>:
 8006464:	4402      	add	r2, r0
 8006466:	4603      	mov	r3, r0
 8006468:	4293      	cmp	r3, r2
 800646a:	d100      	bne.n	800646e <memset+0xa>
 800646c:	4770      	bx	lr
 800646e:	f803 1b01 	strb.w	r1, [r3], #1
 8006472:	e7f9      	b.n	8006468 <memset+0x4>

08006474 <_init>:
 8006474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006476:	bf00      	nop
 8006478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800647a:	bc08      	pop	{r3}
 800647c:	469e      	mov	lr, r3
 800647e:	4770      	bx	lr

08006480 <_fini>:
 8006480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006482:	bf00      	nop
 8006484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006486:	bc08      	pop	{r3}
 8006488:	469e      	mov	lr, r3
 800648a:	4770      	bx	lr
